// <auto-generated />
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 618
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998
[assembly: global::Orleans.Metadata.FeaturePopulatorAttribute(typeof (OrleansGeneratedCode.OrleansCodeGenff43076c6aFeaturePopulator))]
[assembly: global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0")]
[assembly: global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute(@"GrainInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")]
namespace SystemInterfaces
{
    using global::Orleans;
    using global::System.Reflection;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IBatchCoordinator))]
    internal class OrleansCodeGenBatchCoordinatorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IBatchCoordinator
    {
        protected OrleansCodeGenBatchCoordinatorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenBatchCoordinatorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenBatchCoordinatorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 2046360863;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IBatchCoordinator";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 2046360863 || interfaceId == -1277021679;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 2046360863:
                    switch (methodId)
                    {
                        case -2122526991:
                            return @"AddSourceAndRegisterTimer";
                        case -76047527:
                            return @"StartCommit";
                        case -546505175:
                            return @"StartRecovery";
                        case 2046534918:
                            return @"SendBarrier";
                        case -698663036:
                            return @"CompleteCommit";
                        case 1842635648:
                            return @"CompleteRecovery";
                        case 1408175506:
                            return @"GetCommittedBatchID";
                        case 1955114601:
                            return @"StartBarrierTimer";
                        case -1621021040:
                            return @"AddProcessingTime";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 2046360863 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task AddSourceAndRegisterTimer(global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage> stream, global::SystemInterfaces.IStreamSource channel)
        {
            return base.InvokeMethodAsync<global::System.Object>(-2122526991, new global::System.Object[]{stream, channel is global::Orleans.Grain ? channel.AsReference<global::SystemInterfaces.IStreamSource>() : channel});
        }

        public global::System.Threading.Tasks.Task StartCommit(global::System.Int32 ID)
        {
            return base.InvokeMethodAsync<global::System.Object>(-76047527, new global::System.Object[]{ID});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> StartRecovery()
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-546505175, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> SendBarrier()
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(2046534918, null);
        }

        public global::System.Threading.Tasks.Task CompleteCommit(global::System.Int32 batchID)
        {
            return base.InvokeMethodAsync<global::System.Object>(-698663036, new global::System.Object[]{batchID});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> CompleteRecovery(global::System.Int32 batchID)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1842635648, new global::System.Object[]{batchID});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetCommittedBatchID()
        {
            return base.InvokeMethodAsync<global::System.Int32>(1408175506, null);
        }

        public global::System.Threading.Tasks.Task StartBarrierTimer()
        {
            return base.InvokeMethodAsync<global::System.Object>(1955114601, null);
        }

        public global::System.Threading.Tasks.Task AddProcessingTime(global::System.Int32 time)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1621021040, new global::System.Object[]{time});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IBatchCoordinator), 2046360863), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenBatchCoordinatorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 2046360863:
                    switch (methodId)
                    {
                        case -2122526991:
                            await ((global::SystemInterfaces.IBatchCoordinator)grain).AddSourceAndRegisterTimer((global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[0], (global::SystemInterfaces.IStreamSource)arguments[1]);
                            return null;
                        case -76047527:
                            await ((global::SystemInterfaces.IBatchCoordinator)grain).StartCommit((global::System.Int32)arguments[0]);
                            return null;
                        case -546505175:
                            return await ((global::SystemInterfaces.IBatchCoordinator)grain).StartRecovery();
                        case 2046534918:
                            return await ((global::SystemInterfaces.IBatchCoordinator)grain).SendBarrier();
                        case -698663036:
                            await ((global::SystemInterfaces.IBatchCoordinator)grain).CompleteCommit((global::System.Int32)arguments[0]);
                            return null;
                        case 1842635648:
                            return await ((global::SystemInterfaces.IBatchCoordinator)grain).CompleteRecovery((global::System.Int32)arguments[0]);
                        case 1408175506:
                            return await ((global::SystemInterfaces.IBatchCoordinator)grain).GetCommittedBatchID();
                        case 1955114601:
                            await ((global::SystemInterfaces.IBatchCoordinator)grain).StartBarrierTimer();
                            return null;
                        case -1621021040:
                            await ((global::SystemInterfaces.IBatchCoordinator)grain).AddProcessingTime((global::System.Int32)arguments[0]);
                            return null;
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 2046360863 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 2046360863;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IBatchTracker))]
    internal class OrleansCodeGenBatchTrackerReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IBatchTracker
    {
        protected OrleansCodeGenBatchTrackerReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenBatchTrackerReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenBatchTrackerReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 998595849;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IBatchTracker";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 998595849 || interfaceId == -1277021679;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 998595849:
                    switch (methodId)
                    {
                        case 1479718266:
                            return @"IsReadyForCommit";
                        case -1437527581:
                            return @"IsCommitSuccess";
                        case -1361007671:
                            return @"CleanUpOnRecovery";
                        case -1116510309:
                            return @"TrackingBarrierMessages";
                        case -1092259612:
                            return @"TrackingCommitMessages";
                        case -1240331827:
                            return @"TrackingRecoveryMessages";
                        case -1325206250:
                            return @"CompleteOneOperatorCommit";
                        case 654820121:
                            return @"CompleteOneOperatorBarrier";
                        case 1440194327:
                            return @"CompleteOneOperatorRecovery";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 998595849 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task<global::System.Boolean> IsReadyForCommit(global::System.Int32 batchID)
        {
            return base.InvokeMethodAsync<global::System.Boolean>(1479718266, new global::System.Object[]{batchID});
        }

        public global::System.Threading.Tasks.Task<global::System.Boolean> IsCommitSuccess(global::System.Int32 batchID)
        {
            return base.InvokeMethodAsync<global::System.Boolean>(-1437527581, new global::System.Object[]{batchID});
        }

        public global::System.Threading.Tasks.Task CleanUpOnRecovery()
        {
            return base.InvokeMethodAsync<global::System.Object>(-1361007671, null);
        }

        public global::System.Threading.Tasks.Task TrackingBarrierMessages(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1116510309, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task TrackingCommitMessages(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1092259612, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task TrackingRecoveryMessages(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1240331827, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> CompleteOneOperatorCommit(global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo msgInfo)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1325206250, new global::System.Object[]{msgInfo});
        }

        public global::System.Threading.Tasks.Task CompleteOneOperatorBarrier(global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo msgInfo)
        {
            return base.InvokeMethodAsync<global::System.Object>(654820121, new global::System.Object[]{msgInfo});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> CompleteOneOperatorRecovery(global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo msgInfo)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1440194327, new global::System.Object[]{msgInfo});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IBatchTracker), 998595849), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenBatchTrackerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 998595849:
                    switch (methodId)
                    {
                        case 1479718266:
                            return await ((global::SystemInterfaces.IBatchTracker)grain).IsReadyForCommit((global::System.Int32)arguments[0]);
                        case -1437527581:
                            return await ((global::SystemInterfaces.IBatchTracker)grain).IsCommitSuccess((global::System.Int32)arguments[0]);
                        case -1361007671:
                            await ((global::SystemInterfaces.IBatchTracker)grain).CleanUpOnRecovery();
                            return null;
                        case -1116510309:
                            await ((global::SystemInterfaces.IBatchTracker)grain).TrackingBarrierMessages((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case -1092259612:
                            await ((global::SystemInterfaces.IBatchTracker)grain).TrackingCommitMessages((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case -1240331827:
                            await ((global::SystemInterfaces.IBatchTracker)grain).TrackingRecoveryMessages((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case -1325206250:
                            return await ((global::SystemInterfaces.IBatchTracker)grain).CompleteOneOperatorCommit((global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)arguments[0]);
                        case 654820121:
                            await ((global::SystemInterfaces.IBatchTracker)grain).CompleteOneOperatorBarrier((global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)arguments[0]);
                            return null;
                        case 1440194327:
                            return await ((global::SystemInterfaces.IBatchTracker)grain).CompleteOneOperatorRecovery((global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 998595849 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 998595849;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IErrorDetector))]
    internal class OrleansCodeGenErrorDetectorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IErrorDetector
    {
        protected OrleansCodeGenErrorDetectorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenErrorDetectorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenErrorDetectorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 1654829170;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IErrorDetector";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 1654829170 || interfaceId == -1277021679;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 1654829170:
                    switch (methodId)
                    {
                        case 737480785:
                            return @"RegisterTimerToDetectFailures";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 1654829170 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task RegisterTimerToDetectFailures()
        {
            return base.InvokeMethodAsync<global::System.Object>(737480785, null);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IErrorDetector), 1654829170), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenErrorDetectorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 1654829170:
                    switch (methodId)
                    {
                        case 737480785:
                            await ((global::SystemInterfaces.IErrorDetector)grain).RegisterTimerToDetectFailures();
                            return null;
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 1654829170 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 1654829170;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IOperator))]
    internal class OrleansCodeGenOperatorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IOperator
    {
        protected OrleansCodeGenOperatorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenOperatorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenOperatorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return -66543353;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IOperator";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == -66543353;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case -1221400782:
                            return @"ExecuteMessage";
                        case -2061238574:
                            return @"DetectErrors";
                        case 2075549514:
                            return @"GetStateInReverseLog";
                        case 408823471:
                            return @"GetStateInIncrementalLog";
                        case -1226735009:
                            return @"GetState";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomDownStreamOperators(global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit> units)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-547603550, new global::System.Object[]{units});
        }

        public global::System.Threading.Tasks.Task RemoveCustomDownStreamOperator(global::System.Guid guid)
        {
            return base.InvokeMethodAsync<global::System.Object>(1005660065, new global::System.Object[]{guid});
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.TopologyUnit> GetTopologyUnit()
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.TopologyUnit>(211822306, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ExecuteMessage(global::SystemInterfaces.Model.StreamMessage msg, global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage> stream)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1221400782, new global::System.Object[]{msg, stream});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> DetectErrors()
        {
            return base.InvokeMethodAsync<global::System.Int32>(-2061238574, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInReverseLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(2075549514, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInIncrementalLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(408823471, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetState(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(-1226735009, new global::System.Object[]{word});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IOperator), -66543353), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenOperatorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return await ((global::SystemInterfaces.IOperator)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IOperator)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case 211822306:
                            return await ((global::SystemInterfaces.IOperator)grain).GetTopologyUnit();
                        case -1221400782:
                            return await ((global::SystemInterfaces.IOperator)grain).ExecuteMessage((global::SystemInterfaces.Model.StreamMessage)arguments[0], (global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[1]);
                        case -2061238574:
                            return await ((global::SystemInterfaces.IOperator)grain).DetectErrors();
                        case 2075549514:
                            return await ((global::SystemInterfaces.IOperator)grain).GetStateInReverseLog((global::System.String)arguments[0]);
                        case 408823471:
                            return await ((global::SystemInterfaces.IOperator)grain).GetStateInIncrementalLog((global::System.String)arguments[0]);
                        case -1226735009:
                            return await ((global::SystemInterfaces.IOperator)grain).GetState((global::System.String)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return -66543353;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.ISentenceGenerator))]
    internal class OrleansCodeGenSentenceGeneratorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.ISentenceGenerator
    {
        protected OrleansCodeGenSentenceGeneratorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenSentenceGeneratorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenSentenceGeneratorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 1422618689;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.ISentenceGenerator";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 1422618689 || interfaceId == -1277021679;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 1422618689:
                    switch (methodId)
                    {
                        case 1506728396:
                            return @"RegisterTimerAndSetSources";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 1422618689 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task RegisterTimerAndSetSources(global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource> sources)
        {
            return base.InvokeMethodAsync<global::System.Object>(1506728396, new global::System.Object[]{sources});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.ISentenceGenerator), 1422618689), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenSentenceGeneratorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 1422618689:
                    switch (methodId)
                    {
                        case 1506728396:
                            await ((global::SystemInterfaces.ISentenceGenerator)grain).RegisterTimerAndSetSources((global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource>)arguments[0]);
                            return null;
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 1422618689 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 1422618689;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IStatefulOperator))]
    internal class OrleansCodeGenStatefulOperatorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IStatefulOperator
    {
        protected OrleansCodeGenStatefulOperatorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenStatefulOperatorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenStatefulOperatorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 498177181;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IStatefulOperator";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 498177181 || interfaceId == -66543353;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 498177181:
                    switch (methodId)
                    {
                        case -1183855865:
                            return @"GetOperatorSettings";
                        case -1645967079:
                            return @"LoadSettings";
                        case 1032606503:
                            return @"MarkOperatorAsFailed";
                        case 2061992567:
                            return @"IncrementNumberOfUpStreamOperator";
                        case -1126113540:
                            return @"DecreseNumberOfUpStreamOperator";
                        case 1108646473:
                            return @"Commit";
                        case 2118799424:
                            return @"Recovery";
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case -1221400782:
                            return @"ExecuteMessage";
                        case -2061238574:
                            return @"DetectErrors";
                        case 2075549514:
                            return @"GetStateInReverseLog";
                        case 408823471:
                            return @"GetStateInIncrementalLog";
                        case -1226735009:
                            return @"GetState";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 498177181 + @",methodId=" + methodId);
                    }

                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case -1221400782:
                            return @"ExecuteMessage";
                        case -2061238574:
                            return @"DetectErrors";
                        case 2075549514:
                            return @"GetStateInReverseLog";
                        case 408823471:
                            return @"GetStateInIncrementalLog";
                        case -1226735009:
                            return @"GetState";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.OperatorSettings> GetOperatorSettings()
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.OperatorSettings>(-1183855865, null);
        }

        public global::System.Threading.Tasks.Task LoadSettings(global::SystemInterfaces.Model.OperatorSettings operatorSettings)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1645967079, new global::System.Object[]{operatorSettings});
        }

        public global::System.Threading.Tasks.Task MarkOperatorAsFailed()
        {
            return base.InvokeMethodAsync<global::System.Object>(1032606503, null);
        }

        public global::System.Threading.Tasks.Task IncrementNumberOfUpStreamOperator()
        {
            return base.InvokeMethodAsync<global::System.Object>(2061992567, null);
        }

        public global::System.Threading.Tasks.Task DecreseNumberOfUpStreamOperator()
        {
            return base.InvokeMethodAsync<global::System.Object>(-1126113540, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> Commit(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1108646473, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> Recovery(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(2118799424, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomDownStreamOperators(global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit> units)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-547603550, new global::System.Object[]{units});
        }

        public global::System.Threading.Tasks.Task RemoveCustomDownStreamOperator(global::System.Guid guid)
        {
            return base.InvokeMethodAsync<global::System.Object>(1005660065, new global::System.Object[]{guid});
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.TopologyUnit> GetTopologyUnit()
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.TopologyUnit>(211822306, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ExecuteMessage(global::SystemInterfaces.Model.StreamMessage msg, global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage> stream)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1221400782, new global::System.Object[]{msg, stream});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> DetectErrors()
        {
            return base.InvokeMethodAsync<global::System.Int32>(-2061238574, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInReverseLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(2075549514, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInIncrementalLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(408823471, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetState(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(-1226735009, new global::System.Object[]{word});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IStatefulOperator), 498177181), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenStatefulOperatorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 498177181:
                    switch (methodId)
                    {
                        case -1183855865:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetOperatorSettings();
                        case -1645967079:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).LoadSettings((global::SystemInterfaces.Model.OperatorSettings)arguments[0]);
                            return null;
                        case 1032606503:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).MarkOperatorAsFailed();
                            return null;
                        case 2061992567:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).IncrementNumberOfUpStreamOperator();
                            return null;
                        case -1126113540:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).DecreseNumberOfUpStreamOperator();
                            return null;
                        case 1108646473:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).Commit((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case 2118799424:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).Recovery((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case -547603550:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case 211822306:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetTopologyUnit();
                        case -1221400782:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).ExecuteMessage((global::SystemInterfaces.Model.StreamMessage)arguments[0], (global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[1]);
                        case -2061238574:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).DetectErrors();
                        case 2075549514:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetStateInReverseLog((global::System.String)arguments[0]);
                        case 408823471:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetStateInIncrementalLog((global::System.String)arguments[0]);
                        case -1226735009:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetState((global::System.String)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 498177181 + @",methodId=" + methodId);
                    }

                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IStatefulOperator)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case 211822306:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetTopologyUnit();
                        case -1221400782:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).ExecuteMessage((global::SystemInterfaces.Model.StreamMessage)arguments[0], (global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[1]);
                        case -2061238574:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).DetectErrors();
                        case 2075549514:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetStateInReverseLog((global::System.String)arguments[0]);
                        case 408823471:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetStateInIncrementalLog((global::System.String)arguments[0]);
                        case -1226735009:
                            return await ((global::SystemInterfaces.IStatefulOperator)grain).GetState((global::System.String)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 498177181;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IStatelessOperator))]
    internal class OrleansCodeGenStatelessOperatorReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IStatelessOperator
    {
        protected OrleansCodeGenStatelessOperatorReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenStatelessOperatorReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenStatelessOperatorReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return -1903779801;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IStatelessOperator";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == -1903779801 || interfaceId == -66543353;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case -1903779801:
                    switch (methodId)
                    {
                        case 1333285083:
                            return @"InitRandomOperators";
                        case 1108646473:
                            return @"Commit";
                        case 2118799424:
                            return @"Recovery";
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case -1221400782:
                            return @"ExecuteMessage";
                        case -2061238574:
                            return @"DetectErrors";
                        case 2075549514:
                            return @"GetStateInReverseLog";
                        case 408823471:
                            return @"GetStateInIncrementalLog";
                        case -1226735009:
                            return @"GetState";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1903779801 + @",methodId=" + methodId);
                    }

                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case -1221400782:
                            return @"ExecuteMessage";
                        case -2061238574:
                            return @"DetectErrors";
                        case 2075549514:
                            return @"GetStateInReverseLog";
                        case 408823471:
                            return @"GetStateInIncrementalLog";
                        case -1226735009:
                            return @"GetState";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> InitRandomOperators()
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1333285083, null);
        }

        public global::System.Threading.Tasks.Task Commit(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(1108646473, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task Recovery(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(2118799424, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomDownStreamOperators(global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit> units)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-547603550, new global::System.Object[]{units});
        }

        public global::System.Threading.Tasks.Task RemoveCustomDownStreamOperator(global::System.Guid guid)
        {
            return base.InvokeMethodAsync<global::System.Object>(1005660065, new global::System.Object[]{guid});
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.TopologyUnit> GetTopologyUnit()
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.TopologyUnit>(211822306, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ExecuteMessage(global::SystemInterfaces.Model.StreamMessage msg, global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage> stream)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1221400782, new global::System.Object[]{msg, stream});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> DetectErrors()
        {
            return base.InvokeMethodAsync<global::System.Int32>(-2061238574, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInReverseLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(2075549514, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInIncrementalLog(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(408823471, new global::System.Object[]{word});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetState(global::System.String word)
        {
            return base.InvokeMethodAsync<global::System.Int32>(-1226735009, new global::System.Object[]{word});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IStatelessOperator), -1903779801), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenStatelessOperatorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case -1903779801:
                    switch (methodId)
                    {
                        case 1333285083:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).InitRandomOperators();
                        case 1108646473:
                            await ((global::SystemInterfaces.IStatelessOperator)grain).Commit((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case 2118799424:
                            await ((global::SystemInterfaces.IStatelessOperator)grain).Recovery((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case -547603550:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IStatelessOperator)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case 211822306:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetTopologyUnit();
                        case -1221400782:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).ExecuteMessage((global::SystemInterfaces.Model.StreamMessage)arguments[0], (global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[1]);
                        case -2061238574:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).DetectErrors();
                        case 2075549514:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetStateInReverseLog((global::System.String)arguments[0]);
                        case 408823471:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetStateInIncrementalLog((global::System.String)arguments[0]);
                        case -1226735009:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetState((global::System.String)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1903779801 + @",methodId=" + methodId);
                    }

                case -66543353:
                    switch (methodId)
                    {
                        case -547603550:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IStatelessOperator)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case 211822306:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetTopologyUnit();
                        case -1221400782:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).ExecuteMessage((global::SystemInterfaces.Model.StreamMessage)arguments[0], (global::Orleans.Streams.IAsyncStream<global::SystemInterfaces.Model.StreamMessage>)arguments[1]);
                        case -2061238574:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).DetectErrors();
                        case 2075549514:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetStateInReverseLog((global::System.String)arguments[0]);
                        case 408823471:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetStateInIncrementalLog((global::System.String)arguments[0]);
                        case -1226735009:
                            return await ((global::SystemInterfaces.IStatelessOperator)grain).GetState((global::System.String)arguments[0]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -66543353 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return -1903779801;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.IStreamSource))]
    internal class OrleansCodeGenStreamSourceReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.IStreamSource
    {
        protected OrleansCodeGenStreamSourceReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenStreamSourceReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenStreamSourceReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return 710632260;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.IStreamSource";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == 710632260;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case 710632260:
                    switch (methodId)
                    {
                        case 2143463833:
                            return @"Join";
                        case -1388410912:
                            return @"Message";
                        case -1374740813:
                            return @"GetMembers";
                        case 1145415620:
                            return @"ProduceMessageAsync";
                        case -1400141391:
                            return @"ReplayTheMessageOnRecoveryCompleted";
                        case 1785611867:
                            return @"GetState";
                        case 92092706:
                            return @"GetStateInReverseLog";
                        case -827453145:
                            return @"GetStateInIncrementalLog";
                        case 211822306:
                            return @"GetTopologyUnit";
                        case 1108646473:
                            return @"Commit";
                        case 2118799424:
                            return @"Recovery";
                        case -388420872:
                            return @"AddCustomDownStreamOperator";
                        case -714662718:
                            return @"GetTestGuid";
                        case -547603550:
                            return @"AddCustomDownStreamOperators";
                        case 1005660065:
                            return @"RemoveCustomDownStreamOperator";
                        case -976595730:
                            return @"InitDeaultOperators";
                        case -2061238574:
                            return @"DetectErrors";
                        case 182715061:
                            return @"RegisterTimerForSources";
                        case -257914908:
                            return @"StopSendingMessagesOnRecovery";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 710632260 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task<global::System.Guid> Join(global::System.String nickname)
        {
            return base.InvokeMethodAsync<global::System.Guid>(2143463833, new global::System.Object[]{nickname});
        }

        public global::System.Threading.Tasks.Task<global::System.Boolean> Message(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Boolean>(-1388410912, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.String[]> GetMembers()
        {
            return base.InvokeMethodAsync<global::System.String[]>(-1374740813, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ProduceMessageAsync(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1145415620, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ReplayTheMessageOnRecoveryCompleted()
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1400141391, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetState(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Int32>(1785611867, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInReverseLog(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Int32>(92092706, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetStateInIncrementalLog(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Int32>(-827453145, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.TopologyUnit> GetTopologyUnit()
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.TopologyUnit>(211822306, null);
        }

        public global::System.Threading.Tasks.Task Commit(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(1108646473, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task Recovery(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Object>(2118799424, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task AddCustomDownStreamOperator(global::SystemInterfaces.IStatelessOperator statelessOperator)
        {
            return base.InvokeMethodAsync<global::System.Object>(-388420872, new global::System.Object[]{statelessOperator is global::Orleans.Grain ? statelessOperator.AsReference<global::SystemInterfaces.IStatelessOperator>() : statelessOperator});
        }

        public global::System.Threading.Tasks.Task<global::System.Guid> GetTestGuid()
        {
            return base.InvokeMethodAsync<global::System.Guid>(-714662718, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomDownStreamOperators(global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit> units)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-547603550, new global::System.Object[]{units});
        }

        public global::System.Threading.Tasks.Task RemoveCustomDownStreamOperator(global::System.Guid guid)
        {
            return base.InvokeMethodAsync<global::System.Object>(1005660065, new global::System.Object[]{guid});
        }

        public global::System.Threading.Tasks.Task InitDeaultOperators()
        {
            return base.InvokeMethodAsync<global::System.Object>(-976595730, null);
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> DetectErrors()
        {
            return base.InvokeMethodAsync<global::System.Int32>(-2061238574, null);
        }

        public global::System.Threading.Tasks.Task RegisterTimerForSources()
        {
            return base.InvokeMethodAsync<global::System.Object>(182715061, null);
        }

        public global::System.Threading.Tasks.Task StopSendingMessagesOnRecovery()
        {
            return base.InvokeMethodAsync<global::System.Object>(-257914908, null);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.IStreamSource), 710632260), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenStreamSourceMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case 710632260:
                    switch (methodId)
                    {
                        case 2143463833:
                            return await ((global::SystemInterfaces.IStreamSource)grain).Join((global::System.String)arguments[0]);
                        case -1388410912:
                            return await ((global::SystemInterfaces.IStreamSource)grain).Message((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case -1374740813:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetMembers();
                        case 1145415620:
                            return await ((global::SystemInterfaces.IStreamSource)grain).ProduceMessageAsync((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case -1400141391:
                            return await ((global::SystemInterfaces.IStreamSource)grain).ReplayTheMessageOnRecoveryCompleted();
                        case 1785611867:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetState((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case 92092706:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetStateInReverseLog((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case -827453145:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetStateInIncrementalLog((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case 211822306:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetTopologyUnit();
                        case 1108646473:
                            await ((global::SystemInterfaces.IStreamSource)grain).Commit((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case 2118799424:
                            await ((global::SystemInterfaces.IStreamSource)grain).Recovery((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                            return null;
                        case -388420872:
                            await ((global::SystemInterfaces.IStreamSource)grain).AddCustomDownStreamOperator((global::SystemInterfaces.IStatelessOperator)arguments[0]);
                            return null;
                        case -714662718:
                            return await ((global::SystemInterfaces.IStreamSource)grain).GetTestGuid();
                        case -547603550:
                            return await ((global::SystemInterfaces.IStreamSource)grain).AddCustomDownStreamOperators((global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>)arguments[0]);
                        case 1005660065:
                            await ((global::SystemInterfaces.IStreamSource)grain).RemoveCustomDownStreamOperator((global::System.Guid)arguments[0]);
                            return null;
                        case -976595730:
                            await ((global::SystemInterfaces.IStreamSource)grain).InitDeaultOperators();
                            return null;
                        case -2061238574:
                            return await ((global::SystemInterfaces.IStreamSource)grain).DetectErrors();
                        case 182715061:
                            await ((global::SystemInterfaces.IStreamSource)grain).RegisterTimerForSources();
                            return null;
                        case -257914908:
                            await ((global::SystemInterfaces.IStreamSource)grain).StopSendingMessagesOnRecovery();
                            return null;
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + 710632260 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return 710632260;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof (global::SystemInterfaces.ITopology))]
    internal class OrleansCodeGenTopologyReference : global::Orleans.Runtime.GrainReference, global::SystemInterfaces.ITopology
    {
        protected OrleansCodeGenTopologyReference(global::Orleans.Runtime.GrainReference other): base (other)
        {
        }

        OrleansCodeGenTopologyReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base (other, invokeMethodOptions)
        {
        }

        protected OrleansCodeGenTopologyReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base (info, context)
        {
        }

        public override global::System.Int32 InterfaceId
        {
            get
            {
                return -1231133098;
            }
        }

        public override global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }

        public override global::System.String InterfaceName
        {
            get
            {
                return @"global::SystemInterfaces.ITopology";
            }
        }

        public override global::System.Boolean IsCompatible(global::System.Int32 interfaceId)
        {
            return interfaceId == -1231133098 || interfaceId == -1277021679;
        }

        public override global::System.String GetMethodName(global::System.Int32 interfaceId, global::System.Int32 methodId)
        {
            switch (interfaceId)
            {
                case -1231133098:
                    switch (methodId)
                    {
                        case -1714810393:
                            return @"AddUnit";
                        case -921546169:
                            return @"RemoveUnit";
                        case 1293557932:
                            return @"GetAllUnits";
                        case -1141473739:
                            return @"ConnectUnits";
                        case 837591487:
                            return @"UpdateOperatorSettings";
                        case -1358962994:
                            return @"ReplaceTheOldOperator";
                        case 924243555:
                            return @"GetTopologySize";
                        case -639283078:
                            return @"GetUnit";
                        case 1108646473:
                            return @"Commit";
                        case 2118799424:
                            return @"Recovery";
                        case 892237176:
                            return @"AddASameTypeStatelessOperatorToTopology";
                        case -1458974650:
                            return @"GetRandomSources";
                        case 1188547119:
                            return @"GetRandomStatefulOperators";
                        case -231380958:
                            return @"GetRandomStatelessOperators";
                        case -2090660120:
                            return @"AddCustomeOperatorsToNonSourceOperators";
                        case 450086419:
                            return @"AddCustomeOperatorsToSources";
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1231133098 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Threading.Tasks.Task AddUnit(global::SystemInterfaces.Model.TopologyUnit unit)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1714810393, new global::System.Object[]{unit});
        }

        public global::System.Threading.Tasks.Task RemoveUnit(global::System.Guid key)
        {
            return base.InvokeMethodAsync<global::System.Object>(-921546169, new global::System.Object[]{key});
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>> GetAllUnits()
        {
            return base.InvokeMethodAsync<global::System.Collections.Generic.List<global::SystemInterfaces.Model.TopologyUnit>>(1293557932, null);
        }

        public global::System.Threading.Tasks.Task ConnectUnits(global::System.Guid upperUnitID, global::System.Guid downStreamID)
        {
            return base.InvokeMethodAsync<global::System.Object>(-1141473739, new global::System.Object[]{upperUnitID, downStreamID});
        }

        public global::System.Threading.Tasks.Task UpdateOperatorSettings(global::System.Guid guid, global::SystemInterfaces.Model.OperatorSettings operatorSettings)
        {
            return base.InvokeMethodAsync<global::System.Object>(837591487, new global::System.Object[]{guid, operatorSettings});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> ReplaceTheOldOperator(global::System.Guid oldGuid)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-1358962994, new global::System.Object[]{oldGuid});
        }

        public global::System.Threading.Tasks.Task<global::System.Int32> GetTopologySize()
        {
            return base.InvokeMethodAsync<global::System.Int32>(924243555, null);
        }

        public global::System.Threading.Tasks.Task<global::SystemInterfaces.Model.TopologyUnit> GetUnit(global::System.Guid key)
        {
            return base.InvokeMethodAsync<global::SystemInterfaces.Model.TopologyUnit>(-639283078, new global::System.Object[]{key});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> Commit(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(1108646473, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> Recovery(global::SystemInterfaces.Model.StreamMessage msg)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(2118799424, new global::System.Object[]{msg});
        }

        public global::System.Threading.Tasks.Task AddASameTypeStatelessOperatorToTopology(global::System.Guid guid)
        {
            return base.InvokeMethodAsync<global::System.Object>(892237176, new global::System.Object[]{guid});
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource>> GetRandomSources(global::System.Int32 num)
        {
            return base.InvokeMethodAsync<global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource>>(-1458974650, new global::System.Object[]{num});
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>> GetRandomStatefulOperators(global::System.Int32 num)
        {
            return base.InvokeMethodAsync<global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>>(1188547119, new global::System.Object[]{num});
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>> GetRandomStatelessOperators(global::System.Int32 num)
        {
            return base.InvokeMethodAsync<global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>>(-231380958, new global::System.Object[]{num});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomeOperatorsToNonSourceOperators(global::System.Collections.Generic.List<global::SystemInterfaces.IOperator> ops, global::System.Collections.Generic.List<global::SystemInterfaces.IOperator> operators)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(-2090660120, new global::System.Object[]{ops, operators});
        }

        public global::System.Threading.Tasks.Task<global::System.Threading.Tasks.Task> AddCustomeOperatorsToSources(global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource> sources, global::System.Collections.Generic.List<global::SystemInterfaces.IOperator> operators)
        {
            return base.InvokeMethodAsync<global::System.Threading.Tasks.Task>(450086419, new global::System.Object[]{sources, operators});
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof (global::SystemInterfaces.ITopology), -1231133098), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenTopologyMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<global::System.Object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            global::System.Int32 interfaceId = request.InterfaceId;
            global::System.Int32 methodId = request.MethodId;
            global::System.Object[] arguments = request.Arguments;
            if (grain == null)
                throw new global::System.ArgumentNullException(@"grain");
            switch (interfaceId)
            {
                case -1231133098:
                    switch (methodId)
                    {
                        case -1714810393:
                            await ((global::SystemInterfaces.ITopology)grain).AddUnit((global::SystemInterfaces.Model.TopologyUnit)arguments[0]);
                            return null;
                        case -921546169:
                            await ((global::SystemInterfaces.ITopology)grain).RemoveUnit((global::System.Guid)arguments[0]);
                            return null;
                        case 1293557932:
                            return await ((global::SystemInterfaces.ITopology)grain).GetAllUnits();
                        case -1141473739:
                            await ((global::SystemInterfaces.ITopology)grain).ConnectUnits((global::System.Guid)arguments[0], (global::System.Guid)arguments[1]);
                            return null;
                        case 837591487:
                            await ((global::SystemInterfaces.ITopology)grain).UpdateOperatorSettings((global::System.Guid)arguments[0], (global::SystemInterfaces.Model.OperatorSettings)arguments[1]);
                            return null;
                        case -1358962994:
                            return await ((global::SystemInterfaces.ITopology)grain).ReplaceTheOldOperator((global::System.Guid)arguments[0]);
                        case 924243555:
                            return await ((global::SystemInterfaces.ITopology)grain).GetTopologySize();
                        case -639283078:
                            return await ((global::SystemInterfaces.ITopology)grain).GetUnit((global::System.Guid)arguments[0]);
                        case 1108646473:
                            return await ((global::SystemInterfaces.ITopology)grain).Commit((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case 2118799424:
                            return await ((global::SystemInterfaces.ITopology)grain).Recovery((global::SystemInterfaces.Model.StreamMessage)arguments[0]);
                        case 892237176:
                            await ((global::SystemInterfaces.ITopology)grain).AddASameTypeStatelessOperatorToTopology((global::System.Guid)arguments[0]);
                            return null;
                        case -1458974650:
                            return await ((global::SystemInterfaces.ITopology)grain).GetRandomSources((global::System.Int32)arguments[0]);
                        case 1188547119:
                            return await ((global::SystemInterfaces.ITopology)grain).GetRandomStatefulOperators((global::System.Int32)arguments[0]);
                        case -231380958:
                            return await ((global::SystemInterfaces.ITopology)grain).GetRandomStatelessOperators((global::System.Int32)arguments[0]);
                        case -2090660120:
                            return await ((global::SystemInterfaces.ITopology)grain).AddCustomeOperatorsToNonSourceOperators((global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>)arguments[0], (global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>)arguments[1]);
                        case 450086419:
                            return await ((global::SystemInterfaces.ITopology)grain).AddCustomeOperatorsToSources((global::System.Collections.Generic.List<global::SystemInterfaces.IStreamSource>)arguments[0], (global::System.Collections.Generic.List<global::SystemInterfaces.IOperator>)arguments[1]);
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1231133098 + @",methodId=" + methodId);
                    }

                case -1277021679:
                    switch (methodId)
                    {
                        default:
                            throw new global::System.NotImplementedException(@"interfaceId=" + -1277021679 + @",methodId=" + methodId);
                    }

                default:
                    throw new global::System.NotImplementedException(@"interfaceId=" + interfaceId);
            }
        }

        public global::System.Int32 InterfaceId
        {
            get
            {
                return -1231133098;
            }
        }

        public global::System.UInt16 InterfaceVersion
        {
            get
            {
                return 1;
            }
        }
    }
}

namespace OrleansGeneratedCode38151279
{
    using global::Orleans;
    using global::System.Reflection;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.IncrementalLog))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_IncrementalLogSerializer
    {
        private readonly global::System.Func<global::SystemInterfaces.Model.IncrementalLog, global::SystemInterfaces.Model.LogType> getField2;
        private readonly global::System.Action<global::SystemInterfaces.Model.IncrementalLog, global::SystemInterfaces.Model.LogType> setField2;
        public OrleansCodeGenSystemInterfaces_Model_IncrementalLogSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
            global::System.Reflection.FieldInfo field2 = typeof (global::SystemInterfaces.Model.IncrementalLog).GetField(@"logType", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField2 = (global::System.Func<global::SystemInterfaces.Model.IncrementalLog, global::SystemInterfaces.Model.LogType>)fieldUtils.GetGetter(field2);
            setField2 = (global::System.Action<global::SystemInterfaces.Model.IncrementalLog, global::SystemInterfaces.Model.LogType>)fieldUtils.GetReferenceSetter(field2);
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.IncrementalLog input = ((global::SystemInterfaces.Model.IncrementalLog)original);
            global::SystemInterfaces.Model.IncrementalLog result = (global::SystemInterfaces.Model.IncrementalLog)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.IncrementalLog));
            context.RecordCopy(original, result);
            result.BatchID = input.BatchID;
            result.Log = (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>)context.DeepCopyInner(input.Log);
            setField2(result, getField2(input));
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.IncrementalLog input = (global::SystemInterfaces.Model.IncrementalLog)untypedInput;
            context.SerializeInner(input.BatchID, typeof (global::System.Int32));
            context.SerializeInner(input.Log, typeof (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>));
            context.SerializeInner(getField2(input), typeof (global::SystemInterfaces.Model.LogType));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.IncrementalLog result = (global::SystemInterfaces.Model.IncrementalLog)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.IncrementalLog));
            context.RecordObject(result);
            result.BatchID = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            result.Log = (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>)context.DeserializeInner(typeof (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>));
            setField2(result, (global::SystemInterfaces.Model.LogType)context.DeserializeInner(typeof (global::SystemInterfaces.Model.LogType)));
            return (global::SystemInterfaces.Model.IncrementalLog)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.StreamMessage))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_StreamMessageSerializer
    {
        public OrleansCodeGenSystemInterfaces_Model_StreamMessageSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.StreamMessage input = ((global::SystemInterfaces.Model.StreamMessage)original);
            global::SystemInterfaces.Model.StreamMessage result = (global::SystemInterfaces.Model.StreamMessage)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.StreamMessage));
            context.RecordCopy(original, result);
            result.BatchID = input.BatchID;
            result.Count = input.Count;
            result.Created = (global::System.DateTimeOffset)context.DeepCopyInner(input.Created);
            result.From = (global::System.Guid)context.DeepCopyInner(input.From);
            result.Key = input.Key;
            result.Start_Time = input.Start_Time;
            result.Value = input.Value;
            result.barrierOrCommitInfo = (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)context.DeepCopyInner(input.barrierOrCommitInfo);
            result.messageType = input.messageType;
            result.streamValue = (global::SystemInterfaces.Model.StreamValue)context.DeepCopyInner(input.streamValue);
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.StreamMessage input = (global::SystemInterfaces.Model.StreamMessage)untypedInput;
            context.SerializeInner(input.BatchID, typeof (global::System.Int32));
            context.SerializeInner(input.Count, typeof (global::System.Int32));
            context.SerializeInner(input.Created, typeof (global::System.DateTimeOffset));
            context.SerializeInner(input.From, typeof (global::System.Guid));
            context.SerializeInner(input.Key, typeof (global::System.String));
            context.SerializeInner(input.Start_Time, typeof (global::System.Int32));
            context.SerializeInner(input.Value, typeof (global::System.String));
            context.SerializeInner(input.barrierOrCommitInfo, typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo));
            context.SerializeInner(input.messageType, typeof (global::SystemInterfaces.Model.MessageType));
            context.SerializeInner(input.streamValue, typeof (global::SystemInterfaces.Model.StreamValue));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.StreamMessage result = (global::SystemInterfaces.Model.StreamMessage)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.StreamMessage));
            context.RecordObject(result);
            result.BatchID = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            result.Count = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            result.Created = (global::System.DateTimeOffset)context.DeserializeInner(typeof (global::System.DateTimeOffset));
            result.From = (global::System.Guid)context.DeserializeInner(typeof (global::System.Guid));
            result.Key = (global::System.String)context.DeserializeInner(typeof (global::System.String));
            result.Start_Time = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            result.Value = (global::System.String)context.DeserializeInner(typeof (global::System.String));
            result.barrierOrCommitInfo = (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)context.DeserializeInner(typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo));
            result.messageType = (global::SystemInterfaces.Model.MessageType)context.DeserializeInner(typeof (global::SystemInterfaces.Model.MessageType));
            result.streamValue = (global::SystemInterfaces.Model.StreamValue)context.DeserializeInner(typeof (global::SystemInterfaces.Model.StreamValue));
            return (global::SystemInterfaces.Model.StreamMessage)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.StreamValue))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_StreamValueSerializer
    {
        private readonly global::System.Func<global::SystemInterfaces.Model.StreamValue, global::System.String> getField0;
        private readonly global::System.Action<global::SystemInterfaces.Model.StreamValue, global::System.String> setField0;
        public OrleansCodeGenSystemInterfaces_Model_StreamValueSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
            global::System.Reflection.FieldInfo field0 = typeof (global::SystemInterfaces.Model.StreamValue).GetField(@"innerValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField0 = (global::System.Func<global::SystemInterfaces.Model.StreamValue, global::System.String>)fieldUtils.GetGetter(field0);
            setField0 = (global::System.Action<global::SystemInterfaces.Model.StreamValue, global::System.String>)fieldUtils.GetReferenceSetter(field0);
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.StreamValue input = ((global::SystemInterfaces.Model.StreamValue)original);
            global::SystemInterfaces.Model.StreamValue result = new global::SystemInterfaces.Model.StreamValue();
            context.RecordCopy(original, result);
            setField0(result, getField0(input));
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.StreamValue input = (global::SystemInterfaces.Model.StreamValue)untypedInput;
            context.SerializeInner(getField0(input), typeof (global::System.String));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.StreamValue result = new global::SystemInterfaces.Model.StreamValue();
            context.RecordObject(result);
            setField0(result, (global::System.String)context.DeserializeInner(typeof (global::System.String)));
            return (global::SystemInterfaces.Model.StreamValue)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_BarrierOrCommitMsgTrackingInfoSerializer
    {
        private readonly global::System.Func<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Guid> getField0;
        private readonly global::System.Action<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Guid> setField0;
        private readonly global::System.Func<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Int32> getField3;
        private readonly global::System.Action<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Int32> setField3;
        public OrleansCodeGenSystemInterfaces_Model_BarrierOrCommitMsgTrackingInfoSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
            global::System.Reflection.FieldInfo field0 = typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo).GetField(@"guid", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField0 = (global::System.Func<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Guid>)fieldUtils.GetGetter(field0);
            setField0 = (global::System.Action<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Guid>)fieldUtils.GetReferenceSetter(field0);
            global::System.Reflection.FieldInfo field3 = typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo).GetField(@"numberOfMessagesCompleted", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField3 = (global::System.Func<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Int32>)fieldUtils.GetGetter(field3);
            setField3 = (global::System.Action<global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo, global::System.Int32>)fieldUtils.GetReferenceSetter(field3);
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo input = ((global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)original);
            global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo result = (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo));
            context.RecordCopy(original, result);
            result.BatchID = input.BatchID;
            result.numberOfClientSent = input.numberOfClientSent;
            setField0(result, (global::System.Guid)context.DeepCopyInner(getField0(input)));
            setField3(result, getField3(input));
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo input = (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)untypedInput;
            context.SerializeInner(input.BatchID, typeof (global::System.Int32));
            context.SerializeInner(input.numberOfClientSent, typeof (global::System.Int32));
            context.SerializeInner(getField0(input), typeof (global::System.Guid));
            context.SerializeInner(getField3(input), typeof (global::System.Int32));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo result = (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo));
            context.RecordObject(result);
            result.BatchID = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            result.numberOfClientSent = (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32));
            setField0(result, (global::System.Guid)context.DeserializeInner(typeof (global::System.Guid)));
            setField3(result, (global::System.Int32)context.DeserializeInner(typeof (global::System.Int32)));
            return (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.TopologyUnit))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_TopologyUnitSerializer
    {
        private readonly global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>> getField1;
        private readonly global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>> setField1;
        private readonly global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::SystemInterfaces.Model.OperatorSettings> getField2;
        private readonly global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::SystemInterfaces.Model.OperatorSettings> setField2;
        private readonly global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>> getField0;
        private readonly global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>> setField0;
        public OrleansCodeGenSystemInterfaces_Model_TopologyUnitSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
            global::System.Reflection.FieldInfo field1 = typeof (global::SystemInterfaces.Model.TopologyUnit).GetField(@"downStreamUnits", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField1 = (global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>>)fieldUtils.GetGetter(field1);
            setField1 = (global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>>)fieldUtils.GetReferenceSetter(field1);
            global::System.Reflection.FieldInfo field2 = typeof (global::SystemInterfaces.Model.TopologyUnit).GetField(@"operatorSettings", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField2 = (global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::SystemInterfaces.Model.OperatorSettings>)fieldUtils.GetGetter(field2);
            setField2 = (global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::SystemInterfaces.Model.OperatorSettings>)fieldUtils.GetReferenceSetter(field2);
            global::System.Reflection.FieldInfo field0 = typeof (global::SystemInterfaces.Model.TopologyUnit).GetField(@"upperStreamUnits", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField0 = (global::System.Func<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>>)fieldUtils.GetGetter(field0);
            setField0 = (global::System.Action<global::SystemInterfaces.Model.TopologyUnit, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>>)fieldUtils.GetReferenceSetter(field0);
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.TopologyUnit input = ((global::SystemInterfaces.Model.TopologyUnit)original);
            global::SystemInterfaces.Model.TopologyUnit result = (global::SystemInterfaces.Model.TopologyUnit)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.TopologyUnit));
            context.RecordCopy(original, result);
            result.OperatorType = input.OperatorType;
            result.PrimaryKey = (global::System.Guid)context.DeepCopyInner(input.PrimaryKey);
            setField1(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)context.DeepCopyInner(getField1(input)));
            setField2(result, (global::SystemInterfaces.Model.OperatorSettings)context.DeepCopyInner(getField2(input)));
            setField0(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)context.DeepCopyInner(getField0(input)));
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.TopologyUnit input = (global::SystemInterfaces.Model.TopologyUnit)untypedInput;
            context.SerializeInner(input.OperatorType, typeof (global::SystemInterfaces.Model.OperatorType));
            context.SerializeInner(input.PrimaryKey, typeof (global::System.Guid));
            context.SerializeInner(getField1(input), typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>));
            context.SerializeInner(getField2(input), typeof (global::SystemInterfaces.Model.OperatorSettings));
            context.SerializeInner(getField0(input), typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.TopologyUnit result = (global::SystemInterfaces.Model.TopologyUnit)global::System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof (global::SystemInterfaces.Model.TopologyUnit));
            context.RecordObject(result);
            result.OperatorType = (global::SystemInterfaces.Model.OperatorType)context.DeserializeInner(typeof (global::SystemInterfaces.Model.OperatorType));
            result.PrimaryKey = (global::System.Guid)context.DeserializeInner(typeof (global::System.Guid));
            setField1(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)context.DeserializeInner(typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)));
            setField2(result, (global::SystemInterfaces.Model.OperatorSettings)context.DeserializeInner(typeof (global::SystemInterfaces.Model.OperatorSettings)));
            setField0(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)context.DeserializeInner(typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.TopologyUnit>)));
            return (global::SystemInterfaces.Model.TopologyUnit)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof (global::SystemInterfaces.Model.OperatorSettings))]
    internal sealed class OrleansCodeGenSystemInterfaces_Model_OperatorSettingsSerializer
    {
        private readonly global::System.Func<global::SystemInterfaces.Model.OperatorSettings, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>> getField2;
        private readonly global::System.Action<global::SystemInterfaces.Model.OperatorSettings, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>> setField2;
        public OrleansCodeGenSystemInterfaces_Model_OperatorSettingsSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
            global::System.Reflection.FieldInfo field2 = typeof (global::SystemInterfaces.Model.OperatorSettings).GetField(@"operatorDict", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
            getField2 = (global::System.Func<global::SystemInterfaces.Model.OperatorSettings, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>>)fieldUtils.GetGetter(field2);
            setField2 = (global::System.Action<global::SystemInterfaces.Model.OperatorSettings, global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>>)fieldUtils.GetReferenceSetter(field2);
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public global::System.Object DeepCopier(global::System.Object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::SystemInterfaces.Model.OperatorSettings input = ((global::SystemInterfaces.Model.OperatorSettings)original);
            global::SystemInterfaces.Model.OperatorSettings result = new global::SystemInterfaces.Model.OperatorSettings();
            context.RecordCopy(original, result);
            result.incrementalLogAddress = input.incrementalLogAddress;
            result.operatorType = input.operatorType;
            setField2(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>)context.DeepCopyInner(getField2(input)));
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(global::System.Object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::SystemInterfaces.Model.OperatorSettings input = (global::SystemInterfaces.Model.OperatorSettings)untypedInput;
            context.SerializeInner(input.incrementalLogAddress, typeof (global::System.String));
            context.SerializeInner(input.operatorType, typeof (global::SystemInterfaces.Model.OperatorType));
            context.SerializeInner(getField2(input), typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public global::System.Object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::SystemInterfaces.Model.OperatorSettings result = new global::SystemInterfaces.Model.OperatorSettings();
            context.RecordObject(result);
            result.incrementalLogAddress = (global::System.String)context.DeserializeInner(typeof (global::System.String));
            result.operatorType = (global::SystemInterfaces.Model.OperatorType)context.DeserializeInner(typeof (global::SystemInterfaces.Model.OperatorType));
            setField2(result, (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>)context.DeserializeInner(typeof (global::System.Collections.Generic.Dictionary<global::System.Guid, global::SystemInterfaces.Model.OperatorSettings>)));
            return (global::SystemInterfaces.Model.OperatorSettings)result;
        }
    }
}

namespace OrleansGeneratedCode
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(@"Orleans-CodeGenerator", @"2.0.0.0")]
    internal sealed class OrleansCodeGenff43076c6aFeaturePopulator : global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainInterfaceFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainClassFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Serialization.SerializerFeature>
    {
        public void Populate(global::Orleans.Metadata.GrainInterfaceFeature feature)
        {
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IBatchCoordinator), typeof (SystemInterfaces.OrleansCodeGenBatchCoordinatorReference), typeof (SystemInterfaces.OrleansCodeGenBatchCoordinatorMethodInvoker), 2046360863));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IBatchTracker), typeof (SystemInterfaces.OrleansCodeGenBatchTrackerReference), typeof (SystemInterfaces.OrleansCodeGenBatchTrackerMethodInvoker), 998595849));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IErrorDetector), typeof (SystemInterfaces.OrleansCodeGenErrorDetectorReference), typeof (SystemInterfaces.OrleansCodeGenErrorDetectorMethodInvoker), 1654829170));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IOperator), typeof (SystemInterfaces.OrleansCodeGenOperatorReference), typeof (SystemInterfaces.OrleansCodeGenOperatorMethodInvoker), -66543353));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.ISentenceGenerator), typeof (SystemInterfaces.OrleansCodeGenSentenceGeneratorReference), typeof (SystemInterfaces.OrleansCodeGenSentenceGeneratorMethodInvoker), 1422618689));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IStatefulOperator), typeof (SystemInterfaces.OrleansCodeGenStatefulOperatorReference), typeof (SystemInterfaces.OrleansCodeGenStatefulOperatorMethodInvoker), 498177181));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IStatelessOperator), typeof (SystemInterfaces.OrleansCodeGenStatelessOperatorReference), typeof (SystemInterfaces.OrleansCodeGenStatelessOperatorMethodInvoker), -1903779801));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.IStreamSource), typeof (SystemInterfaces.OrleansCodeGenStreamSourceReference), typeof (SystemInterfaces.OrleansCodeGenStreamSourceMethodInvoker), 710632260));
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof (global::SystemInterfaces.ITopology), typeof (SystemInterfaces.OrleansCodeGenTopologyReference), typeof (SystemInterfaces.OrleansCodeGenTopologyMethodInvoker), -1231133098));
        }

        public void Populate(global::Orleans.Metadata.GrainClassFeature feature)
        {
        }

        public void Populate(global::Orleans.Serialization.SerializerFeature feature)
        {
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.IncrementalLog), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_IncrementalLogSerializer));
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.StreamMessage), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_StreamMessageSerializer));
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.StreamValue), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_StreamValueSerializer));
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_BarrierOrCommitMsgTrackingInfoSerializer));
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.TopologyUnit), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_TopologyUnitSerializer));
            feature.AddSerializerType(typeof (global::SystemInterfaces.Model.OperatorSettings), typeof (OrleansGeneratedCode38151279.OrleansCodeGenSystemInterfaces_Model_OperatorSettingsSerializer));
            feature.AddKnownType(@"EmptyArray`1", @"EmptyArray`1'1");
            feature.AddKnownType(@"FXAssembly", @"FXAssembly");
            feature.AddKnownType(@"ThisAssembly", @"ThisAssembly");
            feature.AddKnownType(@"AssemblyRef", @"AssemblyRef");
            feature.AddKnownType(@"Microsoft.Win32.IAssemblyEnum", @"Microsoft.Win32.IAssemblyEnum");
            feature.AddKnownType(@"Microsoft.Win32.IApplicationContext", @"Microsoft.Win32.IApplicationContext");
            feature.AddKnownType(@"Microsoft.Win32.IAssemblyName", @"Microsoft.Win32.IAssemblyName");
            feature.AddKnownType(@"Microsoft.Win32.ASM_CACHE", @"Microsoft.Win32.ASM_CACHE");
            feature.AddKnownType(@"Microsoft.Win32.CANOF", @"Microsoft.Win32.CANOF");
            feature.AddKnownType(@"Microsoft.Win32.ASM_NAME", @"Microsoft.Win32.ASM_NAME");
            feature.AddKnownType(@"Microsoft.Win32.Fusion", @"Microsoft.Win32.Fusion");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native", @"Microsoft.Win32.Win32Native");
            feature.AddKnownType(@"Microsoft.Win32.OAVariantLib", @"Microsoft.Win32.OAVariantLib");
            feature.AddKnownType(@"Microsoft.Win32.Registry", @"Microsoft.Win32.Registry");
            feature.AddKnownType(@"Microsoft.Win32.RegistryHive", @"Microsoft.Win32.RegistryHive");
            feature.AddKnownType(@"System.Enum", @"Enum");
            feature.AddKnownType(@"System.ValueType", @"ValueType");
            feature.AddKnownType(@"System.IComparable", @"IComparable");
            feature.AddKnownType(@"System.IFormattable", @"IFormattable");
            feature.AddKnownType(@"System.IConvertible", @"IConvertible");
            feature.AddKnownType(@"Microsoft.Win32.RegistryKey", @"Microsoft.Win32.RegistryKey");
            feature.AddKnownType(@"System.MarshalByRefObject", @"MarshalByRefObject");
            feature.AddKnownType(@"System.IDisposable", @"IDisposable");
            feature.AddKnownType(@"Microsoft.Win32.RegistryValueOptions", @"Microsoft.Win32.RegistryValueOptions");
            feature.AddKnownType(@"Microsoft.Win32.RegistryKeyPermissionCheck", @"Microsoft.Win32.RegistryKeyPermissionCheck");
            feature.AddKnownType(@"Microsoft.Win32.RegistryOptions", @"Microsoft.Win32.RegistryOptions");
            feature.AddKnownType(@"Microsoft.Win32.RegistryValueKind", @"Microsoft.Win32.RegistryValueKind");
            feature.AddKnownType(@"Microsoft.Win32.RegistryView", @"Microsoft.Win32.RegistryView");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods", @"Microsoft.Win32.UnsafeNativeMethods");
            feature.AddKnownType(@"Microsoft.Win32.SafeLibraryHandle", @"Microsoft.Win32.SafeLibraryHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid", @"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeHandle", @"SafeHandle");
            feature.AddKnownType(@"System.Runtime.ConstrainedExecution.CriticalFinalizerObject", @"CriticalFinalizerObject");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeFileHandle", @"Microsoft.Win32.SafeHandles.SafeFileHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeFileMappingHandle", @"Microsoft.Win32.SafeHandles.SafeFileMappingHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeFindHandle", @"Microsoft.Win32.SafeHandles.SafeFindHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeLocalAllocHandle", @"Microsoft.Win32.SafeHandles.SafeLocalAllocHandle");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeBuffer", @"SafeBuffer");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafePEFileHandle", @"Microsoft.Win32.SafeHandles.SafePEFileHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeRegistryHandle", @"Microsoft.Win32.SafeHandles.SafeRegistryHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeViewOfFileHandle", @"Microsoft.Win32.SafeHandles.SafeViewOfFileHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeWaitHandle", @"Microsoft.Win32.SafeHandles.SafeWaitHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid", @"Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid", @"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType(@"System.Runtime.InteropServices.CriticalHandle", @"CriticalHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid", @"Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle", @"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle", @"Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle", @"Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle", @"Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle", @"Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeProcessHandle", @"Microsoft.Win32.SafeHandles.SafeProcessHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeThreadHandle", @"Microsoft.Win32.SafeHandles.SafeThreadHandle");
            feature.AddKnownType(@"Microsoft.Runtime.Hosting.StrongNameHelpers", @"Microsoft.Runtime.Hosting.StrongNameHelpers");
            feature.AddKnownType(@"Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr", @"Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr");
            feature.AddKnownType(@"Microsoft.Runtime.Hosting.IClrStrongName", @"Microsoft.Runtime.Hosting.IClrStrongName");
            feature.AddKnownType(@"Microsoft.Reflection.ReflectionExtensions", @"Microsoft.Reflection.ReflectionExtensions");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics", @"Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs", @"Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs", @"Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.RuntimeClass", @"RuntimeClass");
            feature.AddKnownType(@"System.__ComObject", @"__ComObject");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.CausalityRelation", @"Windows.Foundation.Diagnostics.CausalityRelation");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.CausalitySource", @"Windows.Foundation.Diagnostics.CausalitySource");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.CausalitySynchronousWork", @"Windows.Foundation.Diagnostics.CausalitySynchronousWork");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.CausalityTraceLevel", @"Windows.Foundation.Diagnostics.CausalityTraceLevel");
            feature.AddKnownType(@"Windows.Foundation.Diagnostics.AsyncCausalityStatus", @"Windows.Foundation.Diagnostics.AsyncCausalityStatus");
            feature.AddKnownType(@"System.AggregateException", @"AggregateException");
            feature.AddKnownType(@"System.Exception", @"Exception");
            feature.AddKnownType(@"System.Runtime.Serialization.ISerializable", @"ISerializable");
            feature.AddKnownType(@"System.Runtime.InteropServices._Exception", @"_Exception");
            feature.AddKnownType(@"System.AppContext", @"AppContext");
            feature.AddKnownType(@"System.AppContextDefaultValues", @"AppContextDefaultValues");
            feature.AddKnownType(@"System.AppContextSwitches", @"AppContextSwitches");
            feature.AddKnownType(@"System.__Canon", @"__Canon");
            feature.AddKnownType(@"System.ICloneable", @"ICloneable");
            feature.AddKnownType(@"System.Action`1", @"Action`1'1");
            feature.AddKnownType(@"System.MulticastDelegate", @"MulticastDelegate");
            feature.AddKnownType(@"System.Delegate", @"Delegate");
            feature.AddKnownType(@"System.Action", @"Action");
            feature.AddKnownType(@"System.Action`2", @"Action`2'2");
            feature.AddKnownType(@"System.Action`3", @"Action`3'3");
            feature.AddKnownType(@"System.Action`4", @"Action`4'4");
            feature.AddKnownType(@"System.Func`1", @"Func`1'1");
            feature.AddKnownType(@"System.Func`2", @"Func`2'2");
            feature.AddKnownType(@"System.Func`3", @"Func`3'3");
            feature.AddKnownType(@"System.Func`4", @"Func`4'4");
            feature.AddKnownType(@"System.Func`5", @"Func`5'5");
            feature.AddKnownType(@"System.Action`5", @"Action`5'5");
            feature.AddKnownType(@"System.Action`6", @"Action`6'6");
            feature.AddKnownType(@"System.Action`7", @"Action`7'7");
            feature.AddKnownType(@"System.Action`8", @"Action`8'8");
            feature.AddKnownType(@"System.Func`6", @"Func`6'6");
            feature.AddKnownType(@"System.Func`7", @"Func`7'7");
            feature.AddKnownType(@"System.Func`8", @"Func`8'8");
            feature.AddKnownType(@"System.Func`9", @"Func`9'9");
            feature.AddKnownType(@"System.Comparison`1", @"Comparison`1'1");
            feature.AddKnownType(@"System.Converter`2", @"Converter`2'2");
            feature.AddKnownType(@"System.Predicate`1", @"Predicate`1'1");
            feature.AddKnownType(@"System.Array", @"Array");
            feature.AddKnownType(@"System.Collections.IList", @"IList");
            feature.AddKnownType(@"System.Collections.ICollection", @"ICollection");
            feature.AddKnownType(@"System.Collections.IEnumerable", @"IEnumerable");
            feature.AddKnownType(@"System.Collections.IStructuralComparable", @"IStructuralComparable");
            feature.AddKnownType(@"System.Collections.IStructuralEquatable", @"IStructuralEquatable");
            feature.AddKnownType(@"System.SZArrayHelper", @"SZArrayHelper");
            feature.AddKnownType(@"System.ArraySegment`1", @"ArraySegment`1'1");
            feature.AddKnownType(@"System.IComparable`1", @"IComparable`1'1");
            feature.AddKnownType(@"System.IEquatable`1", @"IEquatable`1'1");
            feature.AddKnownType(@"System.ThrowHelper", @"ThrowHelper");
            feature.AddKnownType(@"System.ExceptionArgument", @"ExceptionArgument");
            feature.AddKnownType(@"System.ExceptionResource", @"ExceptionResource");
            feature.AddKnownType(@"System.ITupleInternal", @"ITupleInternal");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ITuple", @"ITuple");
            feature.AddKnownType(@"System.Tuple", @"Tuple");
            feature.AddKnownType(@"System.IValueTupleInternal", @"IValueTupleInternal");
            feature.AddKnownType(@"System.ValueTuple", @"ValueTuple");
            feature.AddKnownType(@"System.ValueTuple`1", @"ValueTuple`1'1");
            feature.AddKnownType(@"System.ValueTuple`2", @"ValueTuple`2'2");
            feature.AddKnownType(@"System.ValueTuple`3", @"ValueTuple`3'3");
            feature.AddKnownType(@"System.ValueTuple`4", @"ValueTuple`4'4");
            feature.AddKnownType(@"System.ValueTuple`5", @"ValueTuple`5'5");
            feature.AddKnownType(@"System.ValueTuple`6", @"ValueTuple`6'6");
            feature.AddKnownType(@"System.ValueTuple`7", @"ValueTuple`7'7");
            feature.AddKnownType(@"System.ValueTuple`8", @"ValueTuple`8'8");
            feature.AddKnownType(@"System.TupleExtensions", @"TupleExtensions");
            feature.AddKnownType(@"System.StringSplitOptions", @"StringSplitOptions");
            feature.AddKnownType(@"System.StringComparer", @"StringComparer");
            feature.AddKnownType(@"System.Collections.IComparer", @"IComparer");
            feature.AddKnownType(@"System.Collections.IEqualityComparer", @"IEqualityComparer");
            feature.AddKnownType(@"System.Collections.Generic.IComparer`1", @"IComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.IEqualityComparer`1", @"IEqualityComparer`1'1");
            feature.AddKnownType(@"System.CultureAwareComparer", @"CultureAwareComparer");
            feature.AddKnownType(@"System.IWellKnownStringEqualityComparer", @"IWellKnownStringEqualityComparer");
            feature.AddKnownType(@"System.CultureAwareRandomizedComparer", @"CultureAwareRandomizedComparer");
            feature.AddKnownType(@"System.OrdinalComparer", @"OrdinalComparer");
            feature.AddKnownType(@"System.OrdinalRandomizedComparer", @"OrdinalRandomizedComparer");
            feature.AddKnownType(@"System.StringComparison", @"StringComparison");
            feature.AddKnownType(@"System.DateTimeKind", @"DateTimeKind");
            feature.AddKnownType(@"System.Runtime.Serialization.IDeserializationCallback", @"IDeserializationCallback");
            feature.AddKnownType(@"System.SystemException", @"SystemException");
            feature.AddKnownType(@"System.OutOfMemoryException", @"OutOfMemoryException");
            feature.AddKnownType(@"System.StackOverflowException", @"StackOverflowException");
            feature.AddKnownType(@"System.DataMisalignedException", @"DataMisalignedException");
            feature.AddKnownType(@"System.ExecutionEngineException", @"ExecutionEngineException");
            feature.AddKnownType(@"System.DelegateBindingFlags", @"DelegateBindingFlags");
            feature.AddKnownType(@"System.__Filters", @"__Filters");
            feature.AddKnownType(@"System.__HResults", @"__HResults");
            feature.AddKnownType(@"System.LogLevel", @"LogLevel");
            feature.AddKnownType(@"System.SwitchStructure", @"SwitchStructure");
            feature.AddKnownType(@"System.BCLDebug", @"BCLDebug");
            feature.AddKnownType(@"System.MemberAccessException", @"MemberAccessException");
            feature.AddKnownType(@"System.Activator", @"Activator");
            feature.AddKnownType(@"System.Runtime.InteropServices._Activator", @"_Activator");
            feature.AddKnownType(@"System.AccessViolationException", @"AccessViolationException");
            feature.AddKnownType(@"System.ApplicationException", @"ApplicationException");
            feature.AddKnownType(@"System.ResolveEventArgs", @"ResolveEventArgs");
            feature.AddKnownType(@"System.EventArgs", @"EventArgs");
            feature.AddKnownType(@"System.AssemblyLoadEventArgs", @"AssemblyLoadEventArgs");
            feature.AddKnownType(@"System.ResolveEventHandler", @"ResolveEventHandler");
            feature.AddKnownType(@"System.AssemblyLoadEventHandler", @"AssemblyLoadEventHandler");
            feature.AddKnownType(@"System.AppDomainInitializer", @"AppDomainInitializer");
            feature.AddKnownType(@"System.AppDomainInitializerInfo", @"AppDomainInitializerInfo");
            feature.AddKnownType(@"System.AppDomain", @"AppDomain");
            feature.AddKnownType(@"System._AppDomain", @"_AppDomain");
            feature.AddKnownType(@"System.Security.IEvidenceFactory", @"IEvidenceFactory");
            feature.AddKnownType(@"System.CrossAppDomainDelegate", @"CrossAppDomainDelegate");
            feature.AddKnownType(@"System.AppDomainHandle", @"AppDomainHandle");
            feature.AddKnownType(@"System.AppDomainManagerInitializationOptions", @"AppDomainManagerInitializationOptions");
            feature.AddKnownType(@"System.AppDomainManager", @"AppDomainManager");
            feature.AddKnownType(@"System.AppDomainPauseManager", @"AppDomainPauseManager");
            feature.AddKnownType(@"System.AppDomainSetup", @"AppDomainSetup");
            feature.AddKnownType(@"System.IAppDomainSetup", @"IAppDomainSetup");
            feature.AddKnownType(@"System.LoaderOptimization", @"LoaderOptimization");
            feature.AddKnownType(@"System.LoaderOptimizationAttribute", @"LoaderOptimizationAttribute");
            feature.AddKnownType(@"System.Attribute", @"Attribute");
            feature.AddKnownType(@"System.Runtime.InteropServices._Attribute", @"_Attribute");
            feature.AddKnownType(@"System.AppDomainUnloadedException", @"AppDomainUnloadedException");
            feature.AddKnownType(@"System.ActivationContext", @"ActivationContext");
            feature.AddKnownType(@"System.ApplicationIdentity", @"ApplicationIdentity");
            feature.AddKnownType(@"System.ApplicationId", @"ApplicationId");
            feature.AddKnownType(@"System.ArgumentException", @"ArgumentException");
            feature.AddKnownType(@"System.ArgumentNullException", @"ArgumentNullException");
            feature.AddKnownType(@"System.ArgumentOutOfRangeException", @"ArgumentOutOfRangeException");
            feature.AddKnownType(@"System.ArgIterator", @"ArgIterator");
            feature.AddKnownType(@"System.ArithmeticException", @"ArithmeticException");
            feature.AddKnownType(@"System.ArrayTypeMismatchException", @"ArrayTypeMismatchException");
            feature.AddKnownType(@"System.AsyncCallback", @"AsyncCallback");
            feature.AddKnownType(@"System.AttributeTargets", @"AttributeTargets");
            feature.AddKnownType(@"System.AttributeUsageAttribute", @"AttributeUsageAttribute");
            feature.AddKnownType(@"System.BadImageFormatException", @"BadImageFormatException");
            feature.AddKnownType(@"System.BitConverter", @"BitConverter");
            feature.AddKnownType(@"System.Buffer", @"Buffer");
            feature.AddKnownType(@"System.CannotUnloadAppDomainException", @"CannotUnloadAppDomainException");
            feature.AddKnownType(@"System.CharEnumerator", @"CharEnumerator");
            feature.AddKnownType(@"System.Collections.IEnumerator", @"IEnumerator");
            feature.AddKnownType(@"System.Collections.Generic.IEnumerator`1", @"IEnumerator`1'1");
            feature.AddKnownType(@"System.ConfigEvents", @"ConfigEvents");
            feature.AddKnownType(@"System.ConfigNodeType", @"ConfigNodeType");
            feature.AddKnownType(@"System.ConfigNodeSubType", @"ConfigNodeSubType");
            feature.AddKnownType(@"System.BaseConfigHandler", @"BaseConfigHandler");
            feature.AddKnownType(@"System.ConfigTreeParser", @"ConfigTreeParser");
            feature.AddKnownType(@"System.ConfigNode", @"ConfigNode");
            feature.AddKnownType(@"System.CLSCompliantAttribute", @"CLSCompliantAttribute");
            feature.AddKnownType(@"System.TypeUnloadedException", @"TypeUnloadedException");
            feature.AddKnownType(@"System.CompatibilitySwitches", @"CompatibilitySwitches");
            feature.AddKnownType(@"System.Console", @"Console");
            feature.AddKnownType(@"System.ConsoleCancelEventHandler", @"ConsoleCancelEventHandler");
            feature.AddKnownType(@"System.ConsoleCancelEventArgs", @"ConsoleCancelEventArgs");
            feature.AddKnownType(@"System.ConsoleColor", @"ConsoleColor");
            feature.AddKnownType(@"System.ConsoleKey", @"ConsoleKey");
            feature.AddKnownType(@"System.ConsoleKeyInfo", @"ConsoleKeyInfo");
            feature.AddKnownType(@"System.ConsoleModifiers", @"ConsoleModifiers");
            feature.AddKnownType(@"System.ConsoleSpecialKey", @"ConsoleSpecialKey");
            feature.AddKnownType(@"System.ContextMarshalException", @"ContextMarshalException");
            feature.AddKnownType(@"System.Base64FormattingOptions", @"Base64FormattingOptions");
            feature.AddKnownType(@"System.Convert", @"Convert");
            feature.AddKnownType(@"System.ContextBoundObject", @"ContextBoundObject");
            feature.AddKnownType(@"System.ContextStaticAttribute", @"ContextStaticAttribute");
            feature.AddKnownType(@"System.Currency", @"Currency");
            feature.AddKnownType(@"System.CurrentSystemTimeZone", @"CurrentSystemTimeZone");
            feature.AddKnownType(@"System.TimeZone", @"TimeZone");
            feature.AddKnownType(@"System.DayOfWeek", @"DayOfWeek");
            feature.AddKnownType(@"System.DBNull", @"DBNull");
            feature.AddKnownType(@"System.DefaultBinder", @"DefaultBinder");
            feature.AddKnownType(@"System.Reflection.Binder", @"Binder");
            feature.AddKnownType(@"System.DelegateSerializationHolder", @"DelegateSerializationHolder");
            feature.AddKnownType(@"System.Runtime.Serialization.IObjectReference", @"IObjectReference");
            feature.AddKnownType(@"System.DivideByZeroException", @"DivideByZeroException");
            feature.AddKnownType(@"System.DuplicateWaitObjectException", @"DuplicateWaitObjectException");
            feature.AddKnownType(@"System.Empty", @"Empty");
            feature.AddKnownType(@"System.EntryPointNotFoundException", @"EntryPointNotFoundException");
            feature.AddKnownType(@"System.TypeLoadException", @"TypeLoadException");
            feature.AddKnownType(@"System.DllNotFoundException", @"DllNotFoundException");
            feature.AddKnownType(@"System.EnvironmentVariableTarget", @"EnvironmentVariableTarget");
            feature.AddKnownType(@"System.Environment", @"Environment");
            feature.AddKnownType(@"System.EventHandler", @"EventHandler");
            feature.AddKnownType(@"System.EventHandler`1", @"EventHandler`1'1");
            feature.AddKnownType(@"System.FieldAccessException", @"FieldAccessException");
            feature.AddKnownType(@"System.FlagsAttribute", @"FlagsAttribute");
            feature.AddKnownType(@"System.FormatException", @"FormatException");
            feature.AddKnownType(@"System.FormattableString", @"FormattableString");
            feature.AddKnownType(@"System.GCCollectionMode", @"GCCollectionMode");
            feature.AddKnownType(@"System.InternalGCCollectionMode", @"InternalGCCollectionMode");
            feature.AddKnownType(@"System.GCNotificationStatus", @"GCNotificationStatus");
            feature.AddKnownType(@"System.GC", @"GC");
            feature.AddKnownType(@"System.SizedReference", @"SizedReference");
            feature.AddKnownType(@"System.IAsyncResult", @"IAsyncResult");
            feature.AddKnownType(@"System.ICustomFormatter", @"ICustomFormatter");
            feature.AddKnownType(@"System.IFormatProvider", @"IFormatProvider");
            feature.AddKnownType(@"System.IndexOutOfRangeException", @"IndexOutOfRangeException");
            feature.AddKnownType(@"System.IObservable`1", @"IObservable`1'1");
            feature.AddKnownType(@"System.IObserver`1", @"IObserver`1'1");
            feature.AddKnownType(@"System.IProgress`1", @"IProgress`1'1");
            feature.AddKnownType(@"System.InsufficientMemoryException", @"InsufficientMemoryException");
            feature.AddKnownType(@"System.InsufficientExecutionStackException", @"InsufficientExecutionStackException");
            feature.AddKnownType(@"System.LazyHelpers", @"LazyHelpers");
            feature.AddKnownType(@"System.Lazy`1", @"Lazy`1'1");
            feature.AddKnownType(@"System.System_LazyDebugView`1", @"System_LazyDebugView`1'1");
            feature.AddKnownType(@"System.IntPtr", @"IntPtr");
            feature.AddKnownType(@"System.Internal", @"Internal");
            feature.AddKnownType(@"System.InvalidCastException", @"InvalidCastException");
            feature.AddKnownType(@"System.InvalidOperationException", @"InvalidOperationException");
            feature.AddKnownType(@"System.InvalidProgramException", @"InvalidProgramException");
            feature.AddKnownType(@"System.InvalidTimeZoneException", @"InvalidTimeZoneException");
            feature.AddKnownType(@"System.IServiceProvider", @"IServiceProvider");
            feature.AddKnownType(@"System.LocalDataStoreHolder", @"LocalDataStoreHolder");
            feature.AddKnownType(@"System.LocalDataStoreElement", @"LocalDataStoreElement");
            feature.AddKnownType(@"System.LocalDataStore", @"LocalDataStore");
            feature.AddKnownType(@"System.LocalDataStoreSlot", @"LocalDataStoreSlot");
            feature.AddKnownType(@"System.LocalDataStoreMgr", @"LocalDataStoreMgr");
            feature.AddKnownType(@"System.Math", @"Math");
            feature.AddKnownType(@"System.Mda", @"Mda");
            feature.AddKnownType(@"System.MethodAccessException", @"MethodAccessException");
            feature.AddKnownType(@"System.MidpointRounding", @"MidpointRounding");
            feature.AddKnownType(@"System.MissingFieldException", @"MissingFieldException");
            feature.AddKnownType(@"System.MissingMemberException", @"MissingMemberException");
            feature.AddKnownType(@"System.MissingMethodException", @"MissingMethodException");
            feature.AddKnownType(@"System.MulticastNotSupportedException", @"MulticastNotSupportedException");
            feature.AddKnownType(@"System.NonSerializedAttribute", @"NonSerializedAttribute");
            feature.AddKnownType(@"System.NotFiniteNumberException", @"NotFiniteNumberException");
            feature.AddKnownType(@"System.NotImplementedException", @"NotImplementedException");
            feature.AddKnownType(@"System.NotSupportedException", @"NotSupportedException");
            feature.AddKnownType(@"System.NullReferenceException", @"NullReferenceException");
            feature.AddKnownType(@"System.Number", @"Number");
            feature.AddKnownType(@"System.ObjectDisposedException", @"ObjectDisposedException");
            feature.AddKnownType(@"System.ObsoleteAttribute", @"ObsoleteAttribute");
            feature.AddKnownType(@"System.OleAutBinder", @"OleAutBinder");
            feature.AddKnownType(@"System.OperatingSystem", @"OperatingSystem");
            feature.AddKnownType(@"System.OperationCanceledException", @"OperationCanceledException");
            feature.AddKnownType(@"System.OverflowException", @"OverflowException");
            feature.AddKnownType(@"System.ParamArrayAttribute", @"ParamArrayAttribute");
            feature.AddKnownType(@"System.ParamsArray", @"ParamsArray");
            feature.AddKnownType(@"System.ParseNumbers", @"ParseNumbers");
            feature.AddKnownType(@"System.PlatformID", @"PlatformID");
            feature.AddKnownType(@"System.PlatformNotSupportedException", @"PlatformNotSupportedException");
            feature.AddKnownType(@"System.Progress`1", @"Progress`1'1");
            feature.AddKnownType(@"System.ProgressStatics", @"ProgressStatics");
            feature.AddKnownType(@"System.Random", @"Random");
            feature.AddKnownType(@"System.RankException", @"RankException");
            feature.AddKnownType(@"System.ResId", @"ResId");
            feature.AddKnownType(@"System.CtorDelegate", @"CtorDelegate");
            feature.AddKnownType(@"System.TypeNameFormatFlags", @"TypeNameFormatFlags");
            feature.AddKnownType(@"System.TypeNameKind", @"TypeNameKind");
            feature.AddKnownType(@"System.RuntimeType", @"RuntimeType");
            feature.AddKnownType(@"System.Reflection.TypeInfo", @"TypeInfo");
            feature.AddKnownType(@"System.Type", @"Type");
            feature.AddKnownType(@"System.Reflection.MemberInfo", @"MemberInfo");
            feature.AddKnownType(@"System.Reflection.ICustomAttributeProvider", @"ICustomAttributeProvider");
            feature.AddKnownType(@"System.Runtime.InteropServices._MemberInfo", @"_MemberInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._Type", @"_Type");
            feature.AddKnownType(@"System.Reflection.IReflect", @"IReflect");
            feature.AddKnownType(@"System.Reflection.IReflectableType", @"IReflectableType");
            feature.AddKnownType(@"System.ReflectionOnlyType", @"ReflectionOnlyType");
            feature.AddKnownType(@"System.Utf8String", @"Utf8String");
            feature.AddKnownType(@"System.RuntimeArgumentHandle", @"RuntimeArgumentHandle");
            feature.AddKnownType(@"System.RuntimeTypeHandle", @"RuntimeTypeHandle");
            feature.AddKnownType(@"System.RuntimeMethodHandleInternal", @"RuntimeMethodHandleInternal");
            feature.AddKnownType(@"System.RuntimeMethodInfoStub", @"RuntimeMethodInfoStub");
            feature.AddKnownType(@"System.IRuntimeMethodInfo", @"IRuntimeMethodInfo");
            feature.AddKnownType(@"System.RuntimeMethodHandle", @"RuntimeMethodHandle");
            feature.AddKnownType(@"System.RuntimeFieldHandleInternal", @"RuntimeFieldHandleInternal");
            feature.AddKnownType(@"System.IRuntimeFieldInfo", @"IRuntimeFieldInfo");
            feature.AddKnownType(@"System.RuntimeFieldInfoStub", @"RuntimeFieldInfoStub");
            feature.AddKnownType(@"System.RuntimeFieldHandle", @"RuntimeFieldHandle");
            feature.AddKnownType(@"System.ModuleHandle", @"ModuleHandle");
            feature.AddKnownType(@"System.Signature", @"Signature");
            feature.AddKnownType(@"System.Resolver", @"Resolver");
            feature.AddKnownType(@"System.SerializableAttribute", @"SerializableAttribute");
            feature.AddKnownType(@"System.SharedStatics", @"SharedStatics");
            feature.AddKnownType(@"System.STAThreadAttribute", @"STAThreadAttribute");
            feature.AddKnownType(@"System.MTAThreadAttribute", @"MTAThreadAttribute");
            feature.AddKnownType(@"System.TimeoutException", @"TimeoutException");
            feature.AddKnownType(@"System.TimeZoneInfoOptions", @"TimeZoneInfoOptions");
            feature.AddKnownType(@"System.TimeZoneInfo", @"TimeZoneInfo");
            feature.AddKnownType(@"System.TimeZoneNotFoundException", @"TimeZoneNotFoundException");
            feature.AddKnownType(@"System.TypeAccessException", @"TypeAccessException");
            feature.AddKnownType(@"System.SafeTypeNameParserHandle", @"SafeTypeNameParserHandle");
            feature.AddKnownType(@"System.TypeNameParser", @"TypeNameParser");
            feature.AddKnownType(@"System.TypeCode", @"TypeCode");
            feature.AddKnownType(@"System.TypedReference", @"TypedReference");
            feature.AddKnownType(@"System.TypeInitializationException", @"TypeInitializationException");
            feature.AddKnownType(@"System.UIntPtr", @"UIntPtr");
            feature.AddKnownType(@"System.UnauthorizedAccessException", @"UnauthorizedAccessException");
            feature.AddKnownType(@"System.UnitySerializationHolder", @"UnitySerializationHolder");
            feature.AddKnownType(@"System.UnhandledExceptionEventArgs", @"UnhandledExceptionEventArgs");
            feature.AddKnownType(@"System.UnhandledExceptionEventHandler", @"UnhandledExceptionEventHandler");
            feature.AddKnownType(@"System.UnSafeCharBuffer", @"UnSafeCharBuffer");
            feature.AddKnownType(@"System.Variant", @"Variant");
            feature.AddKnownType(@"System.Version", @"Version");
            feature.AddKnownType(@"System.Void", @"Void");
            feature.AddKnownType(@"System.WeakReference", @"WeakReference");
            feature.AddKnownType(@"System.WeakReference`1", @"WeakReference`1'1");
            feature.AddKnownType(@"System.XmlIgnoreMemberAttribute", @"XmlIgnoreMemberAttribute");
            feature.AddKnownType(@"System.CLRConfig", @"CLRConfig");
            feature.AddKnownType(@"System.ThreadStaticAttribute", @"ThreadStaticAttribute");
            feature.AddKnownType(@"System.Nullable", @"Nullable");
            feature.AddKnownType(@"System.DateTimeFormat", @"DateTimeFormat");
            feature.AddKnownType(@"System.DateTimeParse", @"DateTimeParse");
            feature.AddKnownType(@"System.__DTString", @"__DTString");
            feature.AddKnownType(@"System.DTSubStringType", @"DTSubStringType");
            feature.AddKnownType(@"System.DTSubString", @"DTSubString");
            feature.AddKnownType(@"System.DateTimeToken", @"DateTimeToken");
            feature.AddKnownType(@"System.DateTimeRawInfo", @"DateTimeRawInfo");
            feature.AddKnownType(@"System.ParseFailureKind", @"ParseFailureKind");
            feature.AddKnownType(@"System.ParseFlags", @"ParseFlags");
            feature.AddKnownType(@"System.DateTimeResult", @"DateTimeResult");
            feature.AddKnownType(@"System.ParsingInfo", @"ParsingInfo");
            feature.AddKnownType(@"System.TokenType", @"TokenType");
            feature.AddKnownType(@"System.CompatibilityFlag", @"CompatibilityFlag");
            feature.AddKnownType(@"System.Configuration.Assemblies.AssemblyHash", @"AssemblyHash");
            feature.AddKnownType(@"System.Configuration.Assemblies.AssemblyHashAlgorithm", @"AssemblyHashAlgorithm");
            feature.AddKnownType(@"System.Configuration.Assemblies.AssemblyVersionCompatibility", @"AssemblyVersionCompatibility");
            feature.AddKnownType(@"System.IO.__ConsoleStream", @"__ConsoleStream");
            feature.AddKnownType(@"System.IO.Stream", @"Stream");
            feature.AddKnownType(@"System.IO.__Error", @"__Error");
            feature.AddKnownType(@"System.IO.__HResults", @"__HResults");
            feature.AddKnownType(@"System.IO.BinaryReader", @"BinaryReader");
            feature.AddKnownType(@"System.IO.BinaryWriter", @"BinaryWriter");
            feature.AddKnownType(@"System.IO.BufferedStream", @"BufferedStream");
            feature.AddKnownType(@"System.IO.Directory", @"Directory");
            feature.AddKnownType(@"System.IO.DirectoryInfo", @"DirectoryInfo");
            feature.AddKnownType(@"System.IO.FileSystemInfo", @"FileSystemInfo");
            feature.AddKnownType(@"System.IO.SearchOption", @"SearchOption");
            feature.AddKnownType(@"System.IO.DirectoryNotFoundException", @"DirectoryNotFoundException");
            feature.AddKnownType(@"System.IO.IOException", @"IOException");
            feature.AddKnownType(@"System.IO.DriveType", @"DriveType");
            feature.AddKnownType(@"System.IO.DriveInfo", @"DriveInfo");
            feature.AddKnownType(@"System.IO.DriveNotFoundException", @"DriveNotFoundException");
            feature.AddKnownType(@"System.IO.EndOfStreamException", @"EndOfStreamException");
            feature.AddKnownType(@"System.IO.File", @"File");
            feature.AddKnownType(@"System.IO.FileAccess", @"FileAccess");
            feature.AddKnownType(@"System.IO.FileInfo", @"FileInfo");
            feature.AddKnownType(@"System.IO.FileLoadException", @"FileLoadException");
            feature.AddKnownType(@"System.IO.FileMode", @"FileMode");
            feature.AddKnownType(@"System.IO.FileNotFoundException", @"FileNotFoundException");
            feature.AddKnownType(@"System.IO.FileOptions", @"FileOptions");
            feature.AddKnownType(@"System.IO.FileSecurityStateAccess", @"FileSecurityStateAccess");
            feature.AddKnownType(@"System.IO.FileShare", @"FileShare");
            feature.AddKnownType(@"System.IO.FileStreamAsyncResult", @"FileStreamAsyncResult");
            feature.AddKnownType(@"System.IO.FileStream", @"FileStream");
            feature.AddKnownType(@"System.IO.FileSystemEnumerableFactory", @"FileSystemEnumerableFactory");
            feature.AddKnownType(@"System.IO.Iterator`1", @"Iterator`1'1");
            feature.AddKnownType(@"System.IO.FileSystemEnumerableIterator`1", @"FileSystemEnumerableIterator`1'1");
            feature.AddKnownType(@"System.IO.SearchResultHandler`1", @"SearchResultHandler`1'1");
            feature.AddKnownType(@"System.IO.StringResultHandler", @"StringResultHandler");
            feature.AddKnownType(@"System.IO.FileInfoResultHandler", @"FileInfoResultHandler");
            feature.AddKnownType(@"System.IO.DirectoryInfoResultHandler", @"DirectoryInfoResultHandler");
            feature.AddKnownType(@"System.IO.FileSystemInfoResultHandler", @"FileSystemInfoResultHandler");
            feature.AddKnownType(@"System.IO.FileAttributes", @"FileAttributes");
            feature.AddKnownType(@"System.IO.LongPathHelper", @"LongPathHelper");
            feature.AddKnownType(@"System.IO.MemoryStream", @"MemoryStream");
            feature.AddKnownType(@"System.IO.Path", @"Path");
            feature.AddKnownType(@"System.IO.PathHelper", @"PathHelper");
            feature.AddKnownType(@"System.IO.PathInternal", @"PathInternal");
            feature.AddKnownType(@"System.IO.PathTooLongException", @"PathTooLongException");
            feature.AddKnownType(@"System.IO.PinnedBufferMemoryStream", @"PinnedBufferMemoryStream");
            feature.AddKnownType(@"System.IO.UnmanagedMemoryStream", @"UnmanagedMemoryStream");
            feature.AddKnownType(@"System.IO.ReadLinesIterator", @"ReadLinesIterator");
            feature.AddKnownType(@"System.IO.SeekOrigin", @"SeekOrigin");
            feature.AddKnownType(@"System.IO.StreamReader", @"StreamReader");
            feature.AddKnownType(@"System.IO.TextReader", @"TextReader");
            feature.AddKnownType(@"System.IO.StreamWriter", @"StreamWriter");
            feature.AddKnownType(@"System.IO.TextWriter", @"TextWriter");
            feature.AddKnownType(@"System.IO.StringReader", @"StringReader");
            feature.AddKnownType(@"System.IO.StringWriter", @"StringWriter");
            feature.AddKnownType(@"System.IO.UnmanagedMemoryAccessor", @"UnmanagedMemoryAccessor");
            feature.AddKnownType(@"System.IO.UnmanagedMemoryStreamWrapper", @"UnmanagedMemoryStreamWrapper");
            feature.AddKnownType(@"System.IO.LongPath", @"LongPath");
            feature.AddKnownType(@"System.IO.LongPathFile", @"LongPathFile");
            feature.AddKnownType(@"System.IO.LongPathDirectory", @"LongPathDirectory");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageScope", @"IsolatedStorageScope");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorage", @"IsolatedStorage");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageFileStream", @"IsolatedStorageFileStream");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageException", @"IsolatedStorageException");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageSecurityOptions", @"IsolatedStorageSecurityOptions");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageSecurityState", @"IsolatedStorageSecurityState");
            feature.AddKnownType(@"System.Security.SecurityState", @"SecurityState");
            feature.AddKnownType(@"System.IO.IsolatedStorage.INormalizeForIsolatedStorage", @"INormalizeForIsolatedStorage");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageFile", @"IsolatedStorageFile");
            feature.AddKnownType(@"System.IO.IsolatedStorage.IsolatedStorageFileEnumerator", @"IsolatedStorageFileEnumerator");
            feature.AddKnownType(@"System.IO.IsolatedStorage.SafeIsolatedStorageFileHandle", @"SafeIsolatedStorageFileHandle");
            feature.AddKnownType(@"System.IO.IsolatedStorage.TwoPaths", @"TwoPaths");
            feature.AddKnownType(@"System.IO.IsolatedStorage.TwoLevelFileEnumerator", @"TwoLevelFileEnumerator");
            feature.AddKnownType(@"System.IO.IsolatedStorage.__HResults", @"__HResults");
            feature.AddKnownType(@"System.Security.SecurityElementType", @"SecurityElementType");
            feature.AddKnownType(@"System.Security.ISecurityElementFactory", @"ISecurityElementFactory");
            feature.AddKnownType(@"System.Security.SecurityElement", @"SecurityElement");
            feature.AddKnownType(@"System.Security.SecurityDocumentElement", @"SecurityDocumentElement");
            feature.AddKnownType(@"System.Security.SecurityDocument", @"SecurityDocument");
            feature.AddKnownType(@"System.Security.XmlSyntaxException", @"XmlSyntaxException");
            feature.AddKnownType(@"System.Security.DynamicSecurityMethodAttribute", @"DynamicSecurityMethodAttribute");
            feature.AddKnownType(@"System.Security.SuppressUnmanagedCodeSecurityAttribute", @"SuppressUnmanagedCodeSecurityAttribute");
            feature.AddKnownType(@"System.Security.UnverifiableCodeAttribute", @"UnverifiableCodeAttribute");
            feature.AddKnownType(@"System.Security.AllowPartiallyTrustedCallersAttribute", @"AllowPartiallyTrustedCallersAttribute");
            feature.AddKnownType(@"System.Security.PartialTrustVisibilityLevel", @"PartialTrustVisibilityLevel");
            feature.AddKnownType(@"System.Security.SecurityCriticalScope", @"SecurityCriticalScope");
            feature.AddKnownType(@"System.Security.SecurityCriticalAttribute", @"SecurityCriticalAttribute");
            feature.AddKnownType(@"System.Security.SecurityTreatAsSafeAttribute", @"SecurityTreatAsSafeAttribute");
            feature.AddKnownType(@"System.Security.SecuritySafeCriticalAttribute", @"SecuritySafeCriticalAttribute");
            feature.AddKnownType(@"System.Security.SecurityTransparentAttribute", @"SecurityTransparentAttribute");
            feature.AddKnownType(@"System.Security.SecurityRuleSet", @"SecurityRuleSet");
            feature.AddKnownType(@"System.Security.SecurityRulesAttribute", @"SecurityRulesAttribute");
            feature.AddKnownType(@"System.Security.BuiltInPermissionSets", @"BuiltInPermissionSets");
            feature.AddKnownType(@"System.Security.CodeAccessPermission", @"CodeAccessPermission");
            feature.AddKnownType(@"System.Security.IPermission", @"IPermission");
            feature.AddKnownType(@"System.Security.ISecurityEncodable", @"ISecurityEncodable");
            feature.AddKnownType(@"System.Security.IStackWalk", @"IStackWalk");
            feature.AddKnownType(@"System.Security.PermissionType", @"PermissionType");
            feature.AddKnownType(@"System.Security.CodeAccessSecurityEngine", @"CodeAccessSecurityEngine");
            feature.AddKnownType(@"System.Security.ISecurityPolicyEncodable", @"ISecurityPolicyEncodable");
            feature.AddKnownType(@"System.Security.FrameSecurityDescriptor", @"FrameSecurityDescriptor");
            feature.AddKnownType(@"System.Security.FrameSecurityDescriptorWithResolver", @"FrameSecurityDescriptorWithResolver");
            feature.AddKnownType(@"System.Security.HostSecurityManagerOptions", @"HostSecurityManagerOptions");
            feature.AddKnownType(@"System.Security.HostSecurityManager", @"HostSecurityManager");
            feature.AddKnownType(@"System.Security.NamedPermissionSet", @"NamedPermissionSet");
            feature.AddKnownType(@"System.Security.PermissionSet", @"PermissionSet");
            feature.AddKnownType(@"System.Security.PermissionSetEnumerator", @"PermissionSetEnumerator");
            feature.AddKnownType(@"System.Security.PermissionSetEnumeratorInternal", @"PermissionSetEnumeratorInternal");
            feature.AddKnownType(@"System.Security.SpecialPermissionSetFlag", @"SpecialPermissionSetFlag");
            feature.AddKnownType(@"System.Security.PermissionTokenType", @"PermissionTokenType");
            feature.AddKnownType(@"System.Security.PermissionTokenKeyComparer", @"PermissionTokenKeyComparer");
            feature.AddKnownType(@"System.Security.PermissionToken", @"PermissionToken");
            feature.AddKnownType(@"System.Security.PermissionTokenFactory", @"PermissionTokenFactory");
            feature.AddKnownType(@"System.Security.PermissionSetTriple", @"PermissionSetTriple");
            feature.AddKnownType(@"System.Security.PermissionListSet", @"PermissionListSet");
            feature.AddKnownType(@"System.Security.PolicyManager", @"PolicyManager");
            feature.AddKnownType(@"System.Security.ReadOnlyPermissionSet", @"ReadOnlyPermissionSet");
            feature.AddKnownType(@"System.Security.ReadOnlyPermissionSetEnumerator", @"ReadOnlyPermissionSetEnumerator");
            feature.AddKnownType(@"System.Security.SecureString", @"SecureString");
            feature.AddKnownType(@"System.Security.SafeBSTRHandle", @"SafeBSTRHandle");
            feature.AddKnownType(@"System.Security.SecurityContextSource", @"SecurityContextSource");
            feature.AddKnownType(@"System.Security.SecurityContextDisableFlow", @"SecurityContextDisableFlow");
            feature.AddKnownType(@"System.Security.WindowsImpersonationFlowMode", @"WindowsImpersonationFlowMode");
            feature.AddKnownType(@"System.Security.SecurityContextSwitcher", @"SecurityContextSwitcher");
            feature.AddKnownType(@"System.Security.SecurityContext", @"SecurityContext");
            feature.AddKnownType(@"System.Security.SecurityException", @"SecurityException");
            feature.AddKnownType(@"System.Security.HostProtectionException", @"HostProtectionException");
            feature.AddKnownType(@"System.Security.PolicyLevelType", @"PolicyLevelType");
            feature.AddKnownType(@"System.Security.SecurityManager", @"SecurityManager");
            feature.AddKnownType(@"System.Security.SecurityRuntime", @"SecurityRuntime");
            feature.AddKnownType(@"System.Security.SecurityZone", @"SecurityZone");
            feature.AddKnownType(@"System.Security.VerificationException", @"VerificationException");
            feature.AddKnownType(@"System.Security.AccessControl.InheritanceFlags", @"InheritanceFlags");
            feature.AddKnownType(@"System.Security.AccessControl.PropagationFlags", @"PropagationFlags");
            feature.AddKnownType(@"System.Security.AccessControl.AuditFlags", @"AuditFlags");
            feature.AddKnownType(@"System.Security.AccessControl.SecurityInfos", @"SecurityInfos");
            feature.AddKnownType(@"System.Security.AccessControl.ResourceType", @"ResourceType");
            feature.AddKnownType(@"System.Security.AccessControl.AccessControlSections", @"AccessControlSections");
            feature.AddKnownType(@"System.Security.AccessControl.AccessControlActions", @"AccessControlActions");
            feature.AddKnownType(@"System.Security.AccessControl.AceType", @"AceType");
            feature.AddKnownType(@"System.Security.AccessControl.AceFlags", @"AceFlags");
            feature.AddKnownType(@"System.Security.AccessControl.GenericAce", @"GenericAce");
            feature.AddKnownType(@"System.Security.AccessControl.KnownAce", @"KnownAce");
            feature.AddKnownType(@"System.Security.AccessControl.CustomAce", @"CustomAce");
            feature.AddKnownType(@"System.Security.AccessControl.CompoundAceType", @"CompoundAceType");
            feature.AddKnownType(@"System.Security.AccessControl.CompoundAce", @"CompoundAce");
            feature.AddKnownType(@"System.Security.AccessControl.AceQualifier", @"AceQualifier");
            feature.AddKnownType(@"System.Security.AccessControl.QualifiedAce", @"QualifiedAce");
            feature.AddKnownType(@"System.Security.AccessControl.CommonAce", @"CommonAce");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectAceFlags", @"ObjectAceFlags");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectAce", @"ObjectAce");
            feature.AddKnownType(@"System.Security.AccessControl.AceEnumerator", @"AceEnumerator");
            feature.AddKnownType(@"System.Security.AccessControl.GenericAcl", @"GenericAcl");
            feature.AddKnownType(@"System.Security.AccessControl.RawAcl", @"RawAcl");
            feature.AddKnownType(@"System.Security.AccessControl.CommonAcl", @"CommonAcl");
            feature.AddKnownType(@"System.Security.AccessControl.SystemAcl", @"SystemAcl");
            feature.AddKnownType(@"System.Security.AccessControl.DiscretionaryAcl", @"DiscretionaryAcl");
            feature.AddKnownType(@"System.Security.AccessControl.CryptoKeyRights", @"CryptoKeyRights");
            feature.AddKnownType(@"System.Security.AccessControl.CryptoKeyAccessRule", @"CryptoKeyAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.AccessRule", @"AccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.AuthorizationRule", @"AuthorizationRule");
            feature.AddKnownType(@"System.Security.AccessControl.CryptoKeyAuditRule", @"CryptoKeyAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.AuditRule", @"AuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.CryptoKeySecurity", @"CryptoKeySecurity");
            feature.AddKnownType(@"System.Security.AccessControl.NativeObjectSecurity", @"NativeObjectSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.CommonObjectSecurity", @"CommonObjectSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectSecurity", @"ObjectSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.EventWaitHandleRights", @"EventWaitHandleRights");
            feature.AddKnownType(@"System.Security.AccessControl.EventWaitHandleAccessRule", @"EventWaitHandleAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.EventWaitHandleAuditRule", @"EventWaitHandleAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.EventWaitHandleSecurity", @"EventWaitHandleSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.FileSystemRights", @"FileSystemRights");
            feature.AddKnownType(@"System.Security.AccessControl.FileSystemAccessRule", @"FileSystemAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.FileSystemAuditRule", @"FileSystemAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.FileSystemSecurity", @"FileSystemSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.FileSecurity", @"FileSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.DirectorySecurity", @"DirectorySecurity");
            feature.AddKnownType(@"System.Security.AccessControl.MutexRights", @"MutexRights");
            feature.AddKnownType(@"System.Security.AccessControl.MutexAccessRule", @"MutexAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.MutexAuditRule", @"MutexAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.MutexSecurity", @"MutexSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.AccessControlModification", @"AccessControlModification");
            feature.AddKnownType(@"System.Security.AccessControl.AccessRule`1", @"AccessRule`1'1");
            feature.AddKnownType(@"System.Security.AccessControl.AuditRule`1", @"AuditRule`1'1");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectSecurity`1", @"ObjectSecurity`1'1");
            feature.AddKnownType(@"System.Security.AccessControl.DirectoryObjectSecurity", @"DirectoryObjectSecurity");
            feature.AddKnownType(@"System.Security.AccessControl.Privilege", @"Privilege");
            feature.AddKnownType(@"System.Security.AccessControl.PrivilegeNotHeldException", @"PrivilegeNotHeldException");
            feature.AddKnownType(@"System.Security.AccessControl.RegistryRights", @"RegistryRights");
            feature.AddKnownType(@"System.Security.AccessControl.RegistryAccessRule", @"RegistryAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.RegistryAuditRule", @"RegistryAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.RegistrySecurity", @"RegistrySecurity");
            feature.AddKnownType(@"System.Security.AccessControl.AccessControlType", @"AccessControlType");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectAccessRule", @"ObjectAccessRule");
            feature.AddKnownType(@"System.Security.AccessControl.ObjectAuditRule", @"ObjectAuditRule");
            feature.AddKnownType(@"System.Security.AccessControl.AuthorizationRuleCollection", @"AuthorizationRuleCollection");
            feature.AddKnownType(@"System.Collections.ReadOnlyCollectionBase", @"ReadOnlyCollectionBase");
            feature.AddKnownType(@"System.Security.AccessControl.ControlFlags", @"ControlFlags");
            feature.AddKnownType(@"System.Security.AccessControl.GenericSecurityDescriptor", @"GenericSecurityDescriptor");
            feature.AddKnownType(@"System.Security.AccessControl.RawSecurityDescriptor", @"RawSecurityDescriptor");
            feature.AddKnownType(@"System.Security.AccessControl.CommonSecurityDescriptor", @"CommonSecurityDescriptor");
            feature.AddKnownType(@"System.Security.AccessControl.Win32", @"Win32");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative", @"CapiNative");
            feature.AddKnownType(@"System.Security.Cryptography.SafeCspHandle", @"SafeCspHandle");
            feature.AddKnownType(@"System.Security.Cryptography.SafeCspHashHandle", @"SafeCspHashHandle");
            feature.AddKnownType(@"System.Security.Cryptography.SafeCspKeyHandle", @"SafeCspKeyHandle");
            feature.AddKnownType(@"System.Security.Cryptography.CipherMode", @"CipherMode");
            feature.AddKnownType(@"System.Security.Cryptography.PaddingMode", @"PaddingMode");
            feature.AddKnownType(@"System.Security.Cryptography.KeySizes", @"KeySizes");
            feature.AddKnownType(@"System.Security.Cryptography.CryptographicException", @"CryptographicException");
            feature.AddKnownType(@"System.Security.Cryptography.CryptographicUnexpectedOperationException", @"CryptographicUnexpectedOperationException");
            feature.AddKnownType(@"System.Security.Cryptography.ICryptoTransform", @"ICryptoTransform");
            feature.AddKnownType(@"System.Security.Cryptography.RandomNumberGenerator", @"RandomNumberGenerator");
            feature.AddKnownType(@"System.Security.Cryptography.RNGCryptoServiceProvider", @"RNGCryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.Aes", @"Aes");
            feature.AddKnownType(@"System.Security.Cryptography.SymmetricAlgorithm", @"SymmetricAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricAlgorithm", @"AsymmetricAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricKeyExchangeDeformatter", @"AsymmetricKeyExchangeDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricKeyExchangeFormatter", @"AsymmetricKeyExchangeFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricSignatureDeformatter", @"AsymmetricSignatureDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricSignatureFormatter", @"AsymmetricSignatureFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.FromBase64TransformMode", @"FromBase64TransformMode");
            feature.AddKnownType(@"System.Security.Cryptography.ToBase64Transform", @"ToBase64Transform");
            feature.AddKnownType(@"System.Security.Cryptography.FromBase64Transform", @"FromBase64Transform");
            feature.AddKnownType(@"System.Security.Cryptography.CryptoAPITransformMode", @"CryptoAPITransformMode");
            feature.AddKnownType(@"System.Security.Cryptography.CryptoAPITransform", @"CryptoAPITransform");
            feature.AddKnownType(@"System.Security.Cryptography.CspProviderFlags", @"CspProviderFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CspParameters", @"CspParameters");
            feature.AddKnownType(@"System.Security.Cryptography.CryptoConfig", @"CryptoConfig");
            feature.AddKnownType(@"System.Security.Cryptography.CryptoStreamMode", @"CryptoStreamMode");
            feature.AddKnownType(@"System.Security.Cryptography.CryptoStream", @"CryptoStream");
            feature.AddKnownType(@"System.Security.Cryptography.DES", @"DES");
            feature.AddKnownType(@"System.Security.Cryptography.DESCryptoServiceProvider", @"DESCryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.DeriveBytes", @"DeriveBytes");
            feature.AddKnownType(@"System.Security.Cryptography.DSAParameters", @"DSAParameters");
            feature.AddKnownType(@"System.Security.Cryptography.DSA", @"DSA");
            feature.AddKnownType(@"System.Security.Cryptography.DSACspObject", @"DSACspObject");
            feature.AddKnownType(@"System.Security.Cryptography.DSACryptoServiceProvider", @"DSACryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.ICspAsymmetricAlgorithm", @"ICspAsymmetricAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.DSASignatureDeformatter", @"DSASignatureDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.DSASignatureFormatter", @"DSASignatureFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.HMAC", @"HMAC");
            feature.AddKnownType(@"System.Security.Cryptography.KeyedHashAlgorithm", @"KeyedHashAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.HashAlgorithm", @"HashAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.HMACMD5", @"HMACMD5");
            feature.AddKnownType(@"System.Security.Cryptography.HMACRIPEMD160", @"HMACRIPEMD160");
            feature.AddKnownType(@"System.Security.Cryptography.HMACSHA1", @"HMACSHA1");
            feature.AddKnownType(@"System.Security.Cryptography.HMACSHA256", @"HMACSHA256");
            feature.AddKnownType(@"System.Security.Cryptography.HMACSHA384", @"HMACSHA384");
            feature.AddKnownType(@"System.Security.Cryptography.HMACSHA512", @"HMACSHA512");
            feature.AddKnownType(@"System.Security.Cryptography.HashAlgorithmName", @"HashAlgorithmName");
            feature.AddKnownType(@"System.Security.Cryptography.KeyNumber", @"KeyNumber");
            feature.AddKnownType(@"System.Security.Cryptography.CspKeyContainerInfo", @"CspKeyContainerInfo");
            feature.AddKnownType(@"System.Security.Cryptography.MACTripleDES", @"MACTripleDES");
            feature.AddKnownType(@"System.Security.Cryptography.TailStream", @"TailStream");
            feature.AddKnownType(@"System.Security.Cryptography.MD5", @"MD5");
            feature.AddKnownType(@"System.Security.Cryptography.MD5CryptoServiceProvider", @"MD5CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.MaskGenerationMethod", @"MaskGenerationMethod");
            feature.AddKnownType(@"System.Security.Cryptography.PasswordDeriveBytes", @"PasswordDeriveBytes");
            feature.AddKnownType(@"System.Security.Cryptography.PKCS1MaskGenerationMethod", @"PKCS1MaskGenerationMethod");
            feature.AddKnownType(@"System.Security.Cryptography.RC2", @"RC2");
            feature.AddKnownType(@"System.Security.Cryptography.RC2CryptoServiceProvider", @"RC2CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.Rfc2898DeriveBytes", @"Rfc2898DeriveBytes");
            feature.AddKnownType(@"System.Security.Cryptography.RIPEMD160", @"RIPEMD160");
            feature.AddKnownType(@"System.Security.Cryptography.RIPEMD160Managed", @"RIPEMD160Managed");
            feature.AddKnownType(@"System.Security.Cryptography.RSAParameters", @"RSAParameters");
            feature.AddKnownType(@"System.Security.Cryptography.RSA", @"RSA");
            feature.AddKnownType(@"System.Security.Cryptography.RSASignaturePadding", @"RSASignaturePadding");
            feature.AddKnownType(@"System.Security.Cryptography.RSASignaturePaddingMode", @"RSASignaturePaddingMode");
            feature.AddKnownType(@"System.Security.Cryptography.RSACspObject", @"RSACspObject");
            feature.AddKnownType(@"System.Security.Cryptography.RSACryptoServiceProvider", @"RSACryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.RSAEncryptionPadding", @"RSAEncryptionPadding");
            feature.AddKnownType(@"System.Security.Cryptography.RSAEncryptionPaddingMode", @"RSAEncryptionPaddingMode");
            feature.AddKnownType(@"System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter", @"RSAOAEPKeyExchangeDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter", @"RSAOAEPKeyExchangeFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter", @"RSAPKCS1KeyExchangeDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter", @"RSAPKCS1KeyExchangeFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SignatureDeformatter", @"RSAPKCS1SignatureDeformatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SignatureFormatter", @"RSAPKCS1SignatureFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.Rijndael", @"Rijndael");
            feature.AddKnownType(@"System.Security.Cryptography.RijndaelManaged", @"RijndaelManaged");
            feature.AddKnownType(@"System.Security.Cryptography.RijndaelManagedTransformMode", @"RijndaelManagedTransformMode");
            feature.AddKnownType(@"System.Security.Cryptography.RijndaelManagedTransform", @"RijndaelManagedTransform");
            feature.AddKnownType(@"System.Security.Cryptography.SafeProvHandle", @"SafeProvHandle");
            feature.AddKnownType(@"System.Security.Cryptography.SafeKeyHandle", @"SafeKeyHandle");
            feature.AddKnownType(@"System.Security.Cryptography.SafeHashHandle", @"SafeHashHandle");
            feature.AddKnownType(@"System.Security.Cryptography.SHA1", @"SHA1");
            feature.AddKnownType(@"System.Security.Cryptography.SHA1CryptoServiceProvider", @"SHA1CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.SHA1Managed", @"SHA1Managed");
            feature.AddKnownType(@"System.Security.Cryptography.SHA256", @"SHA256");
            feature.AddKnownType(@"System.Security.Cryptography.SHA256Managed", @"SHA256Managed");
            feature.AddKnownType(@"System.Security.Cryptography.SHA384", @"SHA384");
            feature.AddKnownType(@"System.Security.Cryptography.SHA384Managed", @"SHA384Managed");
            feature.AddKnownType(@"System.Security.Cryptography.SHA512", @"SHA512");
            feature.AddKnownType(@"System.Security.Cryptography.SHA512Managed", @"SHA512Managed");
            feature.AddKnownType(@"System.Security.Cryptography.SignatureDescription", @"SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SignatureDescription", @"RSAPKCS1SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SHA1SignatureDescription", @"RSAPKCS1SHA1SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SHA256SignatureDescription", @"RSAPKCS1SHA256SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SHA384SignatureDescription", @"RSAPKCS1SHA384SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.RSAPKCS1SHA512SignatureDescription", @"RSAPKCS1SHA512SignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.DSASignatureDescription", @"DSASignatureDescription");
            feature.AddKnownType(@"System.Security.Cryptography.TripleDES", @"TripleDES");
            feature.AddKnownType(@"System.Security.Cryptography.TripleDESCryptoServiceProvider", @"TripleDESCryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.CspAlgorithmType", @"CspAlgorithmType");
            feature.AddKnownType(@"System.Security.Cryptography.Constants", @"Constants");
            feature.AddKnownType(@"System.Security.Cryptography.Utils", @"Utils");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.SafeCertContextHandle", @"SafeCertContextHandle");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.SafeCertStoreHandle", @"SafeCertStoreHandle");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Constants", @"X509Constants");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.OidGroup", @"OidGroup");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.OidKeyType", @"OidKeyType");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.CRYPT_OID_INFO", @"CRYPT_OID_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Utils", @"X509Utils");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509ContentType", @"X509ContentType");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags", @"X509KeyStorageFlags");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Certificate", @"X509Certificate");
            feature.AddKnownType(@"System.Security.Permissions.EnvironmentPermissionAccess", @"EnvironmentPermissionAccess");
            feature.AddKnownType(@"System.Security.Permissions.EnvironmentStringExpressionSet", @"EnvironmentStringExpressionSet");
            feature.AddKnownType(@"System.Security.Util.StringExpressionSet", @"StringExpressionSet");
            feature.AddKnownType(@"System.Security.Permissions.EnvironmentPermission", @"EnvironmentPermission");
            feature.AddKnownType(@"System.Security.Permissions.IUnrestrictedPermission", @"IUnrestrictedPermission");
            feature.AddKnownType(@"System.Security.Permissions.IBuiltInPermission", @"IBuiltInPermission");
            feature.AddKnownType(@"System.Security.Permissions.FileDialogPermissionAccess", @"FileDialogPermissionAccess");
            feature.AddKnownType(@"System.Security.Permissions.FileDialogPermission", @"FileDialogPermission");
            feature.AddKnownType(@"System.Security.Permissions.FileIOPermissionAccess", @"FileIOPermissionAccess");
            feature.AddKnownType(@"System.Security.Permissions.FileIOPermission", @"FileIOPermission");
            feature.AddKnownType(@"System.Security.Permissions.FileIOAccess", @"FileIOAccess");
            feature.AddKnownType(@"System.Security.Permissions.HostProtectionResource", @"HostProtectionResource");
            feature.AddKnownType(@"System.Security.Permissions.HostProtectionAttribute", @"HostProtectionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.CodeAccessSecurityAttribute", @"CodeAccessSecurityAttribute");
            feature.AddKnownType(@"System.Security.Permissions.SecurityAttribute", @"SecurityAttribute");
            feature.AddKnownType(@"System.Security.Permissions.HostProtectionPermission", @"HostProtectionPermission");
            feature.AddKnownType(@"System.Security.Permissions.BuiltInPermissionIndex", @"BuiltInPermissionIndex");
            feature.AddKnownType(@"System.Security.Permissions.BuiltInPermissionFlag", @"BuiltInPermissionFlag");
            feature.AddKnownType(@"System.Security.Permissions.IsolatedStorageContainment", @"IsolatedStorageContainment");
            feature.AddKnownType(@"System.Security.Permissions.IsolatedStoragePermission", @"IsolatedStoragePermission");
            feature.AddKnownType(@"System.Security.Permissions.IsolatedStorageFilePermission", @"IsolatedStorageFilePermission");
            feature.AddKnownType(@"System.Security.Permissions.PermissionState", @"PermissionState");
            feature.AddKnownType(@"System.Security.Permissions.SecurityAction", @"SecurityAction");
            feature.AddKnownType(@"System.Security.Permissions.EnvironmentPermissionAttribute", @"EnvironmentPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.FileDialogPermissionAttribute", @"FileDialogPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.FileIOPermissionAttribute", @"FileIOPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermissionAttribute", @"KeyContainerPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.PrincipalPermissionAttribute", @"PrincipalPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.ReflectionPermissionAttribute", @"ReflectionPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.RegistryPermissionAttribute", @"RegistryPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.SecurityPermissionAttribute", @"SecurityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.UIPermissionAttribute", @"UIPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.ZoneIdentityPermissionAttribute", @"ZoneIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.StrongNameIdentityPermissionAttribute", @"StrongNameIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.SiteIdentityPermissionAttribute", @"SiteIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.UrlIdentityPermissionAttribute", @"UrlIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.PublisherIdentityPermissionAttribute", @"PublisherIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.IsolatedStoragePermissionAttribute", @"IsolatedStoragePermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.IsolatedStorageFilePermissionAttribute", @"IsolatedStorageFilePermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.PermissionSetAttribute", @"PermissionSetAttribute");
            feature.AddKnownType(@"System.Security.Permissions.ReflectionPermissionFlag", @"ReflectionPermissionFlag");
            feature.AddKnownType(@"System.Security.Permissions.ReflectionPermission", @"ReflectionPermission");
            feature.AddKnownType(@"System.Security.Permissions.IDRole", @"IDRole");
            feature.AddKnownType(@"System.Security.Permissions.PrincipalPermission", @"PrincipalPermission");
            feature.AddKnownType(@"System.Security.Permissions.SecurityPermissionFlag", @"SecurityPermissionFlag");
            feature.AddKnownType(@"System.Security.Permissions.SecurityPermission", @"SecurityPermission");
            feature.AddKnownType(@"System.Security.Permissions.SiteIdentityPermission", @"SiteIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.StrongName2", @"StrongName2");
            feature.AddKnownType(@"System.Security.Permissions.StrongNameIdentityPermission", @"StrongNameIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.StrongNamePublicKeyBlob", @"StrongNamePublicKeyBlob");
            feature.AddKnownType(@"System.Security.Permissions.UIPermissionWindow", @"UIPermissionWindow");
            feature.AddKnownType(@"System.Security.Permissions.UIPermissionClipboard", @"UIPermissionClipboard");
            feature.AddKnownType(@"System.Security.Permissions.UIPermission", @"UIPermission");
            feature.AddKnownType(@"System.Security.Permissions.UrlIdentityPermission", @"UrlIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.ZoneIdentityPermission", @"ZoneIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.GacIdentityPermissionAttribute", @"GacIdentityPermissionAttribute");
            feature.AddKnownType(@"System.Security.Permissions.GacIdentityPermission", @"GacIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermissionFlags", @"KeyContainerPermissionFlags");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermissionAccessEntry", @"KeyContainerPermissionAccessEntry");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermissionAccessEntryCollection", @"KeyContainerPermissionAccessEntryCollection");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator", @"KeyContainerPermissionAccessEntryEnumerator");
            feature.AddKnownType(@"System.Security.Permissions.KeyContainerPermission", @"KeyContainerPermission");
            feature.AddKnownType(@"System.Security.Permissions.PublisherIdentityPermission", @"PublisherIdentityPermission");
            feature.AddKnownType(@"System.Security.Permissions.RegistryPermissionAccess", @"RegistryPermissionAccess");
            feature.AddKnownType(@"System.Security.Permissions.RegistryPermission", @"RegistryPermission");
            feature.AddKnownType(@"System.Security.Claims.Claim", @"Claim");
            feature.AddKnownType(@"System.Security.Claims.ClaimsIdentity", @"ClaimsIdentity");
            feature.AddKnownType(@"System.Security.Principal.IIdentity", @"IIdentity");
            feature.AddKnownType(@"System.Security.Claims.ClaimsPrincipal", @"ClaimsPrincipal");
            feature.AddKnownType(@"System.Security.Principal.IPrincipal", @"IPrincipal");
            feature.AddKnownType(@"System.Security.Claims.ClaimTypes", @"ClaimTypes");
            feature.AddKnownType(@"System.Security.Claims.ClaimValueTypes", @"ClaimValueTypes");
            feature.AddKnownType(@"System.Security.Claims.RoleClaimProvider", @"RoleClaimProvider");
            feature.AddKnownType(@"System.Security.Principal.GenericIdentity", @"GenericIdentity");
            feature.AddKnownType(@"System.Security.Principal.GenericPrincipal", @"GenericPrincipal");
            feature.AddKnownType(@"System.Security.Principal.PrincipalPolicy", @"PrincipalPolicy");
            feature.AddKnownType(@"System.Security.Principal.TokenAccessLevels", @"TokenAccessLevels");
            feature.AddKnownType(@"System.Security.Principal.TokenImpersonationLevel", @"TokenImpersonationLevel");
            feature.AddKnownType(@"System.Security.Principal.WindowsAccountType", @"WindowsAccountType");
            feature.AddKnownType(@"System.Security.Principal.WinSecurityContext", @"WinSecurityContext");
            feature.AddKnownType(@"System.Security.Principal.ImpersonationQueryResult", @"ImpersonationQueryResult");
            feature.AddKnownType(@"System.Security.Principal.WindowsIdentity", @"WindowsIdentity");
            feature.AddKnownType(@"System.Security.Principal.KerbLogonSubmitType", @"KerbLogonSubmitType");
            feature.AddKnownType(@"System.Security.Principal.SecurityLogonType", @"SecurityLogonType");
            feature.AddKnownType(@"System.Security.Principal.TokenType", @"TokenType");
            feature.AddKnownType(@"System.Security.Principal.TokenInformationClass", @"TokenInformationClass");
            feature.AddKnownType(@"System.Security.Principal.WindowsImpersonationContext", @"WindowsImpersonationContext");
            feature.AddKnownType(@"System.Security.Principal.WindowsBuiltInRole", @"WindowsBuiltInRole");
            feature.AddKnownType(@"System.Security.Principal.WindowsPrincipal", @"WindowsPrincipal");
            feature.AddKnownType(@"System.Security.Principal.IdentityReference", @"IdentityReference");
            feature.AddKnownType(@"System.Security.Principal.IdentityReferenceCollection", @"IdentityReferenceCollection");
            feature.AddKnownType(@"System.Security.Principal.IdentityReferenceEnumerator", @"IdentityReferenceEnumerator");
            feature.AddKnownType(@"System.Security.Principal.NTAccount", @"NTAccount");
            feature.AddKnownType(@"System.Security.Principal.IdentifierAuthority", @"IdentifierAuthority");
            feature.AddKnownType(@"System.Security.Principal.SidNameUse", @"SidNameUse");
            feature.AddKnownType(@"System.Security.Principal.WellKnownSidType", @"WellKnownSidType");
            feature.AddKnownType(@"System.Security.Principal.SecurityIdentifier", @"SecurityIdentifier");
            feature.AddKnownType(@"System.Security.Principal.PolicyRights", @"PolicyRights");
            feature.AddKnownType(@"System.Security.Principal.Win32", @"Win32");
            feature.AddKnownType(@"System.Security.Principal.IdentityNotMappedException", @"IdentityNotMappedException");
            feature.AddKnownType(@"System.Security.Policy.AllMembershipCondition", @"AllMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.IMembershipCondition", @"IMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.IConstantMembershipCondition", @"IConstantMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.IReportMatchMembershipCondition", @"IReportMatchMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.AppDomainEvidenceFactory", @"AppDomainEvidenceFactory");
            feature.AddKnownType(@"System.Security.Policy.IRuntimeEvidenceFactory", @"IRuntimeEvidenceFactory");
            feature.AddKnownType(@"System.Security.Policy.ApplicationDirectory", @"ApplicationDirectory");
            feature.AddKnownType(@"System.Security.Policy.EvidenceBase", @"EvidenceBase");
            feature.AddKnownType(@"System.Security.Policy.ApplicationDirectoryMembershipCondition", @"ApplicationDirectoryMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.ApplicationSecurityInfo", @"ApplicationSecurityInfo");
            feature.AddKnownType(@"System.Security.Policy.ApplicationSecurityManager", @"ApplicationSecurityManager");
            feature.AddKnownType(@"System.Security.Policy.ApplicationVersionMatch", @"ApplicationVersionMatch");
            feature.AddKnownType(@"System.Security.Policy.ApplicationTrust", @"ApplicationTrust");
            feature.AddKnownType(@"System.Security.Policy.ApplicationTrustCollection", @"ApplicationTrustCollection");
            feature.AddKnownType(@"System.Security.Policy.ApplicationTrustEnumerator", @"ApplicationTrustEnumerator");
            feature.AddKnownType(@"System.Security.Policy.AssemblyEvidenceFactory", @"AssemblyEvidenceFactory");
            feature.AddKnownType(@"System.Security.Policy.IUnionSemanticCodeGroup", @"IUnionSemanticCodeGroup");
            feature.AddKnownType(@"System.Security.Policy.CodeGroup", @"CodeGroup");
            feature.AddKnownType(@"System.Security.Policy.CodeGroupPositionMarker", @"CodeGroupPositionMarker");
            feature.AddKnownType(@"System.Security.Policy.Evidence", @"Evidence");
            feature.AddKnownType(@"System.Security.Policy.ILegacyEvidenceAdapter", @"ILegacyEvidenceAdapter");
            feature.AddKnownType(@"System.Security.Policy.LegacyEvidenceWrapper", @"LegacyEvidenceWrapper");
            feature.AddKnownType(@"System.Security.Policy.LegacyEvidenceList", @"LegacyEvidenceList");
            feature.AddKnownType(@"System.Security.Policy.EvidenceTypeDescriptor", @"EvidenceTypeDescriptor");
            feature.AddKnownType(@"System.Security.Policy.FileCodeGroup", @"FileCodeGroup");
            feature.AddKnownType(@"System.Security.Policy.FirstMatchCodeGroup", @"FirstMatchCodeGroup");
            feature.AddKnownType(@"System.Security.Policy.IIdentityPermissionFactory", @"IIdentityPermissionFactory");
            feature.AddKnownType(@"System.Security.Policy.IDelayEvaluatedEvidence", @"IDelayEvaluatedEvidence");
            feature.AddKnownType(@"System.Security.Policy.IApplicationTrustManager", @"IApplicationTrustManager");
            feature.AddKnownType(@"System.Security.Policy.TrustManagerUIContext", @"TrustManagerUIContext");
            feature.AddKnownType(@"System.Security.Policy.TrustManagerContext", @"TrustManagerContext");
            feature.AddKnownType(@"System.Security.Policy.CodeConnectAccess", @"CodeConnectAccess");
            feature.AddKnownType(@"System.Security.Policy.NetCodeGroup", @"NetCodeGroup");
            feature.AddKnownType(@"System.Security.Policy.EvidenceTypeGenerated", @"EvidenceTypeGenerated");
            feature.AddKnownType(@"System.Security.Policy.PEFileEvidenceFactory", @"PEFileEvidenceFactory");
            feature.AddKnownType(@"System.Security.Policy.PermissionRequestEvidence", @"PermissionRequestEvidence");
            feature.AddKnownType(@"System.Security.Policy.PolicyException", @"PolicyException");
            feature.AddKnownType(@"System.Security.Policy.ConfigId", @"ConfigId");
            feature.AddKnownType(@"System.Security.Policy.PolicyLevel", @"PolicyLevel");
            feature.AddKnownType(@"System.Security.Policy.CodeGroupStackFrame", @"CodeGroupStackFrame");
            feature.AddKnownType(@"System.Security.Policy.CodeGroupStack", @"CodeGroupStack");
            feature.AddKnownType(@"System.Security.Policy.PolicyStatementAttribute", @"PolicyStatementAttribute");
            feature.AddKnownType(@"System.Security.Policy.PolicyStatement", @"PolicyStatement");
            feature.AddKnownType(@"System.Security.Policy.Site", @"Site");
            feature.AddKnownType(@"System.Security.Policy.SiteMembershipCondition", @"SiteMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.StrongName", @"StrongName");
            feature.AddKnownType(@"System.Security.Policy.StrongNameMembershipCondition", @"StrongNameMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.UnionCodeGroup", @"UnionCodeGroup");
            feature.AddKnownType(@"System.Security.Policy.Url", @"Url");
            feature.AddKnownType(@"System.Security.Policy.UrlMembershipCondition", @"UrlMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.Zone", @"Zone");
            feature.AddKnownType(@"System.Security.Policy.ZoneMembershipCondition", @"ZoneMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.GacInstalled", @"GacInstalled");
            feature.AddKnownType(@"System.Security.Policy.GacMembershipCondition", @"GacMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.Hash", @"Hash");
            feature.AddKnownType(@"System.Security.Policy.HashMembershipCondition", @"HashMembershipCondition");
            feature.AddKnownType(@"System.Security.Policy.Publisher", @"Publisher");
            feature.AddKnownType(@"System.Security.Policy.PublisherMembershipCondition", @"PublisherMembershipCondition");
            feature.AddKnownType(@"System.Security.Util.QuickCacheEntryType", @"QuickCacheEntryType");
            feature.AddKnownType(@"System.Security.Util.Config", @"Config");
            feature.AddKnownType(@"System.Security.Util.Hex", @"Hex");
            feature.AddKnownType(@"System.Security.Util.SiteString", @"SiteString");
            feature.AddKnownType(@"System.Security.Util.TokenBasedSet", @"TokenBasedSet");
            feature.AddKnownType(@"System.Security.Util.TokenBasedSetEnumerator", @"TokenBasedSetEnumerator");
            feature.AddKnownType(@"System.Security.Util.URLString", @"URLString");
            feature.AddKnownType(@"System.Security.Util.DirectoryString", @"DirectoryString");
            feature.AddKnownType(@"System.Security.Util.LocalSiteString", @"LocalSiteString");
            feature.AddKnownType(@"System.Security.Util.XMLUtil", @"XMLUtil");
            feature.AddKnownType(@"System.Security.Util.Parser", @"Parser");
            feature.AddKnownType(@"System.Security.Util.Tokenizer", @"Tokenizer");
            feature.AddKnownType(@"System.Security.Util.TokenizerShortBlock", @"TokenizerShortBlock");
            feature.AddKnownType(@"System.Security.Util.TokenizerStringBlock", @"TokenizerStringBlock");
            feature.AddKnownType(@"System.Security.Util.TokenizerStream", @"TokenizerStream");
            feature.AddKnownType(@"System.Numerics.Hashing.HashHelpers", @"HashHelpers");
            feature.AddKnownType(@"System.Resources.FastResourceComparer", @"FastResourceComparer");
            feature.AddKnownType(@"System.Resources.__HResults", @"__HResults");
            feature.AddKnownType(@"System.Resources.FileBasedResourceGroveler", @"FileBasedResourceGroveler");
            feature.AddKnownType(@"System.Resources.IResourceGroveler", @"IResourceGroveler");
            feature.AddKnownType(@"System.Resources.IResourceReader", @"IResourceReader");
            feature.AddKnownType(@"System.Resources.IResourceWriter", @"IResourceWriter");
            feature.AddKnownType(@"System.Resources.ManifestBasedResourceGroveler", @"ManifestBasedResourceGroveler");
            feature.AddKnownType(@"System.Resources.MissingManifestResourceException", @"MissingManifestResourceException");
            feature.AddKnownType(@"System.Resources.MissingSatelliteAssemblyException", @"MissingSatelliteAssemblyException");
            feature.AddKnownType(@"System.Resources.NeutralResourcesLanguageAttribute", @"NeutralResourcesLanguageAttribute");
            feature.AddKnownType(@"System.Resources.ResourceFallbackManager", @"ResourceFallbackManager");
            feature.AddKnownType(@"System.Resources.WindowsRuntimeResourceManagerBase", @"WindowsRuntimeResourceManagerBase");
            feature.AddKnownType(@"System.Resources.PRIExceptionInfo", @"PRIExceptionInfo");
            feature.AddKnownType(@"System.Resources.ResourceManager", @"ResourceManager");
            feature.AddKnownType(@"System.Resources.ResourceLocator", @"ResourceLocator");
            feature.AddKnownType(@"System.Resources.ResourceReader", @"ResourceReader");
            feature.AddKnownType(@"System.Resources.ResourceSet", @"ResourceSet");
            feature.AddKnownType(@"System.Resources.ResourceTypeCode", @"ResourceTypeCode");
            feature.AddKnownType(@"System.Resources.ResourceWriter", @"ResourceWriter");
            feature.AddKnownType(@"System.Resources.RuntimeResourceSet", @"RuntimeResourceSet");
            feature.AddKnownType(@"System.Resources.SatelliteContractVersionAttribute", @"SatelliteContractVersionAttribute");
            feature.AddKnownType(@"System.Resources.UltimateResourceFallbackLocation", @"UltimateResourceFallbackLocation");
            feature.AddKnownType(@"System.Globalization.AppDomainSortingSetupInfo", @"AppDomainSortingSetupInfo");
            feature.AddKnownType(@"System.Globalization.BidiCategory", @"BidiCategory");
            feature.AddKnownType(@"System.Globalization.Calendar", @"Calendar");
            feature.AddKnownType(@"System.Globalization.CalendarData", @"CalendarData");
            feature.AddKnownType(@"System.Globalization.CalendarAlgorithmType", @"CalendarAlgorithmType");
            feature.AddKnownType(@"System.Globalization.CalendarWeekRule", @"CalendarWeekRule");
            feature.AddKnownType(@"System.Globalization.CharUnicodeInfo", @"CharUnicodeInfo");
            feature.AddKnownType(@"System.Globalization.CompareOptions", @"CompareOptions");
            feature.AddKnownType(@"System.Globalization.CompareInfo", @"CompareInfo");
            feature.AddKnownType(@"System.Globalization.CultureNotFoundException", @"CultureNotFoundException");
            feature.AddKnownType(@"System.Globalization.CultureTypes", @"CultureTypes");
            feature.AddKnownType(@"System.Globalization.DateTimeStyles", @"DateTimeStyles");
            feature.AddKnownType(@"System.Globalization.MonthNameStyles", @"MonthNameStyles");
            feature.AddKnownType(@"System.Globalization.DateTimeFormatFlags", @"DateTimeFormatFlags");
            feature.AddKnownType(@"System.Globalization.DateTimeFormatInfo", @"DateTimeFormatInfo");
            feature.AddKnownType(@"System.Globalization.TokenHashValue", @"TokenHashValue");
            feature.AddKnownType(@"System.Globalization.FORMATFLAGS", @"FORMATFLAGS");
            feature.AddKnownType(@"System.Globalization.CalendarId", @"CalendarId");
            feature.AddKnownType(@"System.Globalization.DateTimeFormatInfoScanner", @"DateTimeFormatInfoScanner");
            feature.AddKnownType(@"System.Globalization.DaylightTime", @"DaylightTime");
            feature.AddKnownType(@"System.Globalization.DaylightTimeStruct", @"DaylightTimeStruct");
            feature.AddKnownType(@"System.Globalization.DigitShapes", @"DigitShapes");
            feature.AddKnownType(@"System.Globalization.CodePageDataItem", @"CodePageDataItem");
            feature.AddKnownType(@"System.Globalization.EncodingTable", @"EncodingTable");
            feature.AddKnownType(@"System.Globalization.InternalEncodingDataItem", @"InternalEncodingDataItem");
            feature.AddKnownType(@"System.Globalization.InternalCodePageDataItem", @"InternalCodePageDataItem");
            feature.AddKnownType(@"System.Globalization.GlobalizationAssembly", @"GlobalizationAssembly");
            feature.AddKnownType(@"System.Globalization.GlobalizationExtensions", @"GlobalizationExtensions");
            feature.AddKnownType(@"System.Globalization.GregorianCalendar", @"GregorianCalendar");
            feature.AddKnownType(@"System.Globalization.GregorianCalendarTypes", @"GregorianCalendarTypes");
            feature.AddKnownType(@"System.Globalization.EraInfo", @"EraInfo");
            feature.AddKnownType(@"System.Globalization.GregorianCalendarHelper", @"GregorianCalendarHelper");
            feature.AddKnownType(@"System.Globalization.HebrewCalendar", @"HebrewCalendar");
            feature.AddKnownType(@"System.Globalization.HijriCalendar", @"HijriCalendar");
            feature.AddKnownType(@"System.Globalization.UmAlQuraCalendar", @"UmAlQuraCalendar");
            feature.AddKnownType(@"System.Globalization.ChineseLunisolarCalendar", @"ChineseLunisolarCalendar");
            feature.AddKnownType(@"System.Globalization.EastAsianLunisolarCalendar", @"EastAsianLunisolarCalendar");
            feature.AddKnownType(@"System.Globalization.JapaneseLunisolarCalendar", @"JapaneseLunisolarCalendar");
            feature.AddKnownType(@"System.Globalization.JulianCalendar", @"JulianCalendar");
            feature.AddKnownType(@"System.Globalization.KoreanLunisolarCalendar", @"KoreanLunisolarCalendar");
            feature.AddKnownType(@"System.Globalization.PersianCalendar", @"PersianCalendar");
            feature.AddKnownType(@"System.Globalization.CalendricalCalculationsHelper", @"CalendricalCalculationsHelper");
            feature.AddKnownType(@"System.Globalization.TaiwanLunisolarCalendar", @"TaiwanLunisolarCalendar");
            feature.AddKnownType(@"System.Globalization.IdnMapping", @"IdnMapping");
            feature.AddKnownType(@"System.Globalization.JapaneseCalendar", @"JapaneseCalendar");
            feature.AddKnownType(@"System.Globalization.KoreanCalendar", @"KoreanCalendar");
            feature.AddKnownType(@"System.Globalization.RegionInfo", @"RegionInfo");
            feature.AddKnownType(@"System.Globalization.SortKey", @"SortKey");
            feature.AddKnownType(@"System.Globalization.StringInfo", @"StringInfo");
            feature.AddKnownType(@"System.Globalization.TaiwanCalendar", @"TaiwanCalendar");
            feature.AddKnownType(@"System.Globalization.TextElementEnumerator", @"TextElementEnumerator");
            feature.AddKnownType(@"System.Globalization.TextInfo", @"TextInfo");
            feature.AddKnownType(@"System.Globalization.ThaiBuddhistCalendar", @"ThaiBuddhistCalendar");
            feature.AddKnownType(@"System.Globalization.TimeSpanFormat", @"TimeSpanFormat");
            feature.AddKnownType(@"System.Globalization.TimeSpanStyles", @"TimeSpanStyles");
            feature.AddKnownType(@"System.Globalization.TimeSpanParse", @"TimeSpanParse");
            feature.AddKnownType(@"System.Globalization.NumberFormatInfo", @"NumberFormatInfo");
            feature.AddKnownType(@"System.Globalization.NumberStyles", @"NumberStyles");
            feature.AddKnownType(@"System.Globalization.UnicodeCategory", @"UnicodeCategory");
            feature.AddKnownType(@"System.Globalization.CultureData", @"CultureData");
            feature.AddKnownType(@"System.Globalization.HebrewNumberParsingContext", @"HebrewNumberParsingContext");
            feature.AddKnownType(@"System.Globalization.HebrewNumberParsingState", @"HebrewNumberParsingState");
            feature.AddKnownType(@"System.Globalization.HebrewNumber", @"HebrewNumber");
            feature.AddKnownType(@"System.Globalization.SortVersion", @"SortVersion");
            feature.AddKnownType(@"System.Diagnostics.Assert", @"Assert");
            feature.AddKnownType(@"System.Diagnostics.AssertFilter", @"AssertFilter");
            feature.AddKnownType(@"System.Diagnostics.DefaultFilter", @"DefaultFilter");
            feature.AddKnownType(@"System.Diagnostics.AssertFilters", @"AssertFilters");
            feature.AddKnownType(@"System.Diagnostics.ConditionalAttribute", @"ConditionalAttribute");
            feature.AddKnownType(@"System.Diagnostics.Debugger", @"Debugger");
            feature.AddKnownType(@"System.Diagnostics.DebuggerStepThroughAttribute", @"DebuggerStepThroughAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerStepperBoundaryAttribute", @"DebuggerStepperBoundaryAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerHiddenAttribute", @"DebuggerHiddenAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerNonUserCodeAttribute", @"DebuggerNonUserCodeAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggableAttribute", @"DebuggableAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerBrowsableState", @"DebuggerBrowsableState");
            feature.AddKnownType(@"System.Diagnostics.DebuggerBrowsableAttribute", @"DebuggerBrowsableAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerTypeProxyAttribute", @"DebuggerTypeProxyAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerDisplayAttribute", @"DebuggerDisplayAttribute");
            feature.AddKnownType(@"System.Diagnostics.DebuggerVisualizerAttribute", @"DebuggerVisualizerAttribute");
            feature.AddKnownType(@"System.Diagnostics.ICustomDebuggerNotification", @"ICustomDebuggerNotification");
            feature.AddKnownType(@"System.Diagnostics.LogMessageEventHandler", @"LogMessageEventHandler");
            feature.AddKnownType(@"System.Diagnostics.LogSwitchLevelHandler", @"LogSwitchLevelHandler");
            feature.AddKnownType(@"System.Diagnostics.Log", @"Log");
            feature.AddKnownType(@"System.Diagnostics.LoggingLevels", @"LoggingLevels");
            feature.AddKnownType(@"System.Diagnostics.LogSwitch", @"LogSwitch");
            feature.AddKnownType(@"System.Diagnostics.StackFrameHelper", @"StackFrameHelper");
            feature.AddKnownType(@"System.Diagnostics.StackTrace", @"StackTrace");
            feature.AddKnownType(@"System.Diagnostics.StackFrame", @"StackFrame");
            feature.AddKnownType(@"System.Diagnostics.EditAndContinueHelper", @"EditAndContinueHelper");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolBinder", @"ISymbolBinder");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolBinder1", @"ISymbolBinder1");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolDocument", @"ISymbolDocument");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolDocumentWriter", @"ISymbolDocumentWriter");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolMethod", @"ISymbolMethod");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolNamespace", @"ISymbolNamespace");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolReader", @"ISymbolReader");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolScope", @"ISymbolScope");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolVariable", @"ISymbolVariable");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.ISymbolWriter", @"ISymbolWriter");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.SymAddressKind", @"SymAddressKind");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.SymDocumentType", @"SymDocumentType");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.SymLanguageType", @"SymLanguageType");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.SymLanguageVendor", @"SymLanguageVendor");
            feature.AddKnownType(@"System.Diagnostics.SymbolStore.SymbolToken", @"SymbolToken");
            feature.AddKnownType(@"System.Diagnostics.Contracts.PureAttribute", @"PureAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractClassAttribute", @"ContractClassAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractClassForAttribute", @"ContractClassForAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractInvariantMethodAttribute", @"ContractInvariantMethodAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute", @"ContractReferenceAssemblyAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute", @"ContractRuntimeIgnoredAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractVerificationAttribute", @"ContractVerificationAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute", @"ContractPublicPropertyNameAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractArgumentValidatorAttribute", @"ContractArgumentValidatorAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractAbbreviatorAttribute", @"ContractAbbreviatorAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractOptionAttribute", @"ContractOptionAttribute");
            feature.AddKnownType(@"System.Diagnostics.Contracts.Contract", @"Contract");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractFailureKind", @"ContractFailureKind");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractFailedEventArgs", @"ContractFailedEventArgs");
            feature.AddKnownType(@"System.Diagnostics.Contracts.ContractException", @"ContractException");
            feature.AddKnownType(@"System.Diagnostics.Contracts.Internal.ContractHelper", @"ContractHelper");
            feature.AddKnownType(@"System.Diagnostics.CodeAnalysis.SuppressMessageAttribute", @"SuppressMessageAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ActivityTracker", @"ActivityTracker");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventActivityOptions", @"EventActivityOptions");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventDescriptor", @"EventDescriptor");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ControllerCommand", @"ControllerCommand");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventProvider", @"EventProvider");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSource", @"EventSource");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceSettings", @"EventSourceSettings");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventListener", @"EventListener");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventCommandEventArgs", @"EventCommandEventArgs");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceCreatedEventArgs", @"EventSourceCreatedEventArgs");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventWrittenEventArgs", @"EventWrittenEventArgs");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceAttribute", @"EventSourceAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventAttribute", @"EventAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.NonEventAttribute", @"NonEventAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventChannelAttribute", @"EventChannelAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventChannelType", @"EventChannelType");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventCommand", @"EventCommand");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ActivityFilter", @"ActivityFilter");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EtwSession", @"EtwSession");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SessionMask", @"SessionMask");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventDispatcher", @"EventDispatcher");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventManifestOptions", @"EventManifestOptions");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ManifestBuilder", @"ManifestBuilder");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ManifestEnvelope", @"ManifestEnvelope");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceException", @"EventSourceException");
            feature.AddKnownType(@"System.Diagnostics.Tracing.FrameworkEventSource", @"FrameworkEventSource");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventLevel", @"EventLevel");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventTask", @"EventTask");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventOpcode", @"EventOpcode");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventChannel", @"EventChannel");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventKeywords", @"EventKeywords");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ArrayTypeInfo`1", @"ArrayTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingTypeInfo`1", @"TraceLoggingTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingTypeInfo", @"TraceLoggingTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ConcurrentSet`2", @"ConcurrentSet`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ConcurrentSetItem`2", @"ConcurrentSetItem`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DataCollector", @"DataCollector");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EmptyStruct", @"EmptyStruct");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumerableTypeInfo`2", @"EnumerableTypeInfo`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumHelper`1", @"EnumHelper`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventDataAttribute", @"EventDataAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventFieldTags", @"EventFieldTags");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventFieldAttribute", @"EventFieldAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventFieldFormat", @"EventFieldFormat");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventIgnoreAttribute", @"EventIgnoreAttribute");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventPayload", @"EventPayload");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceActivity", @"EventSourceActivity");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSourceOptions", @"EventSourceOptions");
            feature.AddKnownType(@"System.Diagnostics.Tracing.FieldMetadata", @"FieldMetadata");
            feature.AddKnownType(@"System.Diagnostics.Tracing.InvokeTypeInfo`1", @"InvokeTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.NameInfo", @"NameInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventTags", @"EventTags");
            feature.AddKnownType(@"System.Diagnostics.Tracing.PropertyAccessor`1", @"PropertyAccessor`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.NonGenericProperytWriter`1", @"NonGenericProperytWriter`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.StructPropertyWriter`2", @"StructPropertyWriter`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ClassPropertyWriter`2", @"ClassPropertyWriter`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.PropertyAnalysis", @"PropertyAnalysis");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SimpleEventTypes`1", @"SimpleEventTypes`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingEventTypes", @"TraceLoggingEventTypes");
            feature.AddKnownType(@"System.Diagnostics.Tracing.NullTypeInfo`1", @"NullTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.BooleanTypeInfo", @"BooleanTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ByteTypeInfo", @"ByteTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SByteTypeInfo", @"SByteTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int16TypeInfo", @"Int16TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt16TypeInfo", @"UInt16TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int32TypeInfo", @"Int32TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt32TypeInfo", @"UInt32TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int64TypeInfo", @"Int64TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt64TypeInfo", @"UInt64TypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.IntPtrTypeInfo", @"IntPtrTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UIntPtrTypeInfo", @"UIntPtrTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DoubleTypeInfo", @"DoubleTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SingleTypeInfo", @"SingleTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.CharTypeInfo", @"CharTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.BooleanArrayTypeInfo", @"BooleanArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ByteArrayTypeInfo", @"ByteArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SByteArrayTypeInfo", @"SByteArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int16ArrayTypeInfo", @"Int16ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt16ArrayTypeInfo", @"UInt16ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int32ArrayTypeInfo", @"Int32ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt32ArrayTypeInfo", @"UInt32ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Int64ArrayTypeInfo", @"Int64ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UInt64ArrayTypeInfo", @"UInt64ArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.IntPtrArrayTypeInfo", @"IntPtrArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.UIntPtrArrayTypeInfo", @"UIntPtrArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.CharArrayTypeInfo", @"CharArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DoubleArrayTypeInfo", @"DoubleArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.SingleArrayTypeInfo", @"SingleArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumByteTypeInfo`1", @"EnumByteTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumSByteTypeInfo`1", @"EnumSByteTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumInt16TypeInfo`1", @"EnumInt16TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumUInt16TypeInfo`1", @"EnumUInt16TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumInt32TypeInfo`1", @"EnumInt32TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumUInt32TypeInfo`1", @"EnumUInt32TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumInt64TypeInfo`1", @"EnumInt64TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EnumUInt64TypeInfo`1", @"EnumUInt64TypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.StringTypeInfo", @"StringTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.GuidTypeInfo", @"GuidTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.GuidArrayTypeInfo", @"GuidArrayTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DateTimeTypeInfo", @"DateTimeTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DateTimeOffsetTypeInfo", @"DateTimeOffsetTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TimeSpanTypeInfo", @"TimeSpanTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.DecimalTypeInfo", @"DecimalTypeInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.KeyValuePairTypeInfo`2", @"KeyValuePairTypeInfo`2'2");
            feature.AddKnownType(@"System.Diagnostics.Tracing.NullableTypeInfo`1", @"NullableTypeInfo`1'1");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Statics", @"Statics");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingDataCollector", @"TraceLoggingDataCollector");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingDataType", @"TraceLoggingDataType");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TraceLoggingMetadataCollector", @"TraceLoggingMetadataCollector");
            feature.AddKnownType(@"System.Diagnostics.Tracing.TypeAnalysis", @"TypeAnalysis");
            feature.AddKnownType(@"System.Diagnostics.Tracing.Internal.Environment", @"Environment");
            feature.AddKnownType(@"System.Collections.CaseInsensitiveComparer", @"CaseInsensitiveComparer");
            feature.AddKnownType(@"System.Collections.CaseInsensitiveHashCodeProvider", @"CaseInsensitiveHashCodeProvider");
            feature.AddKnownType(@"System.Collections.IHashCodeProvider", @"IHashCodeProvider");
            feature.AddKnownType(@"System.Collections.CollectionBase", @"CollectionBase");
            feature.AddKnownType(@"System.Collections.DictionaryBase", @"DictionaryBase");
            feature.AddKnownType(@"System.Collections.IDictionary", @"IDictionary");
            feature.AddKnownType(@"System.Collections.Queue", @"Queue");
            feature.AddKnownType(@"System.Collections.ArrayList", @"ArrayList");
            feature.AddKnownType(@"System.Collections.BitArray", @"BitArray");
            feature.AddKnownType(@"System.Collections.Stack", @"Stack");
            feature.AddKnownType(@"System.Collections.Comparer", @"Comparer");
            feature.AddKnownType(@"System.Collections.CompatibleComparer", @"CompatibleComparer");
            feature.AddKnownType(@"System.Collections.ListDictionaryInternal", @"ListDictionaryInternal");
            feature.AddKnownType(@"System.Collections.EmptyReadOnlyDictionaryInternal", @"EmptyReadOnlyDictionaryInternal");
            feature.AddKnownType(@"System.Collections.Hashtable", @"Hashtable");
            feature.AddKnownType(@"System.Collections.HashHelpers", @"HashHelpers");
            feature.AddKnownType(@"System.Collections.DictionaryEntry", @"DictionaryEntry");
            feature.AddKnownType(@"System.Collections.IDictionaryEnumerator", @"IDictionaryEnumerator");
            feature.AddKnownType(@"System.Collections.KeyValuePairs", @"KeyValuePairs");
            feature.AddKnownType(@"System.Collections.SortedList", @"SortedList");
            feature.AddKnownType(@"System.Collections.StructuralComparisons", @"StructuralComparisons");
            feature.AddKnownType(@"System.Collections.StructuralEqualityComparer", @"StructuralEqualityComparer");
            feature.AddKnownType(@"System.Collections.StructuralComparer", @"StructuralComparer");
            feature.AddKnownType(@"System.Collections.Concurrent.ConcurrentStack`1", @"ConcurrentStack`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.IProducerConsumerCollection`1", @"IProducerConsumerCollection`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1", @"SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.CDSCollectionETWBCLProvider", @"CDSCollectionETWBCLProvider");
            feature.AddKnownType(@"System.Collections.Concurrent.ConcurrentDictionary`2", @"ConcurrentDictionary`2'2");
            feature.AddKnownType(@"System.Collections.Concurrent.ConcurrentQueue`1", @"ConcurrentQueue`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.VolatileBool", @"VolatileBool");
            feature.AddKnownType(@"System.Collections.Concurrent.Partitioner`1", @"Partitioner`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.OrderablePartitioner`1", @"OrderablePartitioner`1'1");
            feature.AddKnownType(@"System.Collections.Concurrent.EnumerablePartitionerOptions", @"EnumerablePartitionerOptions");
            feature.AddKnownType(@"System.Collections.Concurrent.Partitioner", @"Partitioner");
            feature.AddKnownType(@"System.Collections.ObjectModel.Collection`1", @"Collection`1'1");
            feature.AddKnownType(@"System.Collections.ObjectModel.ReadOnlyDictionaryHelpers", @"ReadOnlyDictionaryHelpers");
            feature.AddKnownType(@"System.Collections.ObjectModel.KeyedCollection`2", @"KeyedCollection`2'2");
            feature.AddKnownType(@"System.Collections.Generic.Comparer`1", @"Comparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.GenericComparer`1", @"GenericComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.NullableComparer`1", @"NullableComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ObjectComparer`1", @"ObjectComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ComparisonComparer`1", @"ComparisonComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.EqualityComparer`1", @"EqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.GenericEqualityComparer`1", @"GenericEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.NullableEqualityComparer`1", @"NullableEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ObjectEqualityComparer`1", @"ObjectEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ByteEqualityComparer", @"ByteEqualityComparer");
            feature.AddKnownType(@"System.Collections.Generic.EnumEqualityComparer`1", @"EnumEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.SByteEnumEqualityComparer`1", @"SByteEnumEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ShortEnumEqualityComparer`1", @"ShortEnumEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.LongEnumEqualityComparer`1", @"LongEnumEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.RandomizedStringEqualityComparer", @"RandomizedStringEqualityComparer");
            feature.AddKnownType(@"System.Collections.Generic.RandomizedObjectEqualityComparer", @"RandomizedObjectEqualityComparer");
            feature.AddKnownType(@"System.Collections.Generic.Mscorlib_CollectionDebugView`1", @"Mscorlib_CollectionDebugView`1'1");
            feature.AddKnownType(@"System.Collections.Generic.Mscorlib_DictionaryKeyCollectionDebugView`2", @"Mscorlib_DictionaryKeyCollectionDebugView`2'2");
            feature.AddKnownType(@"System.Collections.Generic.Mscorlib_DictionaryValueCollectionDebugView`2", @"Mscorlib_DictionaryValueCollectionDebugView`2'2");
            feature.AddKnownType(@"System.Collections.Generic.Mscorlib_DictionaryDebugView`2", @"Mscorlib_DictionaryDebugView`2'2");
            feature.AddKnownType(@"System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2", @"Mscorlib_KeyedCollectionDebugView`2'2");
            feature.AddKnownType(@"System.Collections.Generic.KeyNotFoundException", @"KeyNotFoundException");
            feature.AddKnownType(@"System.Collections.Generic.IArraySortHelper`1", @"IArraySortHelper`1'1");
            feature.AddKnownType(@"System.Collections.Generic.IntrospectiveSortUtilities", @"IntrospectiveSortUtilities");
            feature.AddKnownType(@"System.Collections.Generic.ArraySortHelper`1", @"ArraySortHelper`1'1");
            feature.AddKnownType(@"System.Collections.Generic.GenericArraySortHelper`1", @"GenericArraySortHelper`1'1");
            feature.AddKnownType(@"System.Collections.Generic.IArraySortHelper`2", @"IArraySortHelper`2'2");
            feature.AddKnownType(@"System.Collections.Generic.ArraySortHelper`2", @"ArraySortHelper`2'2");
            feature.AddKnownType(@"System.Collections.Generic.GenericArraySortHelper`2", @"GenericArraySortHelper`2'2");
            feature.AddKnownType(@"System.Threading.AbandonedMutexException", @"AbandonedMutexException");
            feature.AddKnownType(@"System.Threading.AsyncLocal`1", @"AsyncLocal`1'1");
            feature.AddKnownType(@"System.Threading.IAsyncLocal", @"IAsyncLocal");
            feature.AddKnownType(@"System.Threading.AsyncLocalValueChangedArgs`1", @"AsyncLocalValueChangedArgs`1'1");
            feature.AddKnownType(@"System.Threading.AutoResetEvent", @"AutoResetEvent");
            feature.AddKnownType(@"System.Threading.EventWaitHandle", @"EventWaitHandle");
            feature.AddKnownType(@"System.Threading.WaitHandle", @"WaitHandle");
            feature.AddKnownType(@"System.Threading.SendOrPostCallback", @"SendOrPostCallback");
            feature.AddKnownType(@"System.Threading.SynchronizationContextProperties", @"SynchronizationContextProperties");
            feature.AddKnownType(@"System.Threading.WinRTSynchronizationContextFactoryBase", @"WinRTSynchronizationContextFactoryBase");
            feature.AddKnownType(@"System.Threading.SynchronizationContext", @"SynchronizationContext");
            feature.AddKnownType(@"System.Threading.CompressedStackSwitcher", @"CompressedStackSwitcher");
            feature.AddKnownType(@"System.Threading.SafeCompressedStackHandle", @"SafeCompressedStackHandle");
            feature.AddKnownType(@"System.Threading.CompressedStack", @"CompressedStack");
            feature.AddKnownType(@"System.Threading.DomainCompressedStack", @"DomainCompressedStack");
            feature.AddKnownType(@"System.Threading.EventResetMode", @"EventResetMode");
            feature.AddKnownType(@"System.Threading.ContextCallback", @"ContextCallback");
            feature.AddKnownType(@"System.Threading.ExecutionContextSwitcher", @"ExecutionContextSwitcher");
            feature.AddKnownType(@"System.Threading.AsyncFlowControl", @"AsyncFlowControl");
            feature.AddKnownType(@"System.Threading.ExecutionContext", @"ExecutionContext");
            feature.AddKnownType(@"System.Threading.Interlocked", @"Interlocked");
            feature.AddKnownType(@"System.Threading.HostExecutionContextSwitcher", @"HostExecutionContextSwitcher");
            feature.AddKnownType(@"System.Threading.HostExecutionContext", @"HostExecutionContext");
            feature.AddKnownType(@"System.Threading.IUnknownSafeHandle", @"IUnknownSafeHandle");
            feature.AddKnownType(@"System.Threading.HostExecutionContextManager", @"HostExecutionContextManager");
            feature.AddKnownType(@"System.Threading.LockCookie", @"LockCookie");
            feature.AddKnownType(@"System.Threading.LockRecursionException", @"LockRecursionException");
            feature.AddKnownType(@"System.Threading.ManualResetEvent", @"ManualResetEvent");
            feature.AddKnownType(@"System.Threading.Monitor", @"Monitor");
            feature.AddKnownType(@"System.Threading.Mutex", @"Mutex");
            feature.AddKnownType(@"System.Threading.NativeOverlapped", @"NativeOverlapped");
            feature.AddKnownType(@"System.Threading._IOCompletionCallback", @"_IOCompletionCallback");
            feature.AddKnownType(@"System.Threading.OverlappedData", @"OverlappedData");
            feature.AddKnownType(@"System.Threading.Overlapped", @"Overlapped");
            feature.AddKnownType(@"System.Threading.PreAllocatedOverlapped", @"PreAllocatedOverlapped");
            feature.AddKnownType(@"System.Threading.IDeferredDisposable", @"IDeferredDisposable");
            feature.AddKnownType(@"System.Threading.ThreadPoolBoundHandleOverlapped", @"ThreadPoolBoundHandleOverlapped");
            feature.AddKnownType(@"System.Threading.ThreadPoolBoundHandle", @"ThreadPoolBoundHandle");
            feature.AddKnownType(@"System.Threading.DeferredDisposableLifetime`1", @"DeferredDisposableLifetime`1'1");
            feature.AddKnownType(@"System.Threading.ParameterizedThreadStart", @"ParameterizedThreadStart");
            feature.AddKnownType(@"System.Threading.PinnableBufferCache", @"PinnableBufferCache");
            feature.AddKnownType(@"System.Threading.Gen2GcCallback", @"Gen2GcCallback");
            feature.AddKnownType(@"System.Threading.PinnableBufferCacheEventSource", @"PinnableBufferCacheEventSource");
            feature.AddKnownType(@"System.Threading.ReaderWriterLock", @"ReaderWriterLock");
            feature.AddKnownType(@"System.Threading.SemaphoreFullException", @"SemaphoreFullException");
            feature.AddKnownType(@"System.Threading.SynchronizationLockException", @"SynchronizationLockException");
            feature.AddKnownType(@"System.Threading.InternalCrossContextDelegate", @"InternalCrossContextDelegate");
            feature.AddKnownType(@"System.Threading.ThreadHelper", @"ThreadHelper");
            feature.AddKnownType(@"System.Threading.ThreadHandle", @"ThreadHandle");
            feature.AddKnownType(@"System.Threading.Thread", @"Thread");
            feature.AddKnownType(@"System.Runtime.InteropServices._Thread", @"_Thread");
            feature.AddKnownType(@"System.Threading.StackCrawlMark", @"StackCrawlMark");
            feature.AddKnownType(@"System.Threading.ThreadAbortException", @"ThreadAbortException");
            feature.AddKnownType(@"System.Threading.ThreadInterruptedException", @"ThreadInterruptedException");
            feature.AddKnownType(@"System.Threading.ThreadPoolGlobals", @"ThreadPoolGlobals");
            feature.AddKnownType(@"System.Threading.ThreadPoolWorkQueue", @"ThreadPoolWorkQueue");
            feature.AddKnownType(@"System.Threading.ThreadPoolWorkQueueThreadLocals", @"ThreadPoolWorkQueueThreadLocals");
            feature.AddKnownType(@"System.Threading.RegisteredWaitHandleSafe", @"RegisteredWaitHandleSafe");
            feature.AddKnownType(@"System.Threading.RegisteredWaitHandle", @"RegisteredWaitHandle");
            feature.AddKnownType(@"System.Threading.WaitCallback", @"WaitCallback");
            feature.AddKnownType(@"System.Threading.WaitOrTimerCallback", @"WaitOrTimerCallback");
            feature.AddKnownType(@"System.Threading._ThreadPoolWaitCallback", @"_ThreadPoolWaitCallback");
            feature.AddKnownType(@"System.Threading.IThreadPoolWorkItem", @"IThreadPoolWorkItem");
            feature.AddKnownType(@"System.Threading.QueueUserWorkItemCallback", @"QueueUserWorkItemCallback");
            feature.AddKnownType(@"System.Threading._ThreadPoolWaitOrTimerCallback", @"_ThreadPoolWaitOrTimerCallback");
            feature.AddKnownType(@"System.Threading.IOCompletionCallback", @"IOCompletionCallback");
            feature.AddKnownType(@"System.Threading.ThreadPool", @"ThreadPool");
            feature.AddKnownType(@"System.Threading.ThreadPriority", @"ThreadPriority");
            feature.AddKnownType(@"System.Threading.ThreadStart", @"ThreadStart");
            feature.AddKnownType(@"System.Threading.ThreadState", @"ThreadState");
            feature.AddKnownType(@"System.Threading.ThreadStateException", @"ThreadStateException");
            feature.AddKnownType(@"System.Threading.ThreadStartException", @"ThreadStartException");
            feature.AddKnownType(@"System.Threading.Timeout", @"Timeout");
            feature.AddKnownType(@"System.Threading.TimerCallback", @"TimerCallback");
            feature.AddKnownType(@"System.Threading.TimerQueue", @"TimerQueue");
            feature.AddKnownType(@"System.Threading.TimerQueueTimer", @"TimerQueueTimer");
            feature.AddKnownType(@"System.Threading.TimerHolder", @"TimerHolder");
            feature.AddKnownType(@"System.Threading.Timer", @"Timer");
            feature.AddKnownType(@"System.Threading.Volatile", @"Volatile");
            feature.AddKnownType(@"System.Threading.WaitHandleExtensions", @"WaitHandleExtensions");
            feature.AddKnownType(@"System.Threading.WaitHandleCannotBeOpenedException", @"WaitHandleCannotBeOpenedException");
            feature.AddKnownType(@"System.Threading.ApartmentState", @"ApartmentState");
            feature.AddKnownType(@"System.Threading.SpinLock", @"SpinLock");
            feature.AddKnownType(@"System.Threading.SpinWait", @"SpinWait");
            feature.AddKnownType(@"System.Threading.PlatformHelper", @"PlatformHelper");
            feature.AddKnownType(@"System.Threading.TimeoutHelper", @"TimeoutHelper");
            feature.AddKnownType(@"System.Threading.CountdownEvent", @"CountdownEvent");
            feature.AddKnownType(@"System.Threading.CdsSyncEtwBCLProvider", @"CdsSyncEtwBCLProvider");
            feature.AddKnownType(@"System.Threading.LazyThreadSafetyMode", @"LazyThreadSafetyMode");
            feature.AddKnownType(@"System.Threading.LazyInitializer", @"LazyInitializer");
            feature.AddKnownType(@"System.Threading.LazyHelpers`1", @"LazyHelpers`1'1");
            feature.AddKnownType(@"System.Threading.ThreadLocal`1", @"ThreadLocal`1'1");
            feature.AddKnownType(@"System.Threading.SystemThreading_ThreadLocalDebugView`1", @"SystemThreading_ThreadLocalDebugView`1'1");
            feature.AddKnownType(@"System.Threading.SemaphoreSlim", @"SemaphoreSlim");
            feature.AddKnownType(@"System.Threading.ManualResetEventSlim", @"ManualResetEventSlim");
            feature.AddKnownType(@"System.Threading.CancellationTokenRegistration", @"CancellationTokenRegistration");
            feature.AddKnownType(@"System.Threading.CancellationTokenSource", @"CancellationTokenSource");
            feature.AddKnownType(@"System.Threading.CancellationCallbackCoreWorkArguments", @"CancellationCallbackCoreWorkArguments");
            feature.AddKnownType(@"System.Threading.CancellationCallbackInfo", @"CancellationCallbackInfo");
            feature.AddKnownType(@"System.Threading.SparselyPopulatedArray`1", @"SparselyPopulatedArray`1'1");
            feature.AddKnownType(@"System.Threading.SparselyPopulatedArrayAddInfo`1", @"SparselyPopulatedArrayAddInfo`1'1");
            feature.AddKnownType(@"System.Threading.SparselyPopulatedArrayFragment`1", @"SparselyPopulatedArrayFragment`1'1");
            feature.AddKnownType(@"System.Threading.CancellationToken", @"CancellationToken");
            feature.AddKnownType(@"System.Threading.Tasks.Task`1", @"Task`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.Task", @"Task");
            feature.AddKnownType(@"System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1", @"SystemThreadingTasks_FutureDebugView`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.TaskFactory`1", @"TaskFactory`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.GenericDelegateCache`2", @"GenericDelegateCache`2'2");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelOptions", @"ParallelOptions");
            feature.AddKnownType(@"System.Threading.Tasks.Parallel", @"Parallel");
            feature.AddKnownType(@"System.Threading.Tasks.IndexRange", @"IndexRange");
            feature.AddKnownType(@"System.Threading.Tasks.RangeWorker", @"RangeWorker");
            feature.AddKnownType(@"System.Threading.Tasks.RangeManager", @"RangeManager");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopState", @"ParallelLoopState");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopState32", @"ParallelLoopState32");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopState64", @"ParallelLoopState64");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopStateFlags", @"ParallelLoopStateFlags");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopStateFlags32", @"ParallelLoopStateFlags32");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopStateFlags64", @"ParallelLoopStateFlags64");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelLoopResult", @"ParallelLoopResult");
            feature.AddKnownType(@"System.Threading.Tasks.Shared`1", @"Shared`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.TaskStatus", @"TaskStatus");
            feature.AddKnownType(@"System.Threading.Tasks.CompletionActionInvoker", @"CompletionActionInvoker");
            feature.AddKnownType(@"System.Threading.Tasks.SystemThreadingTasks_TaskDebugView", @"SystemThreadingTasks_TaskDebugView");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelForReplicatingTask", @"ParallelForReplicatingTask");
            feature.AddKnownType(@"System.Threading.Tasks.ParallelForReplicaTask", @"ParallelForReplicaTask");
            feature.AddKnownType(@"System.Threading.Tasks.TaskCreationOptions", @"TaskCreationOptions");
            feature.AddKnownType(@"System.Threading.Tasks.InternalTaskOptions", @"InternalTaskOptions");
            feature.AddKnownType(@"System.Threading.Tasks.TaskContinuationOptions", @"TaskContinuationOptions");
            feature.AddKnownType(@"System.Threading.Tasks.StackGuard", @"StackGuard");
            feature.AddKnownType(@"System.Threading.Tasks.VoidTaskResult", @"VoidTaskResult");
            feature.AddKnownType(@"System.Threading.Tasks.ITaskCompletionAction", @"ITaskCompletionAction");
            feature.AddKnownType(@"System.Threading.Tasks.UnwrapPromise`1", @"UnwrapPromise`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.ContinuationTaskFromTask", @"ContinuationTaskFromTask");
            feature.AddKnownType(@"System.Threading.Tasks.ContinuationResultTaskFromTask`1", @"ContinuationResultTaskFromTask`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.ContinuationTaskFromResultTask`1", @"ContinuationTaskFromResultTask`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.ContinuationResultTaskFromResultTask`2", @"ContinuationResultTaskFromResultTask`2'2");
            feature.AddKnownType(@"System.Threading.Tasks.TaskContinuation", @"TaskContinuation");
            feature.AddKnownType(@"System.Threading.Tasks.StandardTaskContinuation", @"StandardTaskContinuation");
            feature.AddKnownType(@"System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation", @"SynchronizationContextAwaitTaskContinuation");
            feature.AddKnownType(@"System.Threading.Tasks.AwaitTaskContinuation", @"AwaitTaskContinuation");
            feature.AddKnownType(@"System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation", @"TaskSchedulerAwaitTaskContinuation");
            feature.AddKnownType(@"System.Threading.Tasks.TaskCanceledException", @"TaskCanceledException");
            feature.AddKnownType(@"System.Threading.Tasks.TaskSchedulerException", @"TaskSchedulerException");
            feature.AddKnownType(@"System.Threading.Tasks.TaskExceptionHolder", @"TaskExceptionHolder");
            feature.AddKnownType(@"System.Threading.Tasks.TaskFactory", @"TaskFactory");
            feature.AddKnownType(@"System.Threading.Tasks.TaskScheduler", @"TaskScheduler");
            feature.AddKnownType(@"System.Threading.Tasks.SynchronizationContextTaskScheduler", @"SynchronizationContextTaskScheduler");
            feature.AddKnownType(@"System.Threading.Tasks.UnobservedTaskExceptionEventArgs", @"UnobservedTaskExceptionEventArgs");
            feature.AddKnownType(@"System.Threading.Tasks.ThreadPoolTaskScheduler", @"ThreadPoolTaskScheduler");
            feature.AddKnownType(@"System.Threading.Tasks.TaskCompletionSource`1", @"TaskCompletionSource`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.CausalityTraceLevel", @"CausalityTraceLevel");
            feature.AddKnownType(@"System.Threading.Tasks.AsyncCausalityStatus", @"AsyncCausalityStatus");
            feature.AddKnownType(@"System.Threading.Tasks.CausalityRelation", @"CausalityRelation");
            feature.AddKnownType(@"System.Threading.Tasks.CausalitySynchronousWork", @"CausalitySynchronousWork");
            feature.AddKnownType(@"System.Threading.Tasks.AsyncCausalityTracer", @"AsyncCausalityTracer");
            feature.AddKnownType(@"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair", @"ConcurrentExclusiveSchedulerPair");
            feature.AddKnownType(@"System.Threading.Tasks.IProducerConsumerQueue`1", @"IProducerConsumerQueue`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.MultiProducerMultiConsumerQueue`1", @"MultiProducerMultiConsumerQueue`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.SingleProducerSingleConsumerQueue`1", @"SingleProducerSingleConsumerQueue`1'1");
            feature.AddKnownType(@"System.Threading.Tasks.PaddingHelpers", @"PaddingHelpers");
            feature.AddKnownType(@"System.Threading.Tasks.PaddingFor32", @"PaddingFor32");
            feature.AddKnownType(@"System.Threading.Tasks.TplEtwProvider", @"TplEtwProvider");
            feature.AddKnownType(@"System.Threading.Tasks.BeginEndAwaitableAdapter", @"BeginEndAwaitableAdapter");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ICriticalNotifyCompletion", @"ICriticalNotifyCompletion");
            feature.AddKnownType(@"System.Runtime.CompilerServices.INotifyCompletion", @"INotifyCompletion");
            feature.AddKnownType(@"System.Threading.Tasks.TaskToApm", @"TaskToApm");
            feature.AddKnownType(@"System.StubHelpers.AnsiCharMarshaler", @"AnsiCharMarshaler");
            feature.AddKnownType(@"System.StubHelpers.CSTRMarshaler", @"CSTRMarshaler");
            feature.AddKnownType(@"System.StubHelpers.UTF8Marshaler", @"UTF8Marshaler");
            feature.AddKnownType(@"System.StubHelpers.UTF8BufferMarshaler", @"UTF8BufferMarshaler");
            feature.AddKnownType(@"System.StubHelpers.BSTRMarshaler", @"BSTRMarshaler");
            feature.AddKnownType(@"System.StubHelpers.VBByValStrMarshaler", @"VBByValStrMarshaler");
            feature.AddKnownType(@"System.StubHelpers.AnsiBSTRMarshaler", @"AnsiBSTRMarshaler");
            feature.AddKnownType(@"System.StubHelpers.WSTRBufferMarshaler", @"WSTRBufferMarshaler");
            feature.AddKnownType(@"System.StubHelpers.DateTimeNative", @"DateTimeNative");
            feature.AddKnownType(@"System.StubHelpers.DateTimeOffsetMarshaler", @"DateTimeOffsetMarshaler");
            feature.AddKnownType(@"System.StubHelpers.HStringMarshaler", @"HStringMarshaler");
            feature.AddKnownType(@"System.StubHelpers.ObjectMarshaler", @"ObjectMarshaler");
            feature.AddKnownType(@"System.StubHelpers.ValueClassMarshaler", @"ValueClassMarshaler");
            feature.AddKnownType(@"System.StubHelpers.DateMarshaler", @"DateMarshaler");
            feature.AddKnownType(@"System.StubHelpers.InterfaceMarshaler", @"InterfaceMarshaler");
            feature.AddKnownType(@"System.StubHelpers.UriMarshaler", @"UriMarshaler");
            feature.AddKnownType(@"System.StubHelpers.EventArgsMarshaler", @"EventArgsMarshaler");
            feature.AddKnownType(@"System.StubHelpers.MngdNativeArrayMarshaler", @"MngdNativeArrayMarshaler");
            feature.AddKnownType(@"System.StubHelpers.MngdSafeArrayMarshaler", @"MngdSafeArrayMarshaler");
            feature.AddKnownType(@"System.StubHelpers.MngdHiddenLengthArrayMarshaler", @"MngdHiddenLengthArrayMarshaler");
            feature.AddKnownType(@"System.StubHelpers.MngdRefCustomMarshaler", @"MngdRefCustomMarshaler");
            feature.AddKnownType(@"System.StubHelpers.AsAnyMarshaler", @"AsAnyMarshaler");
            feature.AddKnownType(@"System.StubHelpers.NullableMarshaler", @"NullableMarshaler");
            feature.AddKnownType(@"System.StubHelpers.TypeNameNative", @"TypeNameNative");
            feature.AddKnownType(@"System.StubHelpers.TypeKind", @"TypeKind");
            feature.AddKnownType(@"System.StubHelpers.WinRTTypeNameConverter", @"WinRTTypeNameConverter");
            feature.AddKnownType(@"System.StubHelpers.SystemTypeMarshaler", @"SystemTypeMarshaler");
            feature.AddKnownType(@"System.StubHelpers.HResultExceptionMarshaler", @"HResultExceptionMarshaler");
            feature.AddKnownType(@"System.StubHelpers.KeyValuePairMarshaler", @"KeyValuePairMarshaler");
            feature.AddKnownType(@"System.StubHelpers.NativeVariant", @"NativeVariant");
            feature.AddKnownType(@"System.StubHelpers.CleanupWorkListElement", @"CleanupWorkListElement");
            feature.AddKnownType(@"System.StubHelpers.CleanupWorkList", @"CleanupWorkList");
            feature.AddKnownType(@"System.StubHelpers.StubHelpers", @"StubHelpers");
            feature.AddKnownType(@"System.Reflection.CerHashtable`2", @"CerHashtable`2'2");
            feature.AddKnownType(@"System.Reflection.__Filters", @"__Filters");
            feature.AddKnownType(@"System.Reflection.AmbiguousMatchException", @"AmbiguousMatchException");
            feature.AddKnownType(@"System.Reflection.ModuleResolveEventHandler", @"ModuleResolveEventHandler");
            feature.AddKnownType(@"System.Reflection.Assembly", @"Assembly");
            feature.AddKnownType(@"System.Runtime.InteropServices._Assembly", @"_Assembly");
            feature.AddKnownType(@"System.Reflection.LoadContext", @"LoadContext");
            feature.AddKnownType(@"System.Reflection.RuntimeAssembly", @"RuntimeAssembly");
            feature.AddKnownType(@"System.Runtime.InteropServices.ICustomQueryInterface", @"ICustomQueryInterface");
            feature.AddKnownType(@"System.Reflection.AssemblyCopyrightAttribute", @"AssemblyCopyrightAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyTrademarkAttribute", @"AssemblyTrademarkAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyProductAttribute", @"AssemblyProductAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyCompanyAttribute", @"AssemblyCompanyAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyDescriptionAttribute", @"AssemblyDescriptionAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyTitleAttribute", @"AssemblyTitleAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyConfigurationAttribute", @"AssemblyConfigurationAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyDefaultAliasAttribute", @"AssemblyDefaultAliasAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyInformationalVersionAttribute", @"AssemblyInformationalVersionAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyFileVersionAttribute", @"AssemblyFileVersionAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyCultureAttribute", @"AssemblyCultureAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyVersionAttribute", @"AssemblyVersionAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyKeyFileAttribute", @"AssemblyKeyFileAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyDelaySignAttribute", @"AssemblyDelaySignAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyAlgorithmIdAttribute", @"AssemblyAlgorithmIdAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyFlagsAttribute", @"AssemblyFlagsAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyMetadataAttribute", @"AssemblyMetadataAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblySignatureKeyAttribute", @"AssemblySignatureKeyAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyKeyNameAttribute", @"AssemblyKeyNameAttribute");
            feature.AddKnownType(@"System.Reflection.AssemblyName", @"AssemblyName");
            feature.AddKnownType(@"System.Runtime.InteropServices._AssemblyName", @"_AssemblyName");
            feature.AddKnownType(@"System.Reflection.AssemblyNameProxy", @"AssemblyNameProxy");
            feature.AddKnownType(@"System.Reflection.AssemblyNameFlags", @"AssemblyNameFlags");
            feature.AddKnownType(@"System.Reflection.AssemblyContentType", @"AssemblyContentType");
            feature.AddKnownType(@"System.Reflection.ProcessorArchitecture", @"ProcessorArchitecture");
            feature.AddKnownType(@"System.Reflection.Associates", @"Associates");
            feature.AddKnownType(@"System.Reflection.CustomAttributeExtensions", @"CustomAttributeExtensions");
            feature.AddKnownType(@"System.Reflection.CustomAttributeFormatException", @"CustomAttributeFormatException");
            feature.AddKnownType(@"System.Reflection.BindingFlags", @"BindingFlags");
            feature.AddKnownType(@"System.Reflection.CallingConventions", @"CallingConventions");
            feature.AddKnownType(@"System.Reflection.ConstructorInfo", @"ConstructorInfo");
            feature.AddKnownType(@"System.Reflection.MethodBase", @"MethodBase");
            feature.AddKnownType(@"System.Runtime.InteropServices._MethodBase", @"_MethodBase");
            feature.AddKnownType(@"System.Runtime.InteropServices._ConstructorInfo", @"_ConstructorInfo");
            feature.AddKnownType(@"System.Reflection.RuntimeConstructorInfo", @"RuntimeConstructorInfo");
            feature.AddKnownType(@"System.Reflection.CustomAttributeData", @"CustomAttributeData");
            feature.AddKnownType(@"System.Reflection.CustomAttributeNamedArgument", @"CustomAttributeNamedArgument");
            feature.AddKnownType(@"System.Reflection.CustomAttributeTypedArgument", @"CustomAttributeTypedArgument");
            feature.AddKnownType(@"System.Reflection.CustomAttributeRecord", @"CustomAttributeRecord");
            feature.AddKnownType(@"System.Reflection.CustomAttributeEncoding", @"CustomAttributeEncoding");
            feature.AddKnownType(@"System.Reflection.CustomAttributeEncodedArgument", @"CustomAttributeEncodedArgument");
            feature.AddKnownType(@"System.Reflection.CustomAttributeNamedParameter", @"CustomAttributeNamedParameter");
            feature.AddKnownType(@"System.Reflection.CustomAttributeCtorParameter", @"CustomAttributeCtorParameter");
            feature.AddKnownType(@"System.Reflection.SecurityContextFrame", @"SecurityContextFrame");
            feature.AddKnownType(@"System.Reflection.CustomAttributeType", @"CustomAttributeType");
            feature.AddKnownType(@"System.Reflection.CustomAttribute", @"CustomAttribute");
            feature.AddKnownType(@"System.Reflection.PseudoCustomAttribute", @"PseudoCustomAttribute");
            feature.AddKnownType(@"System.Reflection.DefaultMemberAttribute", @"DefaultMemberAttribute");
            feature.AddKnownType(@"System.Reflection.EventAttributes", @"EventAttributes");
            feature.AddKnownType(@"System.Reflection.EventInfo", @"EventInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._EventInfo", @"_EventInfo");
            feature.AddKnownType(@"System.Reflection.RuntimeEventInfo", @"RuntimeEventInfo");
            feature.AddKnownType(@"System.Reflection.FieldAttributes", @"FieldAttributes");
            feature.AddKnownType(@"System.Reflection.FieldInfo", @"FieldInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._FieldInfo", @"_FieldInfo");
            feature.AddKnownType(@"System.Reflection.RuntimeFieldInfo", @"RuntimeFieldInfo");
            feature.AddKnownType(@"System.Reflection.RtFieldInfo", @"RtFieldInfo");
            feature.AddKnownType(@"System.Reflection.MdFieldInfo", @"MdFieldInfo");
            feature.AddKnownType(@"System.Reflection.GenericParameterAttributes", @"GenericParameterAttributes");
            feature.AddKnownType(@"System.Reflection.IntrospectionExtensions", @"IntrospectionExtensions");
            feature.AddKnownType(@"System.Reflection.RuntimeReflectionExtensions", @"RuntimeReflectionExtensions");
            feature.AddKnownType(@"System.Reflection.InterfaceMapping", @"InterfaceMapping");
            feature.AddKnownType(@"System.Reflection.InvalidFilterCriteriaException", @"InvalidFilterCriteriaException");
            feature.AddKnownType(@"System.Reflection.LoaderAllocatorScout", @"LoaderAllocatorScout");
            feature.AddKnownType(@"System.Reflection.LoaderAllocator", @"LoaderAllocator");
            feature.AddKnownType(@"System.Reflection.ManifestResourceInfo", @"ManifestResourceInfo");
            feature.AddKnownType(@"System.Reflection.ResourceLocation", @"ResourceLocation");
            feature.AddKnownType(@"System.Reflection.MdConstant", @"MdConstant");
            feature.AddKnownType(@"System.Reflection.CorElementType", @"CorElementType");
            feature.AddKnownType(@"System.Reflection.MdSigCallingConvention", @"MdSigCallingConvention");
            feature.AddKnownType(@"System.Reflection.PInvokeAttributes", @"PInvokeAttributes");
            feature.AddKnownType(@"System.Reflection.MethodSemanticsAttributes", @"MethodSemanticsAttributes");
            feature.AddKnownType(@"System.Reflection.MetadataTokenType", @"MetadataTokenType");
            feature.AddKnownType(@"System.Reflection.ConstArray", @"ConstArray");
            feature.AddKnownType(@"System.Reflection.MetadataToken", @"MetadataToken");
            feature.AddKnownType(@"System.Reflection.MetadataEnumResult", @"MetadataEnumResult");
            feature.AddKnownType(@"System.Reflection.MetadataImport", @"MetadataImport");
            feature.AddKnownType(@"System.Reflection.MetadataException", @"MetadataException");
            feature.AddKnownType(@"System.Reflection.MemberFilter", @"MemberFilter");
            feature.AddKnownType(@"System.Reflection.MemberInfoSerializationHolder", @"MemberInfoSerializationHolder");
            feature.AddKnownType(@"System.Reflection.MemberTypes", @"MemberTypes");
            feature.AddKnownType(@"System.Reflection.MethodAttributes", @"MethodAttributes");
            feature.AddKnownType(@"System.Reflection.INVOCATION_FLAGS", @"INVOCATION_FLAGS");
            feature.AddKnownType(@"System.Reflection.MethodImplAttributes", @"MethodImplAttributes");
            feature.AddKnownType(@"System.Reflection.MethodInfo", @"MethodInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._MethodInfo", @"_MethodInfo");
            feature.AddKnownType(@"System.Reflection.RuntimeMethodInfo", @"RuntimeMethodInfo");
            feature.AddKnownType(@"System.Reflection.Missing", @"Missing");
            feature.AddKnownType(@"System.Reflection.PortableExecutableKinds", @"PortableExecutableKinds");
            feature.AddKnownType(@"System.Reflection.ImageFileMachine", @"ImageFileMachine");
            feature.AddKnownType(@"System.Reflection.Module", @"Module");
            feature.AddKnownType(@"System.Runtime.InteropServices._Module", @"_Module");
            feature.AddKnownType(@"System.Reflection.RuntimeModule", @"RuntimeModule");
            feature.AddKnownType(@"System.Reflection.ObfuscateAssemblyAttribute", @"ObfuscateAssemblyAttribute");
            feature.AddKnownType(@"System.Reflection.ObfuscationAttribute", @"ObfuscationAttribute");
            feature.AddKnownType(@"System.Reflection.ExceptionHandlingClauseOptions", @"ExceptionHandlingClauseOptions");
            feature.AddKnownType(@"System.Reflection.ExceptionHandlingClause", @"ExceptionHandlingClause");
            feature.AddKnownType(@"System.Reflection.MethodBody", @"MethodBody");
            feature.AddKnownType(@"System.Reflection.LocalVariableInfo", @"LocalVariableInfo");
            feature.AddKnownType(@"System.Reflection.ParameterAttributes", @"ParameterAttributes");
            feature.AddKnownType(@"System.Reflection.ParameterInfo", @"ParameterInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._ParameterInfo", @"_ParameterInfo");
            feature.AddKnownType(@"System.Reflection.RuntimeParameterInfo", @"RuntimeParameterInfo");
            feature.AddKnownType(@"System.Reflection.ParameterModifier", @"ParameterModifier");
            feature.AddKnownType(@"System.Reflection.Pointer", @"Pointer");
            feature.AddKnownType(@"System.Reflection.PropertyAttributes", @"PropertyAttributes");
            feature.AddKnownType(@"System.Reflection.PropertyInfo", @"PropertyInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices._PropertyInfo", @"_PropertyInfo");
            feature.AddKnownType(@"System.Reflection.RuntimePropertyInfo", @"RuntimePropertyInfo");
            feature.AddKnownType(@"System.Reflection.ReflectionContext", @"ReflectionContext");
            feature.AddKnownType(@"System.Reflection.ReflectionTypeLoadException", @"ReflectionTypeLoadException");
            feature.AddKnownType(@"System.Reflection.ResourceAttributes", @"ResourceAttributes");
            feature.AddKnownType(@"System.Reflection.StrongNameKeyPair", @"StrongNameKeyPair");
            feature.AddKnownType(@"System.Reflection.TargetException", @"TargetException");
            feature.AddKnownType(@"System.Reflection.TargetInvocationException", @"TargetInvocationException");
            feature.AddKnownType(@"System.Reflection.TargetParameterCountException", @"TargetParameterCountException");
            feature.AddKnownType(@"System.Reflection.TypeAttributes", @"TypeAttributes");
            feature.AddKnownType(@"System.Reflection.TypeDelegator", @"TypeDelegator");
            feature.AddKnownType(@"System.Reflection.TypeFilter", @"TypeFilter");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicAssemblyFlags", @"DynamicAssemblyFlags");
            feature.AddKnownType(@"System.Reflection.Emit.InternalAssemblyBuilder", @"InternalAssemblyBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.AssemblyBuilder", @"AssemblyBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._AssemblyBuilder", @"_AssemblyBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.AssemblyBuilderData", @"AssemblyBuilderData");
            feature.AddKnownType(@"System.Reflection.Emit.ResWriterData", @"ResWriterData");
            feature.AddKnownType(@"System.Reflection.Emit.NativeVersionInfo", @"NativeVersionInfo");
            feature.AddKnownType(@"System.Reflection.Emit.AssemblyBuilderAccess", @"AssemblyBuilderAccess");
            feature.AddKnownType(@"System.Reflection.Emit.TypeNameBuilder", @"TypeNameBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.ConstructorBuilder", @"ConstructorBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._ConstructorBuilder", @"_ConstructorBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicILGenerator", @"DynamicILGenerator");
            feature.AddKnownType(@"System.Reflection.Emit.ILGenerator", @"ILGenerator");
            feature.AddKnownType(@"System.Runtime.InteropServices._ILGenerator", @"_ILGenerator");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicResolver", @"DynamicResolver");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicILInfo", @"DynamicILInfo");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicScope", @"DynamicScope");
            feature.AddKnownType(@"System.Reflection.Emit.GenericMethodInfo", @"GenericMethodInfo");
            feature.AddKnownType(@"System.Reflection.Emit.GenericFieldInfo", @"GenericFieldInfo");
            feature.AddKnownType(@"System.Reflection.Emit.VarArgMethod", @"VarArgMethod");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicMethod", @"DynamicMethod");
            feature.AddKnownType(@"System.Reflection.Emit.EventBuilder", @"EventBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._EventBuilder", @"_EventBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.EventToken", @"EventToken");
            feature.AddKnownType(@"System.Reflection.Emit.FieldBuilder", @"FieldBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._FieldBuilder", @"_FieldBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.FieldToken", @"FieldToken");
            feature.AddKnownType(@"System.Reflection.Emit.__FixupData", @"__FixupData");
            feature.AddKnownType(@"System.Reflection.Emit.__ExceptionInfo", @"__ExceptionInfo");
            feature.AddKnownType(@"System.Reflection.Emit.ScopeAction", @"ScopeAction");
            feature.AddKnownType(@"System.Reflection.Emit.ScopeTree", @"ScopeTree");
            feature.AddKnownType(@"System.Reflection.Emit.LineNumberInfo", @"LineNumberInfo");
            feature.AddKnownType(@"System.Reflection.Emit.REDocument", @"REDocument");
            feature.AddKnownType(@"System.Reflection.Emit.Label", @"Label");
            feature.AddKnownType(@"System.Reflection.Emit.LocalBuilder", @"LocalBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._LocalBuilder", @"_LocalBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.MethodBuilder", @"MethodBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._MethodBuilder", @"_MethodBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.LocalSymInfo", @"LocalSymInfo");
            feature.AddKnownType(@"System.Reflection.Emit.ExceptionHandler", @"ExceptionHandler");
            feature.AddKnownType(@"System.Reflection.Emit.MethodBuilderInstantiation", @"MethodBuilderInstantiation");
            feature.AddKnownType(@"System.Reflection.Emit.TypeKind", @"TypeKind");
            feature.AddKnownType(@"System.Reflection.Emit.SymbolType", @"SymbolType");
            feature.AddKnownType(@"System.Reflection.Emit.SymbolMethod", @"SymbolMethod");
            feature.AddKnownType(@"System.Reflection.Emit.CustomAttributeBuilder", @"CustomAttributeBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._CustomAttributeBuilder", @"_CustomAttributeBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.MethodRental", @"MethodRental");
            feature.AddKnownType(@"System.Runtime.InteropServices._MethodRental", @"_MethodRental");
            feature.AddKnownType(@"System.Reflection.Emit.MethodToken", @"MethodToken");
            feature.AddKnownType(@"System.Reflection.Emit.InternalModuleBuilder", @"InternalModuleBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.ModuleBuilder", @"ModuleBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._ModuleBuilder", @"_ModuleBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.ModuleBuilderData", @"ModuleBuilderData");
            feature.AddKnownType(@"System.Reflection.Emit.PEFileKinds", @"PEFileKinds");
            feature.AddKnownType(@"System.Reflection.Emit.OpCodeValues", @"OpCodeValues");
            feature.AddKnownType(@"System.Reflection.Emit.OpCodes", @"OpCodes");
            feature.AddKnownType(@"System.Reflection.Emit.OpCode", @"OpCode");
            feature.AddKnownType(@"System.Reflection.Emit.OpCodeType", @"OpCodeType");
            feature.AddKnownType(@"System.Reflection.Emit.StackBehaviour", @"StackBehaviour");
            feature.AddKnownType(@"System.Reflection.Emit.OperandType", @"OperandType");
            feature.AddKnownType(@"System.Reflection.Emit.FlowControl", @"FlowControl");
            feature.AddKnownType(@"System.Reflection.Emit.ParameterBuilder", @"ParameterBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._ParameterBuilder", @"_ParameterBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.ParameterToken", @"ParameterToken");
            feature.AddKnownType(@"System.Reflection.Emit.PropertyBuilder", @"PropertyBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._PropertyBuilder", @"_PropertyBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.PropertyToken", @"PropertyToken");
            feature.AddKnownType(@"System.Reflection.Emit.SignatureHelper", @"SignatureHelper");
            feature.AddKnownType(@"System.Runtime.InteropServices._SignatureHelper", @"_SignatureHelper");
            feature.AddKnownType(@"System.Reflection.Emit.SignatureToken", @"SignatureToken");
            feature.AddKnownType(@"System.Reflection.Emit.StringToken", @"StringToken");
            feature.AddKnownType(@"System.Reflection.Emit.PackingSize", @"PackingSize");
            feature.AddKnownType(@"System.Reflection.Emit.TypeBuilder", @"TypeBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._TypeBuilder", @"_TypeBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.TypeBuilderInstantiation", @"TypeBuilderInstantiation");
            feature.AddKnownType(@"System.Reflection.Emit.GenericTypeParameterBuilder", @"GenericTypeParameterBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.EnumBuilder", @"EnumBuilder");
            feature.AddKnownType(@"System.Runtime.InteropServices._EnumBuilder", @"_EnumBuilder");
            feature.AddKnownType(@"System.Reflection.Emit.TypeToken", @"TypeToken");
            feature.AddKnownType(@"System.Reflection.Emit.MethodOnTypeBuilderInstantiation", @"MethodOnTypeBuilderInstantiation");
            feature.AddKnownType(@"System.Reflection.Emit.ConstructorOnTypeBuilderInstantiation", @"ConstructorOnTypeBuilderInstantiation");
            feature.AddKnownType(@"System.Reflection.Emit.FieldOnTypeBuilderInstantiation", @"FieldOnTypeBuilderInstantiation");
            feature.AddKnownType(@"System.Reflection.Emit.UnmanagedMarshal", @"UnmanagedMarshal");
            feature.AddKnownType(@"System.Deployment.Internal.InternalApplicationIdentityHelper", @"InternalApplicationIdentityHelper");
            feature.AddKnownType(@"System.Deployment.Internal.InternalActivationContextHelper", @"InternalActivationContextHelper");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISection", @"ISection");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISectionWithStringKey", @"ISectionWithStringKey");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISectionWithReferenceIdentityKey", @"ISectionWithReferenceIdentityKey");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISectionEntry", @"ISectionEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumUnknown", @"IEnumUnknown");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ICDF", @"ICDF");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.BLOB", @"BLOB");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE", @"IDENTITY_ATTRIBUTE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_ASSEMBLY_STATUS_FLAGS", @"STORE_ASSEMBLY_STATUS_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_ASSEMBLY", @"STORE_ASSEMBLY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_ASSEMBLY_FILE_STATUS_FLAGS", @"STORE_ASSEMBLY_FILE_STATUS_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_ASSEMBLY_FILE", @"STORE_ASSEMBLY_FILE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_CATEGORY", @"STORE_CATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_CATEGORY_SUBCATEGORY", @"STORE_CATEGORY_SUBCATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.STORE_CATEGORY_INSTANCE", @"STORE_CATEGORY_INSTANCE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.CATEGORY", @"CATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.CATEGORY_SUBCATEGORY", @"CATEGORY_SUBCATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.CATEGORY_INSTANCE", @"CATEGORY_INSTANCE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE", @"IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA", @"IEnumSTORE_DEPLOYMENT_METADATA");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreDeploymentMetadataEnumeration", @"StoreDeploymentMetadataEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY", @"IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreDeploymentMetadataPropertyEnumeration", @"StoreDeploymentMetadataPropertyEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY", @"IEnumSTORE_ASSEMBLY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreAssemblyEnumeration", @"StoreAssemblyEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_FILE", @"IEnumSTORE_ASSEMBLY_FILE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreAssemblyFileEnumeration", @"StoreAssemblyFileEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY", @"IEnumSTORE_CATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreCategoryEnumeration", @"StoreCategoryEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_SUBCATEGORY", @"IEnumSTORE_CATEGORY_SUBCATEGORY");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreSubcategoryEnumeration", @"StoreSubcategoryEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_INSTANCE", @"IEnumSTORE_CATEGORY_INSTANCE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreCategoryInstanceEnumeration", @"StoreCategoryInstanceEnumeration");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IReferenceIdentity", @"IReferenceIdentity");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IDefinitionIdentity", @"IDefinitionIdentity");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE", @"IEnumIDENTITY_ATTRIBUTE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumDefinitionIdentity", @"IEnumDefinitionIdentity");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IEnumReferenceIdentity", @"IEnumReferenceIdentity");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IDefinitionAppId", @"IDefinitionAppId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IReferenceAppId", @"IReferenceAppId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_DEFINITION_IDENTITY_TO_TEXT_FLAGS", @"IIDENTITYAUTHORITY_DEFINITION_IDENTITY_TO_TEXT_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_REFERENCE_IDENTITY_TO_TEXT_FLAGS", @"IIDENTITYAUTHORITY_REFERENCE_IDENTITY_TO_TEXT_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_DOES_DEFINITION_MATCH_REFERENCE_FLAGS", @"IIDENTITYAUTHORITY_DOES_DEFINITION_MATCH_REFERENCE_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IIdentityAuthority", @"IIdentityAuthority");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IAPPIDAUTHORITY_ARE_DEFINITIONS_EQUAL_FLAGS", @"IAPPIDAUTHORITY_ARE_DEFINITIONS_EQUAL_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IAPPIDAUTHORITY_ARE_REFERENCES_EQUAL_FLAGS", @"IAPPIDAUTHORITY_ARE_REFERENCES_EQUAL_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IAppIdAuthority", @"IAppIdAuthority");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISTORE_BIND_REFERENCE_TO_ASSEMBLY_FLAGS", @"ISTORE_BIND_REFERENCE_TO_ASSEMBLY_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISTORE_ENUM_ASSEMBLIES_FLAGS", @"ISTORE_ENUM_ASSEMBLIES_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.ISTORE_ENUM_FILES_FLAGS", @"ISTORE_ENUM_FILES_FLAGS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponent", @"StoreOperationStageComponent");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponentFile", @"StoreOperationStageComponentFile");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreApplicationReference", @"StoreApplicationReference");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationPinDeployment", @"StoreOperationPinDeployment");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUnpinDeployment", @"StoreOperationUnpinDeployment");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationInstallDeployment", @"StoreOperationInstallDeployment");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUninstallDeployment", @"StoreOperationUninstallDeployment");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationMetadataProperty", @"StoreOperationMetadataProperty");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationSetDeploymentMetadata", @"StoreOperationSetDeploymentMetadata");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationSetCanonicalizationContext", @"StoreOperationSetCanonicalizationContext");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationScavenge", @"StoreOperationScavenge");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreTransactionOperationType", @"StoreTransactionOperationType");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreTransactionOperation", @"StoreTransactionOperation");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreTransactionData", @"StoreTransactionData");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store", @"Store");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IStore_BindingResult_BoundVersion", @"IStore_BindingResult_BoundVersion");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IStore_BindingResult", @"IStore_BindingResult");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IStore", @"IStore");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreTransaction", @"StoreTransaction");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IManifestParseErrorCallback", @"IManifestParseErrorCallback");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop", @"IsolationInterop");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IManifestInformation", @"IManifestInformation");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IActContext", @"IActContext");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StateManager_RunningState", @"StateManager_RunningState");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IStateManager", @"IStateManager");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMSSECTIONID", @"CMSSECTIONID");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_DEPLOYMENT_FLAG", @"CMS_ASSEMBLY_DEPLOYMENT_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_REFERENCE_FLAG", @"CMS_ASSEMBLY_REFERENCE_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG", @"CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_FILE_FLAG", @"CMS_FILE_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_ENTRY_POINT_FLAG", @"CMS_ENTRY_POINT_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_COM_SERVER_FLAG", @"CMS_COM_SERVER_FLAG");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_USAGE_PATTERN", @"CMS_USAGE_PATTERN");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_SCHEMA_VERSION", @"CMS_SCHEMA_VERSION");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_FILE_HASH_ALGORITHM", @"CMS_FILE_HASH_ALGORITHM");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_TIME_UNIT_TYPE", @"CMS_TIME_UNIT_TYPE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_FILE_WRITABLE_TYPE", @"CMS_FILE_WRITABLE_TYPE");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_HASH_TRANSFORM", @"CMS_HASH_TRANSFORM");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CMS_HASH_DIGESTMETHOD", @"CMS_HASH_DIGESTMETHOD");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICMS", @"ICMS");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceIdLookupMapEntry", @"MuiResourceIdLookupMapEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceIdLookupMapEntryFieldId", @"MuiResourceIdLookupMapEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IMuiResourceIdLookupMapEntry", @"IMuiResourceIdLookupMapEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdStringEntry", @"MuiResourceTypeIdStringEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdStringEntryFieldId", @"MuiResourceTypeIdStringEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdStringEntry", @"IMuiResourceTypeIdStringEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdIntEntry", @"MuiResourceTypeIdIntEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdIntEntryFieldId", @"MuiResourceTypeIdIntEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdIntEntry", @"IMuiResourceTypeIdIntEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceMapEntry", @"MuiResourceMapEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MuiResourceMapEntryFieldId", @"MuiResourceMapEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IMuiResourceMapEntry", @"IMuiResourceMapEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.HashElementEntry", @"HashElementEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.HashElementEntryFieldId", @"HashElementEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IHashElementEntry", @"IHashElementEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.FileEntry", @"FileEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.FileEntryFieldId", @"FileEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IFileEntry", @"IFileEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.FileAssociationEntry", @"FileAssociationEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.FileAssociationEntryFieldId", @"FileAssociationEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IFileAssociationEntry", @"IFileAssociationEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CategoryMembershipDataEntry", @"CategoryMembershipDataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CategoryMembershipDataEntryFieldId", @"CategoryMembershipDataEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipDataEntry", @"ICategoryMembershipDataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.SubcategoryMembershipEntry", @"SubcategoryMembershipEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.SubcategoryMembershipEntryFieldId", @"SubcategoryMembershipEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ISubcategoryMembershipEntry", @"ISubcategoryMembershipEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CategoryMembershipEntry", @"CategoryMembershipEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CategoryMembershipEntryFieldId", @"CategoryMembershipEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipEntry", @"ICategoryMembershipEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.COMServerEntry", @"COMServerEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.COMServerEntryFieldId", @"COMServerEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICOMServerEntry", @"ICOMServerEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ProgIdRedirectionEntry", @"ProgIdRedirectionEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ProgIdRedirectionEntryFieldId", @"ProgIdRedirectionEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IProgIdRedirectionEntry", @"IProgIdRedirectionEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CLRSurrogateEntry", @"CLRSurrogateEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CLRSurrogateEntryFieldId", @"CLRSurrogateEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICLRSurrogateEntry", @"ICLRSurrogateEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry", @"AssemblyReferenceDependentAssemblyEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntryFieldId", @"AssemblyReferenceDependentAssemblyEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry", @"IAssemblyReferenceDependentAssemblyEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry", @"AssemblyReferenceEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntryFieldId", @"AssemblyReferenceEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry", @"IAssemblyReferenceEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.WindowClassEntry", @"WindowClassEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.WindowClassEntryFieldId", @"WindowClassEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IWindowClassEntry", @"IWindowClassEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ResourceTableMappingEntry", @"ResourceTableMappingEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ResourceTableMappingEntryFieldId", @"ResourceTableMappingEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IResourceTableMappingEntry", @"IResourceTableMappingEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.EntryPointEntry", @"EntryPointEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.EntryPointEntryFieldId", @"EntryPointEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IEntryPointEntry", @"IEntryPointEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.PermissionSetEntry", @"PermissionSetEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.PermissionSetEntryFieldId", @"PermissionSetEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IPermissionSetEntry", @"IPermissionSetEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyRequestEntry", @"AssemblyRequestEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.AssemblyRequestEntryFieldId", @"AssemblyRequestEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IAssemblyRequestEntry", @"IAssemblyRequestEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DescriptionMetadataEntry", @"DescriptionMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DescriptionMetadataEntryFieldId", @"DescriptionMetadataEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IDescriptionMetadataEntry", @"IDescriptionMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DeploymentMetadataEntry", @"DeploymentMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DeploymentMetadataEntryFieldId", @"DeploymentMetadataEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IDeploymentMetadataEntry", @"IDeploymentMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DependentOSMetadataEntry", @"DependentOSMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.DependentOSMetadataEntryFieldId", @"DependentOSMetadataEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IDependentOSMetadataEntry", @"IDependentOSMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworksMetadataEntry", @"CompatibleFrameworksMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworksMetadataEntryFieldId", @"CompatibleFrameworksMetadataEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.ICompatibleFrameworksMetadataEntry", @"ICompatibleFrameworksMetadataEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MetadataSectionEntry", @"MetadataSectionEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.MetadataSectionEntryFieldId", @"MetadataSectionEntryFieldId");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.IMetadataSectionEntry", @"IMetadataSectionEntry");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Manifest.CmsUtils", @"CmsUtils");
            feature.AddKnownType(@"System.Runtime.MemoryFailPoint", @"MemoryFailPoint");
            feature.AddKnownType(@"System.Runtime.GCLargeObjectHeapCompactionMode", @"GCLargeObjectHeapCompactionMode");
            feature.AddKnownType(@"System.Runtime.GCLatencyMode", @"GCLatencyMode");
            feature.AddKnownType(@"System.Runtime.GCSettings", @"GCSettings");
            feature.AddKnownType(@"System.Runtime.AssemblyTargetedPatchBandAttribute", @"AssemblyTargetedPatchBandAttribute");
            feature.AddKnownType(@"System.Runtime.TargetedPatchingOptOutAttribute", @"TargetedPatchingOptOutAttribute");
            feature.AddKnownType(@"System.Runtime.ProfileOptimization", @"ProfileOptimization");
            feature.AddKnownType(@"System.Runtime.DesignerServices.WindowsRuntimeDesignerContext", @"WindowsRuntimeDesignerContext");
            feature.AddKnownType(@"System.Runtime.Versioning.BinaryCompatibility", @"BinaryCompatibility");
            feature.AddKnownType(@"System.Runtime.Versioning.ComponentGuaranteesOptions", @"ComponentGuaranteesOptions");
            feature.AddKnownType(@"System.Runtime.Versioning.ComponentGuaranteesAttribute", @"ComponentGuaranteesAttribute");
            feature.AddKnownType(@"System.Runtime.Versioning.ResourceConsumptionAttribute", @"ResourceConsumptionAttribute");
            feature.AddKnownType(@"System.Runtime.Versioning.ResourceExposureAttribute", @"ResourceExposureAttribute");
            feature.AddKnownType(@"System.Runtime.Versioning.ResourceScope", @"ResourceScope");
            feature.AddKnownType(@"System.Runtime.Versioning.SxSRequirements", @"SxSRequirements");
            feature.AddKnownType(@"System.Runtime.Versioning.VersioningHelper", @"VersioningHelper");
            feature.AddKnownType(@"System.Runtime.Versioning.TargetFrameworkAttribute", @"TargetFrameworkAttribute");
            feature.AddKnownType(@"System.Runtime.Versioning.TargetFrameworkId", @"TargetFrameworkId");
            feature.AddKnownType(@"System.Runtime.Versioning.MultitargetingHelpers", @"MultitargetingHelpers");
            feature.AddKnownType(@"System.Runtime.Versioning.CompatibilitySwitch", @"CompatibilitySwitch");
            feature.AddKnownType(@"System.Runtime.Versioning.NonVersionableAttribute", @"NonVersionableAttribute");
            feature.AddKnownType(@"System.Runtime.ConstrainedExecution.Consistency", @"Consistency");
            feature.AddKnownType(@"System.Runtime.ConstrainedExecution.Cer", @"Cer");
            feature.AddKnownType(@"System.Runtime.ConstrainedExecution.ReliabilityContractAttribute", @"ReliabilityContractAttribute");
            feature.AddKnownType(@"System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute", @"PrePrepareMethodAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.FormatterConverter", @"FormatterConverter");
            feature.AddKnownType(@"System.Runtime.Serialization.IFormatterConverter", @"IFormatterConverter");
            feature.AddKnownType(@"System.Runtime.Serialization.FormatterServices", @"FormatterServices");
            feature.AddKnownType(@"System.Runtime.Serialization.SurrogateForCyclicalReference", @"SurrogateForCyclicalReference");
            feature.AddKnownType(@"System.Runtime.Serialization.ISerializationSurrogate", @"ISerializationSurrogate");
            feature.AddKnownType(@"System.Runtime.Serialization.IFormatter", @"IFormatter");
            feature.AddKnownType(@"System.Runtime.Serialization.ISurrogateSelector", @"ISurrogateSelector");
            feature.AddKnownType(@"System.Runtime.Serialization.MemberHolder", @"MemberHolder");
            feature.AddKnownType(@"System.Runtime.Serialization.OptionalFieldAttribute", @"OptionalFieldAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.OnSerializingAttribute", @"OnSerializingAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.OnSerializedAttribute", @"OnSerializedAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.OnDeserializingAttribute", @"OnDeserializingAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.OnDeserializedAttribute", @"OnDeserializedAttribute");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationBinder", @"SerializationBinder");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationException", @"SerializationException");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationFieldInfo", @"SerializationFieldInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationInfo", @"SerializationInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationEntry", @"SerializationEntry");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationInfoEnumerator", @"SerializationInfoEnumerator");
            feature.AddKnownType(@"System.Runtime.Serialization.StreamingContext", @"StreamingContext");
            feature.AddKnownType(@"System.Runtime.Serialization.StreamingContextStates", @"StreamingContextStates");
            feature.AddKnownType(@"System.Runtime.Serialization.DeserializationEventHandler", @"DeserializationEventHandler");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationEventHandler", @"SerializationEventHandler");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatter", @"Formatter");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectCloneHelper", @"ObjectCloneHelper");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectIDGenerator", @"ObjectIDGenerator");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectManager", @"ObjectManager");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectHolder", @"ObjectHolder");
            feature.AddKnownType(@"System.Runtime.Serialization.FixupHolder", @"FixupHolder");
            feature.AddKnownType(@"System.Runtime.Serialization.FixupHolderList", @"FixupHolderList");
            feature.AddKnownType(@"System.Runtime.Serialization.LongList", @"LongList");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectHolderList", @"ObjectHolderList");
            feature.AddKnownType(@"System.Runtime.Serialization.ObjectHolderListEnumerator", @"ObjectHolderListEnumerator");
            feature.AddKnownType(@"System.Runtime.Serialization.TypeLoadExceptionHolder", @"TypeLoadExceptionHolder");
            feature.AddKnownType(@"System.Runtime.Serialization.SafeSerializationEventArgs", @"SafeSerializationEventArgs");
            feature.AddKnownType(@"System.Runtime.Serialization.ISafeSerializationData", @"ISafeSerializationData");
            feature.AddKnownType(@"System.Runtime.Serialization.SafeSerializationManager", @"SafeSerializationManager");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationObjectManager", @"SerializationObjectManager");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationEvents", @"SerializationEvents");
            feature.AddKnownType(@"System.Runtime.Serialization.SerializationEventsCache", @"SerializationEventsCache");
            feature.AddKnownType(@"System.Runtime.Serialization.SurrogateSelector", @"SurrogateSelector");
            feature.AddKnownType(@"System.Runtime.Serialization.SurrogateKey", @"SurrogateKey");
            feature.AddKnownType(@"System.Runtime.Serialization.SurrogateHashtable", @"SurrogateHashtable");
            feature.AddKnownType(@"System.Runtime.Serialization.ValueTypeFixupInfo", @"ValueTypeFixupInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.FormatterTypeStyle", @"FormatterTypeStyle");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.FormatterAssemblyStyle", @"FormatterAssemblyStyle");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.TypeFilterLevel", @"TypeFilterLevel");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.ISoapMessage", @"ISoapMessage");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.IFieldInfo", @"IFieldInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.InternalRM", @"InternalRM");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.InternalST", @"InternalST");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.SerTrace", @"SerTrace");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.SoapMessage", @"SoapMessage");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.SoapFault", @"SoapFault");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.ServerFault", @"ServerFault");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum", @"BinaryHeaderEnum");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum", @"BinaryTypeEnum");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum", @"BinaryArrayTypeEnum");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE", @"InternalSerializerTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalElementTypeE", @"InternalElementTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE", @"InternalParseTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE", @"InternalObjectTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE", @"InternalObjectPositionE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE", @"InternalArrayTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE", @"InternalMemberTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE", @"InternalMemberValueE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalParseStateE", @"InternalParseStateE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE", @"InternalPrimitiveTypeE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.MessageEnum", @"MessageEnum");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum", @"ValueFixupEnum");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalNameSpaceE", @"InternalNameSpaceE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SoapAttributeType", @"SoapAttributeType");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter", @"BinaryFormatter");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IRemotingFormatter", @"IRemotingFormatter");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.__BinaryParser", @"__BinaryParser");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.__BinaryWriter", @"__BinaryWriter");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectMapInfo", @"ObjectMapInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryConverter", @"BinaryConverter");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.IOUtil", @"IOUtil");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryUtil", @"BinaryUtil");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.IStreamable", @"IStreamable");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo", @"BinaryAssemblyInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SerializationHeaderRecord", @"SerializationHeaderRecord");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryAssembly", @"BinaryAssembly");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainAssembly", @"BinaryCrossAppDomainAssembly");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryObject", @"BinaryObject");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall", @"BinaryMethodCall");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn", @"BinaryMethodReturn");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryObjectString", @"BinaryObjectString");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString", @"BinaryCrossAppDomainString");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainMap", @"BinaryCrossAppDomainMap");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped", @"MemberPrimitiveTyped");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap", @"BinaryObjectWithMap");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped", @"BinaryObjectWithMapTyped");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryArray", @"BinaryArray");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped", @"MemberPrimitiveUnTyped");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.MemberReference", @"MemberReference");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectNull", @"ObjectNull");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.MessageEnd", @"MessageEnd");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectMap", @"ObjectMap");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectProgress", @"ObjectProgress");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ParseRecord", @"ParseRecord");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SerStack", @"SerStack");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SizedArray", @"SizedArray");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.IntSizedArray", @"IntSizedArray");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.NameCache", @"NameCache");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ValueFixup", @"ValueFixup");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.InternalFE", @"InternalFE");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.NameInfo", @"NameInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.PrimitiveArray", @"PrimitiveArray");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectReader", @"ObjectReader");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectWriter", @"ObjectWriter");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.Converter", @"Converter");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo", @"WriteObjectInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo", @"ReadObjectInfo");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit", @"SerObjectInfoInit");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache", @"SerObjectInfoCache");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.TypeInformation", @"TypeInformation");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryMethodCallMessage", @"BinaryMethodCallMessage");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturnMessage", @"BinaryMethodReturnMessage");
            feature.AddKnownType(@"System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute", @"HandleProcessCorruptedStateExceptionsAttribute");
            feature.AddKnownType(@"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs", @"FirstChanceExceptionEventArgs");
            feature.AddKnownType(@"System.Runtime.Remoting.IObjectHandle", @"IObjectHandle");
            feature.AddKnownType(@"System.Runtime.Remoting.__HResults", @"__HResults");
            feature.AddKnownType(@"System.Runtime.Remoting.WellKnownObjectMode", @"WellKnownObjectMode");
            feature.AddKnownType(@"System.Runtime.Remoting.DomainSpecificRemotingData", @"DomainSpecificRemotingData");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingConfigHandler", @"RemotingConfigHandler");
            feature.AddKnownType(@"System.Runtime.Remoting.DelayLoadClientChannelEntry", @"DelayLoadClientChannelEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Identity", @"Identity");
            feature.AddKnownType(@"System.Runtime.Remoting.IdOps", @"IdOps");
            feature.AddKnownType(@"System.Runtime.Remoting.DuplicateIdentityOption", @"DuplicateIdentityOption");
            feature.AddKnownType(@"System.Runtime.Remoting.IdentityHolder", @"IdentityHolder");
            feature.AddKnownType(@"System.Runtime.Remoting.IRemotingTypeInfo", @"IRemotingTypeInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.IChannelInfo", @"IChannelInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.IEnvoyInfo", @"IEnvoyInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.TypeInfo", @"TypeInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.DynamicTypeInfo", @"DynamicTypeInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.ChannelInfo", @"ChannelInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.EnvoyInfo", @"EnvoyInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.ObjRef", @"ObjRef");
            feature.AddKnownType(@"System.Runtime.Remoting.RedirectionProxy", @"RedirectionProxy");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMessageSink", @"IMessageSink");
            feature.AddKnownType(@"System.Runtime.Remoting.ComRedirectionProxy", @"ComRedirectionProxy");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingConfiguration", @"RemotingConfiguration");
            feature.AddKnownType(@"System.Runtime.Remoting.TypeEntry", @"TypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.ActivatedClientTypeEntry", @"ActivatedClientTypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.ActivatedServiceTypeEntry", @"ActivatedServiceTypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.WellKnownClientTypeEntry", @"WellKnownClientTypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.WellKnownServiceTypeEntry", @"WellKnownServiceTypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.RemoteAppEntry", @"RemoteAppEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.CustomErrorsModes", @"CustomErrorsModes");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingException", @"RemotingException");
            feature.AddKnownType(@"System.Runtime.Remoting.ServerException", @"ServerException");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingTimeoutException", @"RemotingTimeoutException");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingServices", @"RemotingServices");
            feature.AddKnownType(@"System.Runtime.Remoting.InternalRemotingServices", @"InternalRemotingServices");
            feature.AddKnownType(@"System.Runtime.Remoting.ServerIdentity", @"ServerIdentity");
            feature.AddKnownType(@"System.Runtime.Remoting.SoapServices", @"SoapServices");
            feature.AddKnownType(@"System.Runtime.Remoting.XmlNamespaceEncoder", @"XmlNamespaceEncoder");
            feature.AddKnownType(@"System.Runtime.Remoting.ObjectHandle", @"ObjectHandle");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.RemotingCachedData", @"RemotingCachedData");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.RemotingFieldCachedData", @"RemotingFieldCachedData");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.RemotingParameterCachedData", @"RemotingParameterCachedData");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.RemotingTypeCachedData", @"RemotingTypeCachedData");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.RemotingMethodCachedData", @"RemotingMethodCachedData");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapOption", @"SoapOption");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.XmlFieldOrderOption", @"XmlFieldOrderOption");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapTypeAttribute", @"SoapTypeAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapAttribute", @"SoapAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapMethodAttribute", @"SoapMethodAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapFieldAttribute", @"SoapFieldAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.SoapParameterAttribute", @"SoapParameterAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapType", @"SoapType");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd", @"ISoapXsd");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime", @"SoapDateTime");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration", @"SoapDuration");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime", @"SoapTime");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate", @"SoapDate");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth", @"SoapYearMonth");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear", @"SoapYear");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay", @"SoapMonthDay");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay", @"SoapDay");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth", @"SoapMonth");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary", @"SoapHexBinary");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary", @"SoapBase64Binary");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger", @"SoapInteger");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger", @"SoapPositiveInteger");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger", @"SoapNonPositiveInteger");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger", @"SoapNonNegativeInteger");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger", @"SoapNegativeInteger");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri", @"SoapAnyUri");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName", @"SoapQName");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation", @"SoapNotation");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString", @"SoapNormalizedString");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken", @"SoapToken");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage", @"SoapLanguage");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName", @"SoapName");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs", @"SoapIdrefs");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities", @"SoapEntities");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken", @"SoapNmtoken");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens", @"SoapNmtokens");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName", @"SoapNcName");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId", @"SoapId");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref", @"SoapIdref");
            feature.AddKnownType(@"System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity", @"SoapEntity");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.ProxyAttribute", @"ProxyAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContextAttribute", @"IContextAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.CallType", @"CallType");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.RealProxyFlags", @"RealProxyFlags");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.MessageData", @"MessageData");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.RealProxy", @"RealProxy");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.RemotingProxy", @"RemotingProxy");
            feature.AddKnownType(@"System.Runtime.Remoting.Proxies.AgileAsyncWorkerItem", @"AgileAsyncWorkerItem");
            feature.AddKnownType(@"System.Runtime.Remoting.Services.EnterpriseServicesHelper", @"EnterpriseServicesHelper");
            feature.AddKnownType(@"System.Runtime.Remoting.Services.ITrackingHandler", @"ITrackingHandler");
            feature.AddKnownType(@"System.Runtime.Remoting.Services.TrackingServices", @"TrackingServices");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.CrossContextDelegate", @"CrossContextDelegate");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.Context", @"Context");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.CallBackHelper", @"CallBackHelper");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.ContextProperty", @"ContextProperty");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContextProperty", @"IContextProperty");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContextPropertyActivator", @"IContextPropertyActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.ContextAttribute", @"ContextAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.DynamicPropertyHolder", @"DynamicPropertyHolder");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.ArrayWithSize", @"ArrayWithSize");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContributeClientContextSink", @"IContributeClientContextSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContributeDynamicSink", @"IContributeDynamicSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContributeEnvoySink", @"IContributeEnvoySink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContributeObjectSink", @"IContributeObjectSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IContributeServerContextSink", @"IContributeServerContextSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IDynamicProperty", @"IDynamicProperty");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.IDynamicMessageSink", @"IDynamicMessageSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.SynchronizationAttribute", @"SynchronizationAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.SynchronizedServerContextSink", @"SynchronizedServerContextSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.InternalSink", @"InternalSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.WorkItem", @"WorkItem");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.SynchronizedClientContextSink", @"SynchronizedClientContextSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.ClientSponsor", @"ClientSponsor");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.ISponsor", @"ISponsor");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.ILease", @"ILease");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.Lease", @"Lease");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LeaseSink", @"LeaseSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LeaseManager", @"LeaseManager");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LeaseState", @"LeaseState");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LifetimeServices", @"LifetimeServices");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LeaseLifeTimeServiceProperty", @"LeaseLifeTimeServiceProperty");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.Perf_Contexts", @"Perf_Contexts");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ChannelServices", @"ChannelServices");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.RemotingProfilerEvent", @"RemotingProfilerEvent");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.RegisteredChannel", @"RegisteredChannel");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.RegisteredChannelList", @"RegisteredChannelList");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ChannelServicesData", @"ChannelServicesData");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ServerAsyncReplyTerminatorSink", @"ServerAsyncReplyTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientChannelSinkStack", @"IClientChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack", @"IClientResponseChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ClientChannelSinkStack", @"ClientChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IServerChannelSinkStack", @"IServerChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack", @"IServerResponseChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ServerChannelSinkStack", @"ServerChannelSinkStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.AsyncMessageHelper", @"AsyncMessageHelper");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.CrossContextChannel", @"CrossContextChannel");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.AsyncWorkItem", @"AsyncWorkItem");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.CrossAppDomainChannel", @"CrossAppDomainChannel");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannel", @"IChannel");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannelSender", @"IChannelSender");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannelReceiver", @"IChannelReceiver");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.CrossAppDomainData", @"CrossAppDomainData");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.CrossAppDomainSink", @"CrossAppDomainSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ADAsyncWorkItem", @"ADAsyncWorkItem");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.CrossAppDomainSerializer", @"CrossAppDomainSerializer");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.DispatchChannelSinkProvider", @"DispatchChannelSinkProvider");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IServerChannelSinkProvider", @"IServerChannelSinkProvider");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.DispatchChannelSink", @"DispatchChannelSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IServerChannelSink", @"IServerChannelSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannelSinkBase", @"IChannelSinkBase");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannelReceiverHook", @"IChannelReceiverHook");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientChannelSinkProvider", @"IClientChannelSinkProvider");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientFormatterSinkProvider", @"IClientFormatterSinkProvider");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IServerFormatterSinkProvider", @"IServerFormatterSinkProvider");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientChannelSink", @"IClientChannelSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ServerProcessing", @"ServerProcessing");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IClientFormatterSink", @"IClientFormatterSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.IChannelDataStore", @"IChannelDataStore");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ChannelDataStore", @"ChannelDataStore");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ITransportHeaders", @"ITransportHeaders");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.TransportHeaders", @"TransportHeaders");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.SinkProviderData", @"SinkProviderData");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties", @"BaseChannelSinkWithProperties");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties", @"BaseChannelObjectWithProperties");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.BaseChannelWithProperties", @"BaseChannelWithProperties");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.DictionaryEnumeratorByKeys", @"DictionaryEnumeratorByKeys");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.AggregateDictionary", @"AggregateDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Channels.ISecurableChannel", @"ISecurableChannel");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.AsyncResult", @"AsyncResult");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IInternalMessage", @"IInternalMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMessage", @"IMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMessageCtrl", @"IMessageCtrl");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMethodMessage", @"IMethodMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMethodCallMessage", @"IMethodCallMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IMethodReturnMessage", @"IMethodReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.Message", @"Message");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ConstructorReturnMessage", @"ConstructorReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ReturnMessage", @"ReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.IConstructionReturnMessage", @"IConstructionReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ConstructorCallMessage", @"ConstructorCallMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.IConstructionCallMessage", @"IConstructionCallMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.CCMDictionary", @"CCMDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageDictionary", @"MessageDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.CRMDictionary", @"CRMDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MCMDictionary", @"MCMDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MRMDictionary", @"MRMDictionary");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageDictionaryEnumerator", @"MessageDictionaryEnumerator");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.StackBasedReturnMessage", @"StackBasedReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MethodCall", @"MethodCall");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ISerializationRootObject", @"ISerializationRootObject");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ConstructionCall", @"ConstructionCall");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MethodResponse", @"MethodResponse");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.SerializationMonkey", @"SerializationMonkey");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ConstructionResponse", @"ConstructionResponse");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.TransitionCall", @"TransitionCall");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ArgMapper", @"ArgMapper");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ErrorMessage", @"ErrorMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.InternalMessageWrapper", @"InternalMessageWrapper");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MethodCallMessageWrapper", @"MethodCallMessageWrapper");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper", @"MethodReturnMessageWrapper");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageSmuggler", @"MessageSmuggler");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.SmuggledObjRef", @"SmuggledObjRef");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.SmuggledMethodCallMessage", @"SmuggledMethodCallMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.SmuggledMethodReturnMessage", @"SmuggledMethodReturnMessage");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.OneWayAttribute", @"OneWayAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageSurrogateFilter", @"MessageSurrogateFilter");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.RemotingSurrogateSelector", @"RemotingSurrogateSelector");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.RemotingSurrogate", @"RemotingSurrogate");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ObjRefSurrogate", @"ObjRefSurrogate");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.SoapMessageSurrogate", @"SoapMessageSurrogate");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageSurrogate", @"MessageSurrogate");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.StackBuilderSink", @"StackBuilderSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.EnvoyTerminatorSink", @"EnvoyTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ClientContextTerminatorSink", @"ClientContextTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.AsyncReplySink", @"AsyncReplySink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ServerContextTerminatorSink", @"ServerContextTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.DisposeSink", @"DisposeSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ServerObjectTerminatorSink", @"ServerObjectTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ClientAsyncReplyTerminatorSink", @"ClientAsyncReplyTerminatorSink");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.Header", @"Header");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.HeaderHandler", @"HeaderHandler");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.CallContext", @"CallContext");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.ILogicalThreadAffinative", @"ILogicalThreadAffinative");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IllogicalCallContext", @"IllogicalCallContext");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.LogicalCallContext", @"LogicalCallContext");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.CallContextSecurityData", @"CallContextSecurityData");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.CallContextRemotingData", @"CallContextRemotingData");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ActivationServices", @"ActivationServices");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.LocalActivator", @"LocalActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.IActivator", @"IActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ActivationListener", @"ActivationListener");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.AppDomainLevelActivator", @"AppDomainLevelActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ContextLevelActivator", @"ContextLevelActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ConstructionLevelActivator", @"ConstructionLevelActivator");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotePropertyHolderAttribute", @"RemotePropertyHolderAttribute");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ActivationAttributeStack", @"ActivationAttributeStack");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.ActivatorLevel", @"ActivatorLevel");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData", @"RemotingXmlConfigFileData");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileParser", @"RemotingXmlConfigFileParser");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.UrlAttribute", @"UrlAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.StringFreezingAttribute", @"StringFreezingAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ContractHelper", @"ContractHelper");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AccessedThroughPropertyAttribute", @"AccessedThroughPropertyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AssemblyAttributesGoHere", @"AssemblyAttributesGoHere");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AssemblyAttributesGoHereS", @"AssemblyAttributesGoHereS");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AssemblyAttributesGoHereM", @"AssemblyAttributesGoHereM");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AssemblyAttributesGoHereSM", @"AssemblyAttributesGoHereSM");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallConvCdecl", @"CallConvCdecl");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallConvStdcall", @"CallConvStdcall");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallConvThiscall", @"CallConvThiscall");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallConvFastcall", @"CallConvFastcall");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeHelpers", @"RuntimeHelpers");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeFeature", @"RuntimeFeature");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CompilerGeneratedAttribute", @"CompilerGeneratedAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CustomConstantAttribute", @"CustomConstantAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DateTimeConstantAttribute", @"DateTimeConstantAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DiscardableAttribute", @"DiscardableAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DecimalConstantAttribute", @"DecimalConstantAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DisablePrivateReflectionAttribute", @"DisablePrivateReflectionAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CompilationRelaxations", @"CompilationRelaxations");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CompilationRelaxationsAttribute", @"CompilationRelaxationsAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CompilerGlobalScopeAttribute", @"CompilerGlobalScopeAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ExtensionAttribute", @"ExtensionAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.FixedBufferAttribute", @"FixedBufferAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IndexerNameAttribute", @"IndexerNameAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.InternalsVisibleToAttribute", @"InternalsVisibleToAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.FriendAccessAllowedAttribute", @"FriendAccessAllowedAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsVolatile", @"IsVolatile");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsByRefLikeAttribute", @"IsByRefLikeAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.MethodImplOptions", @"MethodImplOptions");
            feature.AddKnownType(@"System.Runtime.CompilerServices.MethodCodeType", @"MethodCodeType");
            feature.AddKnownType(@"System.Runtime.CompilerServices.MethodImplAttribute", @"MethodImplAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.FixedAddressValueTypeAttribute", @"FixedAddressValueTypeAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.UnsafeValueTypeAttribute", @"UnsafeValueTypeAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RequiredAttributeAttribute", @"RequiredAttributeAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.LoadHint", @"LoadHint");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DefaultDependencyAttribute", @"DefaultDependencyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DependencyAttribute", @"DependencyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TypeDependencyAttribute", @"TypeDependencyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CompilerMarshalOverride", @"CompilerMarshalOverride");
            feature.AddKnownType(@"System.Runtime.CompilerServices.HasCopySemanticsAttribute", @"HasCopySemanticsAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsBoxed", @"IsBoxed");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsByValue", @"IsByValue");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsConst", @"IsConst");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsExplicitlyDereferenced", @"IsExplicitlyDereferenced");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsImplicitlyDereferenced", @"IsImplicitlyDereferenced");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsJitIntrinsic", @"IsJitIntrinsic");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsLong", @"IsLong");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsPinned", @"IsPinned");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsSignUnspecifiedByte", @"IsSignUnspecifiedByte");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsUdtReturn", @"IsUdtReturn");
            feature.AddKnownType(@"System.Runtime.CompilerServices.StringHandleOnStack", @"StringHandleOnStack");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ObjectHandleOnStack", @"ObjectHandleOnStack");
            feature.AddKnownType(@"System.Runtime.CompilerServices.StackCrawlMarkHandle", @"StackCrawlMarkHandle");
            feature.AddKnownType(@"System.Runtime.CompilerServices.PinningHelper", @"PinningHelper");
            feature.AddKnownType(@"System.Runtime.CompilerServices.JitHelpers", @"JitHelpers");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ScopelessEnumAttribute", @"ScopelessEnumAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.SpecialNameAttribute", @"SpecialNameAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.SuppressMergeCheckAttribute", @"SuppressMergeCheckAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsReadOnlyAttribute", @"IsReadOnlyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IsCopyConstructed", @"IsCopyConstructed");
            feature.AddKnownType(@"System.Runtime.CompilerServices.SuppressIldasmAttribute", @"SuppressIldasmAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.NativeCppClassAttribute", @"NativeCppClassAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DecoratedNameAttribute", @"DecoratedNameAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TypeForwardedToAttribute", @"TypeForwardedToAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TypeForwardedFromAttribute", @"TypeForwardedFromAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ReferenceAssemblyAttribute", @"ReferenceAssemblyAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute", @"RuntimeCompatibilityAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeWrappedException", @"RuntimeWrappedException");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConditionalWeakTable`2", @"ConditionalWeakTable`2'2");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DependentHandle", @"DependentHandle");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallerFilePathAttribute", @"CallerFilePathAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallerLineNumberAttribute", @"CallerLineNumberAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallerMemberNameAttribute", @"CallerMemberNameAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.StateMachineAttribute", @"StateMachineAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IteratorStateMachineAttribute", @"IteratorStateMachineAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncStateMachineAttribute", @"AsyncStateMachineAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncVoidMethodBuilder", @"AsyncVoidMethodBuilder");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncTaskMethodBuilder", @"AsyncTaskMethodBuilder");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", @"AsyncTaskMethodBuilder`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncTaskCache", @"AsyncTaskCache");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncMethodBuilderCore", @"AsyncMethodBuilderCore");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IAsyncStateMachine", @"IAsyncStateMachine");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TaskAwaiter", @"TaskAwaiter");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TaskAwaiter`1", @"TaskAwaiter`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConfiguredTaskAwaitable", @"ConfiguredTaskAwaitable");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1", @"ConfiguredTaskAwaitable`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.YieldAwaitable", @"YieldAwaitable");
            feature.AddKnownType(@"System.Runtime.CompilerServices.FormattableStringFactory", @"FormattableStringFactory");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IDispatchConstantAttribute", @"IDispatchConstantAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IUnknownConstantAttribute", @"IUnknownConstantAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TupleElementNamesAttribute", @"TupleElementNamesAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ArrayWithOffset", @"ArrayWithOffset");
            feature.AddKnownType(@"System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute", @"UnmanagedFunctionPointerAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeIdentifierAttribute", @"TypeIdentifierAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute", @"AllowReversePInvokeCallsAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.DispIdAttribute", @"DispIdAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComInterfaceType", @"ComInterfaceType");
            feature.AddKnownType(@"System.Runtime.InteropServices.InterfaceTypeAttribute", @"InterfaceTypeAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComDefaultInterfaceAttribute", @"ComDefaultInterfaceAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ClassInterfaceType", @"ClassInterfaceType");
            feature.AddKnownType(@"System.Runtime.InteropServices.ClassInterfaceAttribute", @"ClassInterfaceAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComVisibleAttribute", @"ComVisibleAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibImportClassAttribute", @"TypeLibImportClassAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.LCIDConversionAttribute", @"LCIDConversionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComRegisterFunctionAttribute", @"ComRegisterFunctionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComUnregisterFunctionAttribute", @"ComUnregisterFunctionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ProgIdAttribute", @"ProgIdAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ImportedFromTypeLibAttribute", @"ImportedFromTypeLibAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.IDispatchImplType", @"IDispatchImplType");
            feature.AddKnownType(@"System.Runtime.InteropServices.IDispatchImplAttribute", @"IDispatchImplAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComSourceInterfacesAttribute", @"ComSourceInterfacesAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComConversionLossAttribute", @"ComConversionLossAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibTypeFlags", @"TypeLibTypeFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibFuncFlags", @"TypeLibFuncFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibVarFlags", @"TypeLibVarFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibTypeAttribute", @"TypeLibTypeAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibFuncAttribute", @"TypeLibFuncAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibVarAttribute", @"TypeLibVarAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.VarEnum", @"VarEnum");
            feature.AddKnownType(@"System.Runtime.InteropServices.UnmanagedType", @"UnmanagedType");
            feature.AddKnownType(@"System.Runtime.InteropServices.MarshalAsAttribute", @"MarshalAsAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComImportAttribute", @"ComImportAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.GuidAttribute", @"GuidAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.PreserveSigAttribute", @"PreserveSigAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.InAttribute", @"InAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.OutAttribute", @"OutAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.OptionalAttribute", @"OptionalAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.DllImportSearchPath", @"DllImportSearchPath");
            feature.AddKnownType(@"System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute", @"DefaultDllImportSearchPathsAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.DllImportAttribute", @"DllImportAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.StructLayoutAttribute", @"StructLayoutAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.FieldOffsetAttribute", @"FieldOffsetAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComAliasNameAttribute", @"ComAliasNameAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.AutomationProxyAttribute", @"AutomationProxyAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute", @"PrimaryInteropAssemblyAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.CoClassAttribute", @"CoClassAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventInterfaceAttribute", @"ComEventInterfaceAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibVersionAttribute", @"TypeLibVersionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComCompatibleVersionAttribute", @"ComCompatibleVersionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.BestFitMappingAttribute", @"BestFitMappingAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.DefaultCharSetAttribute", @"DefaultCharSetAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute", @"SetWin32ContextInIDispatchAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute", @"ManagedToNativeComInteropStubAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.CallingConvention", @"CallingConvention");
            feature.AddKnownType(@"System.Runtime.InteropServices.CharSet", @"CharSet");
            feature.AddKnownType(@"System.Runtime.InteropServices.COMException", @"COMException");
            feature.AddKnownType(@"System.Runtime.InteropServices.ExternalException", @"ExternalException");
            feature.AddKnownType(@"System.Runtime.InteropServices.GCHandleType", @"GCHandleType");
            feature.AddKnownType(@"System.Runtime.InteropServices.GCHandle", @"GCHandle");
            feature.AddKnownType(@"System.Runtime.InteropServices.GCHandleCookieTable", @"GCHandleCookieTable");
            feature.AddKnownType(@"System.Runtime.InteropServices.HandleRef", @"HandleRef");
            feature.AddKnownType(@"System.Runtime.InteropServices.ICustomMarshaler", @"ICustomMarshaler");
            feature.AddKnownType(@"System.Runtime.InteropServices.InvalidOleVariantTypeException", @"InvalidOleVariantTypeException");
            feature.AddKnownType(@"System.Runtime.InteropServices.LayoutKind", @"LayoutKind");
            feature.AddKnownType(@"System.Runtime.InteropServices.CustomQueryInterfaceMode", @"CustomQueryInterfaceMode");
            feature.AddKnownType(@"System.Runtime.InteropServices.Marshal", @"Marshal");
            feature.AddKnownType(@"System.Runtime.InteropServices.ImporterCallback", @"ImporterCallback");
            feature.AddKnownType(@"System.Runtime.InteropServices.ITypeLibImporterNotifySink", @"ITypeLibImporterNotifySink");
            feature.AddKnownType(@"System.Runtime.InteropServices.MarshalDirectiveException", @"MarshalDirectiveException");
            feature.AddKnownType(@"System.Runtime.InteropServices.PInvokeMap", @"PInvokeMap");
            feature.AddKnownType(@"System.Runtime.InteropServices.RuntimeEnvironment", @"RuntimeEnvironment");
            feature.AddKnownType(@"System.Runtime.InteropServices.SEHException", @"SEHException");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeHeapHandle", @"SafeHeapHandle");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeHeapHandleCache", @"SafeHeapHandleCache");
            feature.AddKnownType(@"System.Runtime.InteropServices.StringBuffer", @"StringBuffer");
            feature.AddKnownType(@"System.Runtime.InteropServices.NativeBuffer", @"NativeBuffer");
            feature.AddKnownType(@"System.Runtime.InteropServices.BStrWrapper", @"BStrWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.CurrencyWrapper", @"CurrencyWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.DispatchWrapper", @"DispatchWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.ErrorWrapper", @"ErrorWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.UnknownWrapper", @"UnknownWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.VariantWrapper", @"VariantWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComMemberType", @"ComMemberType");
            feature.AddKnownType(@"System.Runtime.InteropServices.ExtensibleClassFactory", @"ExtensibleClassFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.ICustomAdapter", @"ICustomAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.ICustomFactory", @"ICustomFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.CustomQueryInterfaceResult", @"CustomQueryInterfaceResult");
            feature.AddKnownType(@"System.Runtime.InteropServices.InvalidComObjectException", @"InvalidComObjectException");
            feature.AddKnownType(@"System.Runtime.InteropServices.AssemblyRegistrationFlags", @"AssemblyRegistrationFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.IRegistrationServices", @"IRegistrationServices");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibImporterFlags", @"TypeLibImporterFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibExporterFlags", @"TypeLibExporterFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.ImporterEventKind", @"ImporterEventKind");
            feature.AddKnownType(@"System.Runtime.InteropServices.ExporterEventKind", @"ExporterEventKind");
            feature.AddKnownType(@"System.Runtime.InteropServices.ITypeLibExporterNotifySink", @"ITypeLibExporterNotifySink");
            feature.AddKnownType(@"System.Runtime.InteropServices.ITypeLibConverter", @"ITypeLibConverter");
            feature.AddKnownType(@"System.Runtime.InteropServices.ITypeLibExporterNameProvider", @"ITypeLibExporterNameProvider");
            feature.AddKnownType(@"System.Runtime.InteropServices.ObjectCreationDelegate", @"ObjectCreationDelegate");
            feature.AddKnownType(@"System.Runtime.InteropServices.RegistrationClassContext", @"RegistrationClassContext");
            feature.AddKnownType(@"System.Runtime.InteropServices.RegistrationConnectionType", @"RegistrationConnectionType");
            feature.AddKnownType(@"System.Runtime.InteropServices.RegistrationServices", @"RegistrationServices");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeArrayRankMismatchException", @"SafeArrayRankMismatchException");
            feature.AddKnownType(@"System.Runtime.InteropServices.SafeArrayTypeMismatchException", @"SafeArrayTypeMismatchException");
            feature.AddKnownType(@"System.Runtime.InteropServices.TypeLibConverter", @"TypeLibConverter");
            feature.AddKnownType(@"System.Runtime.InteropServices.BIND_OPTS", @"BIND_OPTS");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIBindCtx", @"UCOMIBindCtx");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIConnectionPointContainer", @"UCOMIConnectionPointContainer");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIConnectionPoint", @"UCOMIConnectionPoint");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumerable", @"UCOMIEnumerable");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumerator", @"UCOMIEnumerator");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumMoniker", @"UCOMIEnumMoniker");
            feature.AddKnownType(@"System.Runtime.InteropServices.CONNECTDATA", @"CONNECTDATA");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumConnections", @"UCOMIEnumConnections");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumConnectionPoints", @"UCOMIEnumConnectionPoints");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumString", @"UCOMIEnumString");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIEnumVARIANT", @"UCOMIEnumVARIANT");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIExpando", @"UCOMIExpando");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIReflect", @"UCOMIReflect");
            feature.AddKnownType(@"System.Runtime.InteropServices.FILETIME", @"FILETIME");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIMoniker", @"UCOMIMoniker");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIPersistFile", @"UCOMIPersistFile");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIRunningObjectTable", @"UCOMIRunningObjectTable");
            feature.AddKnownType(@"System.Runtime.InteropServices.STATSTG", @"STATSTG");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMIStream", @"UCOMIStream");
            feature.AddKnownType(@"System.Runtime.InteropServices.DESCKIND", @"DESCKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.BINDPTR", @"BINDPTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMITypeComp", @"UCOMITypeComp");
            feature.AddKnownType(@"System.Runtime.InteropServices.TYPEKIND", @"TYPEKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.TYPEFLAGS", @"TYPEFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.IMPLTYPEFLAGS", @"IMPLTYPEFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.TYPEATTR", @"TYPEATTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.FUNCDESC", @"FUNCDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.IDLFLAG", @"IDLFLAG");
            feature.AddKnownType(@"System.Runtime.InteropServices.IDLDESC", @"IDLDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.PARAMFLAG", @"PARAMFLAG");
            feature.AddKnownType(@"System.Runtime.InteropServices.PARAMDESC", @"PARAMDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.TYPEDESC", @"TYPEDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ELEMDESC", @"ELEMDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.VARDESC", @"VARDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.DISPPARAMS", @"DISPPARAMS");
            feature.AddKnownType(@"System.Runtime.InteropServices.EXCEPINFO", @"EXCEPINFO");
            feature.AddKnownType(@"System.Runtime.InteropServices.FUNCKIND", @"FUNCKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.INVOKEKIND", @"INVOKEKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.CALLCONV", @"CALLCONV");
            feature.AddKnownType(@"System.Runtime.InteropServices.FUNCFLAGS", @"FUNCFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.VARFLAGS", @"VARFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMITypeInfo", @"UCOMITypeInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices.SYSKIND", @"SYSKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.LIBFLAGS", @"LIBFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.TYPELIBATTR", @"TYPELIBATTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.UCOMITypeLib", @"UCOMITypeLib");
            feature.AddKnownType(@"System.Runtime.InteropServices.Architecture", @"Architecture");
            feature.AddKnownType(@"System.Runtime.InteropServices.OSPlatform", @"OSPlatform");
            feature.AddKnownType(@"System.Runtime.InteropServices.RuntimeInformation", @"RuntimeInformation");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventsHelper", @"ComEventsHelper");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventsInfo", @"ComEventsInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventsMethod", @"ComEventsMethod");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventsSink", @"ComEventsSink");
            feature.AddKnownType(@"System.Runtime.InteropServices.NativeMethods+IDispatch", @"IDispatch");
            feature.AddKnownType(@"System.Runtime.InteropServices.NativeMethods", @"NativeMethods");
            feature.AddKnownType(@"System.Runtime.InteropServices.Variant", @"Variant");
            feature.AddKnownType(@"System.Runtime.InteropServices.TCEAdapterGen.EventProviderWriter", @"EventProviderWriter");
            feature.AddKnownType(@"System.Runtime.InteropServices.TCEAdapterGen.EventSinkHelperWriter", @"EventSinkHelperWriter");
            feature.AddKnownType(@"System.Runtime.InteropServices.TCEAdapterGen.EventItfInfo", @"EventItfInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices.TCEAdapterGen.NameSpaceExtractor", @"NameSpaceExtractor");
            feature.AddKnownType(@"System.Runtime.InteropServices.TCEAdapterGen.TCEAdapterGenerator", @"TCEAdapterGenerator");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute", @"DefaultInterfaceAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeImportAttribute", @"WindowsRuntimeImportAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute", @"InterfaceImplementedInVersionAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute", @"ReadOnlyArrayAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute", @"WriteOnlyArrayAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute", @"ReturnValueNameAttribute");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ConstantSplittableMap`2", @"ConstantSplittableMap`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IMapView`2", @"IMapView`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IIterable`1", @"IIterable`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", @"IKeyValuePair`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DictionaryKeyCollection`2", @"DictionaryKeyCollection`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DictionaryKeyEnumerator`2", @"DictionaryKeyEnumerator`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DictionaryValueCollection`2", @"DictionaryValueCollection`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DictionaryValueEnumerator`2", @"DictionaryValueEnumerator`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EnumerableToIterableAdapter", @"EnumerableToIterableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EnumerableToBindableIterableAdapter", @"EnumerableToBindableIterableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EnumeratorToIteratorAdapter`1", @"EnumeratorToIteratorAdapter`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IIterator`1", @"IIterator`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IBindableIterator", @"IBindableIterator");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.VectorToListAdapter", @"VectorToListAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.VectorToCollectionAdapter", @"VectorToCollectionAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.VectorViewToReadOnlyCollectionAdapter", @"VectorViewToReadOnlyCollectionAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.MapToDictionaryAdapter", @"MapToDictionaryAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.MapToCollectionAdapter", @"MapToCollectionAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.MapViewToReadOnlyCollectionAdapter", @"MapViewToReadOnlyCollectionAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ListToVectorAdapter", @"ListToVectorAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DictionaryToMapAdapter", @"DictionaryToMapAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.BindableVectorToListAdapter", @"BindableVectorToListAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.BindableVectorToCollectionAdapter", @"BindableVectorToCollectionAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ListToBindableVectorAdapter", @"ListToBindableVectorAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ListToBindableVectorViewAdapter", @"ListToBindableVectorViewAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IBindableVectorView", @"IBindableVectorView");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IBindableIterable", @"IBindableIterable");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken", @"EventRegistrationToken");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1", @"EventRegistrationTokenTable`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IActivationFactory", @"IActivationFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IRestrictedErrorInfo", @"IRestrictedErrorInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IMapViewToIReadOnlyDictionaryAdapter", @"IMapViewToIReadOnlyDictionaryAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReadOnlyDictionaryKeyCollection`2", @"ReadOnlyDictionaryKeyCollection`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReadOnlyDictionaryKeyEnumerator`2", @"ReadOnlyDictionaryKeyEnumerator`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReadOnlyDictionaryValueCollection`2", @"ReadOnlyDictionaryValueCollection`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ReadOnlyDictionaryValueEnumerator`2", @"ReadOnlyDictionaryValueEnumerator`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.Indexer_Get_Delegate`1", @"Indexer_Get_Delegate`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IVectorViewToIReadOnlyListAdapter", @"IVectorViewToIReadOnlyListAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IReadOnlyDictionaryToIMapViewAdapter", @"IReadOnlyDictionaryToIMapViewAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IReadOnlyListToIVectorViewAdapter", @"IReadOnlyListToIVectorViewAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.GetEnumerator_Delegate`1", @"GetEnumerator_Delegate`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IterableToEnumerableAdapter", @"IterableToEnumerableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.BindableIterableToEnumerableAdapter", @"BindableIterableToEnumerableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IteratorToEnumeratorAdapter`1", @"IteratorToEnumeratorAdapter`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IManagedActivationFactory", @"IManagedActivationFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ManagedActivationFactory", @"ManagedActivationFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.HSTRING_HEADER", @"HSTRING_HEADER");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.UnsafeNativeMethods", @"UnsafeNativeMethods");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.PropertyType", @"PropertyType");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal", @"WindowsRuntimeMarshal");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMetadata", @"WindowsRuntimeMetadata");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.NamespaceResolveEventArgs", @"NamespaceResolveEventArgs");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.DesignerNamespaceResolveEventArgs", @"DesignerNamespaceResolveEventArgs");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IClosable", @"IClosable");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IDisposableToIClosableAdapter", @"IDisposableToIClosableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IClosableToIDisposableAdapter", @"IClosableToIDisposableAdapter");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IStringable", @"IStringable");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IStringableHelper", @"IStringableHelper");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.CLRIPropertyValueImpl", @"CLRIPropertyValueImpl");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IPropertyValue", @"IPropertyValue");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.CLRIReferenceImpl`1", @"CLRIReferenceImpl`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IReference`1", @"IReference`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ICustomPropertyProvider", @"ICustomPropertyProvider");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.CLRIReferenceArrayImpl`1", @"CLRIReferenceArrayImpl`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IReferenceArray`1", @"IReferenceArray`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IReferenceFactory", @"IReferenceFactory");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.Point", @"Point");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.Size", @"Size");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.Rect", @"Rect");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsFoundationEventHandler`1", @"WindowsFoundationEventHandler`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ICustomPropertyProviderImpl", @"ICustomPropertyProviderImpl");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.InterfaceForwardingSupport", @"InterfaceForwardingSupport");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IGetProxyTarget", @"IGetProxyTarget");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ICustomPropertyProviderProxy`2", @"ICustomPropertyProviderProxy`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IBindableVector", @"IBindableVector");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ICustomProperty", @"ICustomProperty");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.CustomPropertyImpl", @"CustomPropertyImpl");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IWinRTClassActivator", @"IWinRTClassActivator");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WinRTClassActivator", @"WinRTClassActivator");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferHelper", @"WindowsRuntimeBufferHelper");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IVector`1", @"IVector`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IVector_Raw`1", @"IVector_Raw`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IVectorView`1", @"IVectorView`1'1");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.IMap`2", @"IMap`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.CLRIKeyValuePairImpl`2", @"CLRIKeyValuePairImpl`2'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.Expando.IExpando", @"IExpando");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.BIND_OPTS", @"BIND_OPTS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IBindCtx", @"IBindCtx");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IConnectionPointContainer", @"IConnectionPointContainer");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IConnectionPoint", @"IConnectionPoint");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumerable", @"IEnumerable");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumerator", @"IEnumerator");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumMoniker", @"IEnumMoniker");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.CONNECTDATA", @"CONNECTDATA");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumConnections", @"IEnumConnections");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints", @"IEnumConnectionPoints");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumString", @"IEnumString");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IEnumVARIANT", @"IEnumVARIANT");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IExpando", @"IExpando");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IReflect", @"IReflect");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.FILETIME", @"FILETIME");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IMoniker", @"IMoniker");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IPersistFile", @"IPersistFile");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IRunningObjectTable", @"IRunningObjectTable");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.STATSTG", @"STATSTG");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IStream", @"IStream");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.DESCKIND", @"DESCKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.BINDPTR", @"BINDPTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ITypeComp", @"ITypeComp");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.TYPEKIND", @"TYPEKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.TYPEFLAGS", @"TYPEFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS", @"IMPLTYPEFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.TYPEATTR", @"TYPEATTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.FUNCDESC", @"FUNCDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IDLFLAG", @"IDLFLAG");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.IDLDESC", @"IDLDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.PARAMFLAG", @"PARAMFLAG");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.PARAMDESC", @"PARAMDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.TYPEDESC", @"TYPEDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ELEMDESC", @"ELEMDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.VARKIND", @"VARKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.VARDESC", @"VARDESC");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.DISPPARAMS", @"DISPPARAMS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.EXCEPINFO", @"EXCEPINFO");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.FUNCKIND", @"FUNCKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.INVOKEKIND", @"INVOKEKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.CALLCONV", @"CALLCONV");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.FUNCFLAGS", @"FUNCFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.VARFLAGS", @"VARFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ITypeInfo", @"ITypeInfo");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.SYSKIND", @"SYSKIND");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.LIBFLAGS", @"LIBFLAGS");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.TYPELIBATTR", @"TYPELIBATTR");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ITypeLib", @"ITypeLib");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ITypeLib2", @"ITypeLib2");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ITypeInfo2", @"ITypeInfo2");
            feature.AddKnownType(@"System.Runtime.Hosting.ManifestRunner", @"ManifestRunner");
            feature.AddKnownType(@"System.Runtime.Hosting.ApplicationActivator", @"ApplicationActivator");
            feature.AddKnownType(@"System.Runtime.Hosting.ActivationArguments", @"ActivationArguments");
            feature.AddKnownType(@"System.Text.StringBuilder", @"StringBuilder");
            feature.AddKnownType(@"System.Text.StringBuilderCache", @"StringBuilderCache");
            feature.AddKnownType(@"System.Text.ASCIIEncoding", @"ASCIIEncoding");
            feature.AddKnownType(@"System.Text.Encoding", @"Encoding");
            feature.AddKnownType(@"System.Text.BaseCodePageEncoding", @"BaseCodePageEncoding");
            feature.AddKnownType(@"System.Text.EncodingNLS", @"EncodingNLS");
            feature.AddKnownType(@"System.Text.CodePageEncoding", @"CodePageEncoding");
            feature.AddKnownType(@"System.Text.Decoder", @"Decoder");
            feature.AddKnownType(@"System.Text.DecoderNLS", @"DecoderNLS");
            feature.AddKnownType(@"System.Text.InternalDecoderBestFitFallback", @"InternalDecoderBestFitFallback");
            feature.AddKnownType(@"System.Text.DecoderFallback", @"DecoderFallback");
            feature.AddKnownType(@"System.Text.InternalDecoderBestFitFallbackBuffer", @"InternalDecoderBestFitFallbackBuffer");
            feature.AddKnownType(@"System.Text.DecoderFallbackBuffer", @"DecoderFallbackBuffer");
            feature.AddKnownType(@"System.Text.DecoderExceptionFallback", @"DecoderExceptionFallback");
            feature.AddKnownType(@"System.Text.DecoderExceptionFallbackBuffer", @"DecoderExceptionFallbackBuffer");
            feature.AddKnownType(@"System.Text.DecoderFallbackException", @"DecoderFallbackException");
            feature.AddKnownType(@"System.Text.DecoderReplacementFallback", @"DecoderReplacementFallback");
            feature.AddKnownType(@"System.Text.DecoderReplacementFallbackBuffer", @"DecoderReplacementFallbackBuffer");
            feature.AddKnownType(@"System.Text.Encoder", @"Encoder");
            feature.AddKnownType(@"System.Text.EncoderNLS", @"EncoderNLS");
            feature.AddKnownType(@"System.Text.InternalEncoderBestFitFallback", @"InternalEncoderBestFitFallback");
            feature.AddKnownType(@"System.Text.EncoderFallback", @"EncoderFallback");
            feature.AddKnownType(@"System.Text.InternalEncoderBestFitFallbackBuffer", @"InternalEncoderBestFitFallbackBuffer");
            feature.AddKnownType(@"System.Text.EncoderFallbackBuffer", @"EncoderFallbackBuffer");
            feature.AddKnownType(@"System.Text.EncoderExceptionFallback", @"EncoderExceptionFallback");
            feature.AddKnownType(@"System.Text.EncoderExceptionFallbackBuffer", @"EncoderExceptionFallbackBuffer");
            feature.AddKnownType(@"System.Text.EncoderFallbackException", @"EncoderFallbackException");
            feature.AddKnownType(@"System.Text.EncoderReplacementFallback", @"EncoderReplacementFallback");
            feature.AddKnownType(@"System.Text.EncoderReplacementFallbackBuffer", @"EncoderReplacementFallbackBuffer");
            feature.AddKnownType(@"System.Text.EncodingInfo", @"EncodingInfo");
            feature.AddKnownType(@"System.Text.EncodingProvider", @"EncodingProvider");
            feature.AddKnownType(@"System.Text.ISCIIEncoding", @"ISCIIEncoding");
            feature.AddKnownType(@"System.Text.Latin1Encoding", @"Latin1Encoding");
            feature.AddKnownType(@"System.Text.MLangCodePageEncoding", @"MLangCodePageEncoding");
            feature.AddKnownType(@"System.Text.NormalizationForm", @"NormalizationForm");
            feature.AddKnownType(@"System.Text.ExtendedNormalizationForms", @"ExtendedNormalizationForms");
            feature.AddKnownType(@"System.Text.Normalization", @"Normalization");
            feature.AddKnownType(@"System.Text.DBCSCodePageEncoding", @"DBCSCodePageEncoding");
            feature.AddKnownType(@"System.Text.SBCSCodePageEncoding", @"SBCSCodePageEncoding");
            feature.AddKnownType(@"System.Text.SurrogateEncoder", @"SurrogateEncoder");
            feature.AddKnownType(@"System.Text.UnicodeEncoding", @"UnicodeEncoding");
            feature.AddKnownType(@"System.Text.UTF7Encoding", @"UTF7Encoding");
            feature.AddKnownType(@"System.Text.UTF8Encoding", @"UTF8Encoding");
            feature.AddKnownType(@"System.Text.UTF32Encoding", @"UTF32Encoding");
            feature.AddKnownType(@"System.Text.GB18030Encoding", @"GB18030Encoding");
            feature.AddKnownType(@"System.Text.ISO2022Encoding", @"ISO2022Encoding");
            feature.AddKnownType(@"System.Text.EUCJPEncoding", @"EUCJPEncoding");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SystemTime", @"Microsoft.Win32.SystemTime");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TimeZoneInformation", @"Microsoft.Win32.TimeZoneInformation");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+DynamicTimeZoneInformation", @"Microsoft.Win32.DynamicTimeZoneInformation");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+RegistryTimeZoneInformation", @"Microsoft.Win32.RegistryTimeZoneInformation");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+OSVERSIONINFO", @"Microsoft.Win32.OSVERSIONINFO");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+OSVERSIONINFOEX", @"Microsoft.Win32.OSVERSIONINFOEX");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SYSTEM_INFO", @"Microsoft.Win32.SYSTEM_INFO");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES", @"Microsoft.Win32.SECURITY_ATTRIBUTES");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA", @"Microsoft.Win32.WIN32_FILE_ATTRIBUTE_DATA");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+FILE_TIME", @"Microsoft.Win32.FILE_TIME");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+KERB_S4U_LOGON", @"Microsoft.Win32.KERB_S4U_LOGON");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_OBJECT_ATTRIBUTES", @"Microsoft.Win32.LSA_OBJECT_ATTRIBUTES");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+UNICODE_STRING", @"Microsoft.Win32.UNICODE_STRING");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING", @"Microsoft.Win32.UNICODE_INTPTR_STRING");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_TRANSLATED_NAME", @"Microsoft.Win32.LSA_TRANSLATED_NAME");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_TRANSLATED_SID", @"Microsoft.Win32.LSA_TRANSLATED_SID");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_TRANSLATED_SID2", @"Microsoft.Win32.LSA_TRANSLATED_SID2");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_TRUST_INFORMATION", @"Microsoft.Win32.LSA_TRUST_INFORMATION");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LSA_REFERENCED_DOMAIN_LIST", @"Microsoft.Win32.LSA_REFERENCED_DOMAIN_LIST");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LUID", @"Microsoft.Win32.LUID");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+LUID_AND_ATTRIBUTES", @"Microsoft.Win32.LUID_AND_ATTRIBUTES");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+QUOTA_LIMITS", @"Microsoft.Win32.QUOTA_LIMITS");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SECURITY_LOGON_SESSION_DATA", @"Microsoft.Win32.SECURITY_LOGON_SESSION_DATA");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SID_AND_ATTRIBUTES", @"Microsoft.Win32.SID_AND_ATTRIBUTES");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_GROUPS", @"Microsoft.Win32.TOKEN_GROUPS");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_PRIMARY_GROUP", @"Microsoft.Win32.TOKEN_PRIMARY_GROUP");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_PRIVILEGE", @"Microsoft.Win32.TOKEN_PRIVILEGE");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_SOURCE", @"Microsoft.Win32.TOKEN_SOURCE");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_STATISTICS", @"Microsoft.Win32.TOKEN_STATISTICS");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+TOKEN_USER", @"Microsoft.Win32.TOKEN_USER");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+MEMORYSTATUSEX", @"Microsoft.Win32.MEMORYSTATUSEX");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+MEMORY_BASIC_INFORMATION", @"Microsoft.Win32.MEMORY_BASIC_INFORMATION");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+NlsVersionInfoEx", @"Microsoft.Win32.NlsVersionInfoEx");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+WIN32_FIND_DATA", @"Microsoft.Win32.WIN32_FIND_DATA");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine", @"Microsoft.Win32.ConsoleCtrlHandlerRoutine");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+COORD", @"Microsoft.Win32.COORD");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SMALL_RECT", @"Microsoft.Win32.SMALL_RECT");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO", @"Microsoft.Win32.CONSOLE_SCREEN_BUFFER_INFO");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CONSOLE_CURSOR_INFO", @"Microsoft.Win32.CONSOLE_CURSOR_INFO");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+KeyEventRecord", @"Microsoft.Win32.KeyEventRecord");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+InputRecord", @"Microsoft.Win32.InputRecord");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+Color", @"Microsoft.Win32.Color");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CHAR_INFO", @"Microsoft.Win32.CHAR_INFO");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+USEROBJECTFLAGS", @"Microsoft.Win32.USEROBJECTFLAGS");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+SECURITY_IMPERSONATION_LEVEL", @"Microsoft.Win32.SECURITY_IMPERSONATION_LEVEL");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_SECURITY_ATTRIBUTE_INFORMATION_V1", @"Microsoft.Win32.CLAIM_SECURITY_ATTRIBUTE_INFORMATION_V1");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_SECURITY_ATTRIBUTES_INFORMATION", @"Microsoft.Win32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE", @"Microsoft.Win32.CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE", @"Microsoft.Win32.CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_VALUES_ATTRIBUTE_V1", @"Microsoft.Win32.CLAIM_VALUES_ATTRIBUTE_V1");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+CLAIM_SECURITY_ATTRIBUTE_V1", @"Microsoft.Win32.CLAIM_SECURITY_ATTRIBUTE_V1");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+RTL_OSVERSIONINFOEX", @"Microsoft.Win32.RTL_OSVERSIONINFOEX");
            feature.AddKnownType(@"Microsoft.Win32.Win32Native+ProcessorArchitecture", @"Microsoft.Win32.ProcessorArchitecture");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw", @"Microsoft.Win32.ManifestEtw");
            feature.AddKnownType(@"System.Array+FunctorComparer`1", @"FunctorComparer`1'1");
            feature.AddKnownType(@"System.Exception+__RestrictedErrorObject", @"__RestrictedErrorObject");
            feature.AddKnownType(@"System.Exception+ExceptionMessageKind", @"ExceptionMessageKind");
            feature.AddKnownType(@"System.AppDomainInitializerInfo+ItemInfo", @"ItemInfo");
            feature.AddKnownType(@"System.AppDomainSetup+LoaderInformation", @"LoaderInformation");
            feature.AddKnownType(@"System.ActivationContext+ContextForm", @"ActivationContext.ContextForm");
            feature.AddKnownType(@"System.ActivationContext+ApplicationState", @"ApplicationState");
            feature.AddKnownType(@"System.ActivationContext+ApplicationStateDisposition", @"ApplicationStateDisposition");
            feature.AddKnownType(@"System.Console+ControlKeyState", @"ControlKeyState");
            feature.AddKnownType(@"System.Console+ControlCHooker", @"ControlCHooker");
            feature.AddKnownType(@"System.DefaultBinder+BinderState", @"BinderState");
            feature.AddKnownType(@"System.DelegateSerializationHolder+DelegateEntry", @"DelegateEntry");
            feature.AddKnownType(@"System.Environment+ResourceHelper", @"ResourceHelper");
            feature.AddKnownType(@"System.Environment+SpecialFolderOption", @"Environment.SpecialFolderOption");
            feature.AddKnownType(@"System.Environment+SpecialFolder", @"Environment.SpecialFolder");
            feature.AddKnownType(@"System.Mda+StreamWriterBufferedDataLost", @"StreamWriterBufferedDataLost");
            feature.AddKnownType(@"System.Number+NumberBuffer", @"NumberBuffer");
            feature.AddKnownType(@"System.RuntimeType+MemberListType", @"MemberListType");
            feature.AddKnownType(@"System.RuntimeType+RuntimeTypeCache", @"RuntimeTypeCache");
            feature.AddKnownType(@"System.RuntimeTypeHandle+IntroducedMethodEnumerator", @"IntroducedMethodEnumerator");
            feature.AddKnownType(@"System.Signature+MdSigCallingConvention", @"MdSigCallingConvention");
            feature.AddKnownType(@"System.Resolver+CORINFO_EH_CLAUSE", @"CORINFO_EH_CLAUSE");
            feature.AddKnownType(@"System.TimeZoneInfo+AdjustmentRule", @"TimeZoneInfo.AdjustmentRule");
            feature.AddKnownType(@"System.TimeZoneInfo+TransitionTime", @"TimeZoneInfo.TransitionTime");
            feature.AddKnownType(@"System.Version+ParseFailureKind", @"ParseFailureKind");
            feature.AddKnownType(@"System.Version+VersionResult", @"VersionResult");
            feature.AddKnownType(@"System.DateTimeParse+MatchNumberDelegate", @"MatchNumberDelegate");
            feature.AddKnownType(@"System.DateTimeParse+DTT", @"DTT");
            feature.AddKnownType(@"System.DateTimeParse+TM", @"TM");
            feature.AddKnownType(@"System.DateTimeParse+DS", @"DS");
            feature.AddKnownType(@"System.IO.Directory+SearchData", @"SearchData");
            feature.AddKnownType(@"System.IO.Stream+SynchronousAsyncResult", @"SynchronousAsyncResult");
            feature.AddKnownType(@"System.IO.Stream+SyncStream", @"SyncStream");
            feature.AddKnownType(@"System.IO.TextReader+SyncTextReader", @"SyncTextReader");
            feature.AddKnownType(@"System.IO.TextWriter+SyncTextWriter", @"SyncTextWriter");
            feature.AddKnownType(@"System.Security.PermissionSet+IsSubsetOfType", @"IsSubsetOfType");
            feature.AddKnownType(@"System.Security.SecurityContext+Reader", @"Reader");
            feature.AddKnownType(@"System.Security.SecurityContext+SecurityContextRunData", @"SecurityContextRunData");
            feature.AddKnownType(@"System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode", @"ExceptionFromErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmClass", @"AlgorithmClass");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmType", @"AlgorithmType");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmSubId", @"AlgorithmSubId");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmID", @"AlgorithmID");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+CryptAcquireContextFlags", @"CryptAcquireContextFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ErrorCode", @"ErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+HashProperty", @"HashProperty");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeyGenerationFlags", @"KeyGenerationFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeyProperty", @"KeyProperty");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeySpec", @"KeySpec");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderNames", @"ProviderNames");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderType", @"ProviderType");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+UnsafeNativeMethods", @"UnsafeNativeMethods");
            feature.AddKnownType(@"System.Security.Policy.Evidence+RawEvidenceEnumerator", @"RawEvidenceEnumerator");
            feature.AddKnownType(@"System.Security.Util.Tokenizer+ByteTokenEncoding", @"ByteTokenEncoding");
            feature.AddKnownType(@"System.Security.Util.Tokenizer+StringMaker", @"StringMaker");
            feature.AddKnownType(@"System.Security.Util.Tokenizer+ITokenReader", @"ITokenReader");
            feature.AddKnownType(@"System.Security.Util.Tokenizer+StreamTokenReader", @"StreamTokenReader");
            feature.AddKnownType(@"System.Resources.ResourceManager+CultureNameResourceSetPair", @"CultureNameResourceSetPair");
            feature.AddKnownType(@"System.Resources.ResourceManager+ResourceManagerMediator", @"ResourceManagerMediator");
            feature.AddKnownType(@"System.Resources.ResourceReader+TypeLimitingDeserializationBinder", @"TypeLimitingDeserializationBinder");
            feature.AddKnownType(@"System.Resources.ResourceReader+ResourceEnumerator", @"ResourceEnumerator");
            feature.AddKnownType(@"System.Globalization.CharUnicodeInfo+UnicodeDataHeader", @"UnicodeDataHeader");
            feature.AddKnownType(@"System.Globalization.CharUnicodeInfo+DigitValues", @"DigitValues");
            feature.AddKnownType(@"System.Globalization.HebrewCalendar+__DateBuffer", @"__DateBuffer");
            feature.AddKnownType(@"System.Globalization.UmAlQuraCalendar+DateMapping", @"DateMapping");
            feature.AddKnownType(@"System.Globalization.TimeSpanFormat+Pattern", @"Pattern");
            feature.AddKnownType(@"System.Globalization.TimeSpanFormat+FormatLiterals", @"FormatLiterals");
            feature.AddKnownType(@"System.Globalization.HebrewNumber+HS", @"HS");
            feature.AddKnownType(@"System.Diagnostics.DebuggableAttribute+DebuggingModes", @"DebuggableAttribute.DebuggingModes");
            feature.AddKnownType(@"System.Diagnostics.StackTrace+TraceFormat", @"TraceFormat");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventProvider+EventData", @"EventProvider.EventData");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventProvider+SessionInfo", @"EventProvider.SessionInfo");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventProvider+WriteEventErrorCode", @"EventProvider.WriteEventErrorCode");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSource+EventData", @"EventData");
            feature.AddKnownType(@"System.Diagnostics.Tracing.EventSource+EventMetadata", @"EventMetadata");
            feature.AddKnownType(@"System.Diagnostics.Tracing.ManifestEnvelope+ManifestFormats", @"ManifestEnvelope.ManifestFormats");
            feature.AddKnownType(@"System.Diagnostics.Tracing.FrameworkEventSource+Keywords", @"FrameworkEventSource.Keywords");
            feature.AddKnownType(@"System.Diagnostics.Tracing.FrameworkEventSource+Tasks", @"FrameworkEventSource.Tasks");
            feature.AddKnownType(@"System.Diagnostics.Tracing.FrameworkEventSource+Opcodes", @"FrameworkEventSource.Opcodes");
            feature.AddKnownType(@"System.Collections.Queue+QueueDebugView", @"QueueDebugView");
            feature.AddKnownType(@"System.Collections.ArrayList+ArrayListDebugView", @"ArrayListDebugView");
            feature.AddKnownType(@"System.Collections.Stack+StackDebugView", @"StackDebugView");
            feature.AddKnownType(@"System.Collections.Hashtable+HashtableDebugView", @"HashtableDebugView");
            feature.AddKnownType(@"System.Collections.SortedList+SortedListDebugView", @"SortedListDebugView");
            feature.AddKnownType(@"System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection", @"ReadOnlyDictionary`2'2.KeyCollection'2");
            feature.AddKnownType(@"System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection", @"ReadOnlyDictionary`2'2.ValueCollection'2");
            feature.AddKnownType(@"System.Collections.Generic.Dictionary`2+Enumerator", @"Dictionary`2'2.Enumerator'2");
            feature.AddKnownType(@"System.Collections.Generic.Dictionary`2+KeyCollection", @"Dictionary`2'2.KeyCollection'2");
            feature.AddKnownType(@"System.Collections.Generic.Dictionary`2+ValueCollection", @"Dictionary`2'2.ValueCollection'2");
            feature.AddKnownType(@"System.Collections.Generic.List`1+SynchronizedList", @"SynchronizedList'1");
            feature.AddKnownType(@"System.Collections.Generic.List`1+Enumerator", @"List`1'1.Enumerator'1");
            feature.AddKnownType(@"System.Threading.CompressedStack+CompressedStackRunData", @"CompressedStackRunData");
            feature.AddKnownType(@"System.Threading.ExecutionContext+Reader", @"Reader");
            feature.AddKnownType(@"System.Threading.ExecutionContext+CaptureOptions", @"CaptureOptions");
            feature.AddKnownType(@"System.Threading.Mutex+MutexTryCodeHelper", @"MutexTryCodeHelper");
            feature.AddKnownType(@"System.Threading.Mutex+MutexCleanupInfo", @"MutexCleanupInfo");
            feature.AddKnownType(@"System.Threading.ThreadPoolWorkQueue+SparseArray`1", @"SparseArray`1'1");
            feature.AddKnownType(@"System.Threading.ThreadPoolWorkQueue+WorkStealingQueue", @"WorkStealingQueue");
            feature.AddKnownType(@"System.Threading.ThreadPoolWorkQueue+QueueSegment", @"QueueSegment");
            feature.AddKnownType(@"System.Threading.WaitHandle+OpenExistingResult", @"OpenExistingResult");
            feature.AddKnownType(@"System.Threading.SpinLock+SystemThreading_SpinLockDebugView", @"SystemThreading_SpinLockDebugView");
            feature.AddKnownType(@"System.Threading.Tasks.Parallel+LoopTimer", @"LoopTimer");
            feature.AddKnownType(@"System.Threading.Tasks.Task+ContingentProperties", @"ContingentProperties");
            feature.AddKnownType(@"System.Threading.Tasks.TaskFactory+CompleteOnInvokePromise", @"CompleteOnInvokePromise");
            feature.AddKnownType(@"System.Threading.Tasks.TaskScheduler+SystemThreadingTasks_TaskSchedulerDebugView", @"SystemThreadingTasks_TaskSchedulerDebugView");
            feature.AddKnownType(@"System.Threading.Tasks.TplEtwProvider+ForkJoinOperationType", @"TplEtwProvider.ForkJoinOperationType");
            feature.AddKnownType(@"System.Threading.Tasks.TplEtwProvider+TaskWaitBehavior", @"TplEtwProvider.TaskWaitBehavior");
            feature.AddKnownType(@"System.Threading.Tasks.TplEtwProvider+Tasks", @"TplEtwProvider.Tasks");
            feature.AddKnownType(@"System.Threading.Tasks.TplEtwProvider+Keywords", @"TplEtwProvider.Keywords");
            feature.AddKnownType(@"System.Reflection.Associates+Attributes", @"Attributes");
            feature.AddKnownType(@"System.Reflection.Emit.TypeNameBuilder+Format", @"Format");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicResolver+SecurityControlFlags", @"SecurityControlFlags");
            feature.AddKnownType(@"System.Reflection.Emit.DynamicMethod+RTDynamicMethod", @"RTDynamicMethod");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponent+OpFlags", @"StoreOperationStageComponent.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponent+Disposition", @"StoreOperationStageComponent.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponentFile+OpFlags", @"StoreOperationStageComponentFile.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationStageComponentFile+Disposition", @"StoreOperationStageComponentFile.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreApplicationReference+RefFlags", @"StoreApplicationReference.RefFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationPinDeployment+OpFlags", @"StoreOperationPinDeployment.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationPinDeployment+Disposition", @"StoreOperationPinDeployment.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUnpinDeployment+OpFlags", @"StoreOperationUnpinDeployment.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUnpinDeployment+Disposition", @"StoreOperationUnpinDeployment.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationInstallDeployment+OpFlags", @"StoreOperationInstallDeployment.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationInstallDeployment+Disposition", @"StoreOperationInstallDeployment.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUninstallDeployment+OpFlags", @"StoreOperationUninstallDeployment.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationUninstallDeployment+Disposition", @"StoreOperationUninstallDeployment.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationSetDeploymentMetadata+OpFlags", @"StoreOperationSetDeploymentMetadata.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationSetDeploymentMetadata+Disposition", @"StoreOperationSetDeploymentMetadata.Disposition");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationSetCanonicalizationContext+OpFlags", @"StoreOperationSetCanonicalizationContext.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.StoreOperationScavenge+OpFlags", @"StoreOperationScavenge.OpFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumAssembliesFlags", @"Store.EnumAssembliesFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumAssemblyFilesFlags", @"Store.EnumAssemblyFilesFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumApplicationPrivateFiles", @"Store.EnumApplicationPrivateFiles");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumAssemblyInstallReferenceFlags", @"Store.EnumAssemblyInstallReferenceFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+IPathLock", @"Store.IPathLock");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumCategoriesFlags", @"Store.EnumCategoriesFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumSubcategoriesFlags", @"Store.EnumSubcategoriesFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+EnumCategoryInstancesFlags", @"Store.EnumCategoryInstancesFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.Store+GetPackagePropertyFlags", @"Store.GetPackagePropertyFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop+CreateActContextParameters", @"CreateActContextParameters");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop+CreateActContextParametersSource", @"CreateActContextParametersSource");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop+CreateActContextParametersSourceDefinitionAppid", @"CreateActContextParametersSourceDefinitionAppid");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectReader+TypeNAssembly", @"TypeNAssembly");
            feature.AddKnownType(@"System.Runtime.Serialization.Formatters.Binary.ObjectReader+TopLevelAssemblyTypeResolver", @"TopLevelAssemblyTypeResolver");
            feature.AddKnownType(@"System.Runtime.Remoting.RemotingConfigHandler+RemotingConfigInfo", @"RemotingConfigInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.Contexts.SynchronizedClientContextSink+AsyncReplySink", @"AsyncReplySink");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.Lease+AsyncRenewal", @"AsyncRenewal");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.Lease+SponsorState", @"SponsorState");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.Lease+SponsorStateInfo", @"SponsorStateInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.Lifetime.LeaseManager+SponsorInfo", @"SponsorInfo");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.MessageSmuggler+SerializedArg", @"SerializedArg");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.IllogicalCallContext+Reader", @"Reader");
            feature.AddKnownType(@"System.Runtime.Remoting.Messaging.LogicalCallContext+Reader", @"Reader");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+ChannelEntry", @"ChannelEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+ClientWellKnownEntry", @"ClientWellKnownEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+ContextAttributeEntry", @"ContextAttributeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+InteropXmlElementEntry", @"InteropXmlElementEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+CustomErrorsEntry", @"CustomErrorsEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+InteropXmlTypeEntry", @"InteropXmlTypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+LifetimeEntry", @"LifetimeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+PreLoadEntry", @"PreLoadEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+RemoteAppEntry", @"RemoteAppEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+ServerWellKnownEntry", @"ServerWellKnownEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+TypeEntry", @"TypeEntry");
            feature.AddKnownType(@"System.Runtime.Remoting.Activation.RemotingXmlConfigFileData+SinkProviderEntry", @"SinkProviderEntry");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeHelpers+TryCode", @"RuntimeHelpers.TryCode");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode", @"RuntimeHelpers.CleanupCode");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback", @"ConditionalWeakTable`2'2.CreateValueCallback'2");
            feature.AddKnownType(@"System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner", @"MoveNextRunner");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter", @"ConfiguredTaskAwaitable.ConfiguredTaskAwaiter");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", @"ConfiguredTaskAwaitable`1'1.ConfiguredTaskAwaiter'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter", @"YieldAwaitable.YieldAwaiter");
            feature.AddKnownType(@"System.Runtime.InteropServices.ELEMDESC+DESCUNION", @"ELEMDESC.DESCUNION");
            feature.AddKnownType(@"System.Runtime.InteropServices.VARDESC+DESCUNION", @"VARDESC.DESCUNION");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComEventsMethod+DelegateWrapper", @"DelegateWrapper");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.ConstantSplittableMap`2+IKeyValuePairEnumerator", @"IKeyValuePairEnumerator'2");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.EnumerableToBindableIterableAdapter+NonGenericToGenericEnumerator", @"NonGenericToGenericEnumerator");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+EventRegistrationTokenList", @"EventRegistrationTokenList");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+ManagedEventRegistrationImpl", @"ManagedEventRegistrationImpl");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl", @"NativeOrStaticEventRegistrationImpl");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION", @"ELEMDESC.DESCUNION");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION", @"VARDESC.DESCUNION");
            feature.AddKnownType(@"System.Text.BaseCodePageEncoding+CodePageDataFileHeader", @"CodePageDataFileHeader");
            feature.AddKnownType(@"System.Text.BaseCodePageEncoding+CodePageIndex", @"CodePageIndex");
            feature.AddKnownType(@"System.Text.BaseCodePageEncoding+CodePageHeader", @"CodePageHeader");
            feature.AddKnownType(@"System.Text.CodePageEncoding+Decoder", @"Decoder");
            feature.AddKnownType(@"System.Text.Encoding+DefaultEncoder", @"DefaultEncoder");
            feature.AddKnownType(@"System.Text.Encoding+DefaultDecoder", @"DefaultDecoder");
            feature.AddKnownType(@"System.Text.Encoding+EncodingCharBuffer", @"EncodingCharBuffer");
            feature.AddKnownType(@"System.Text.Encoding+EncodingByteBuffer", @"EncodingByteBuffer");
            feature.AddKnownType(@"System.Text.ISCIIEncoding+ISCIIEncoder", @"ISCIIEncoder");
            feature.AddKnownType(@"System.Text.ISCIIEncoding+ISCIIDecoder", @"ISCIIDecoder");
            feature.AddKnownType(@"System.Text.MLangCodePageEncoding+MLangEncoder", @"MLangEncoder");
            feature.AddKnownType(@"System.Text.MLangCodePageEncoding+MLangDecoder", @"MLangDecoder");
            feature.AddKnownType(@"System.Text.DBCSCodePageEncoding+DBCSDecoder", @"DBCSDecoder");
            feature.AddKnownType(@"System.Text.UTF7Encoding+DecoderUTF7Fallback", @"DecoderUTF7Fallback");
            feature.AddKnownType(@"System.Text.UTF7Encoding+DecoderUTF7FallbackBuffer", @"DecoderUTF7FallbackBuffer");
            feature.AddKnownType(@"System.Text.UTF8Encoding+UTF8EncodingSealed", @"UTF8EncodingSealed");
            feature.AddKnownType(@"System.Text.UTF8Encoding+UTF8Encoder", @"UTF8Encoder");
            feature.AddKnownType(@"System.Text.UTF8Encoding+UTF8Decoder", @"UTF8Decoder");
            feature.AddKnownType(@"System.Text.UTF32Encoding+UTF32Decoder", @"UTF32Decoder");
            feature.AddKnownType(@"System.Text.GB18030Encoding+GB18030Decoder", @"GB18030Decoder");
            feature.AddKnownType(@"System.Text.ISO2022Encoding+ISO2022Modes", @"ISO2022Modes");
            feature.AddKnownType(@"System.Text.ISO2022Encoding+ISO2022Encoder", @"ISO2022Encoder");
            feature.AddKnownType(@"System.Text.ISO2022Encoding+ISO2022Decoder", @"ISO2022Decoder");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+EtwEnableCallback", @"Microsoft.Win32.EtwEnableCallback");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+EVENT_FILTER_DESCRIPTOR", @"Microsoft.Win32.EVENT_FILTER_DESCRIPTOR");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+ActivityControl", @"Microsoft.Win32.ActivityControl");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+EVENT_INFO_CLASS", @"Microsoft.Win32.EVENT_INFO_CLASS");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+TRACE_QUERY_INFO_CLASS", @"Microsoft.Win32.TRACE_QUERY_INFO_CLASS");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+TRACE_GUID_INFO", @"Microsoft.Win32.TRACE_GUID_INFO");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+TRACE_PROVIDER_INSTANCE_INFO", @"Microsoft.Win32.TRACE_PROVIDER_INSTANCE_INFO");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+ManifestEtw+TRACE_ENABLE_INFO", @"Microsoft.Win32.TRACE_ENABLE_INFO");
            feature.AddKnownType(@"System.Environment+ResourceHelper+GetResourceStringUserData", @"GetResourceStringUserData");
            feature.AddKnownType(@"System.RuntimeType+RuntimeTypeCache+CacheType", @"CacheType");
            feature.AddKnownType(@"System.Security.Policy.Evidence+EvidenceLockHolder+LockType", @"EvidenceLockHolder.LockType");
            feature.AddKnownType(@"System.Security.Policy.Evidence+EvidenceEnumerator+Category", @"Category");
            feature.AddKnownType(@"System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator", @"Dictionary`2'2.KeyCollection'2.Enumerator'2");
            feature.AddKnownType(@"System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator", @"Dictionary`2'2.ValueCollection'2.Enumerator'2");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop+CreateActContextParameters+CreateFlags", @"CreateActContextParameters.CreateFlags");
            feature.AddKnownType(@"System.Deployment.Internal.Isolation.IsolationInterop+CreateActContextParametersSource+SourceFlags", @"CreateActContextParametersSource.SourceFlags");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+EventCacheKey", @"EventCacheKey");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+EventCacheKeyEqualityComparer", @"EventCacheKeyEqualityComparer");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+EventRegistrationTokenListWithCount", @"EventRegistrationTokenListWithCount");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+TokenListCount", @"TokenListCount");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+EventCacheEntry", @"EventCacheEntry");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+ReaderWriterLockTimedOutException", @"ReaderWriterLockTimedOutException");
            feature.AddKnownType(@"System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal+NativeOrStaticEventRegistrationImpl+MyReaderWriterLock", @"MyReaderWriterLock");
            feature.AddKnownType(@"__DynamicallyInvokableAttribute", @"__DynamicallyInvokableAttribute");
            feature.AddKnownType(@"Interop,System.Core", @"Interop");
            feature.AddKnownType(@"FXAssembly,System.Core", @"FXAssembly");
            feature.AddKnownType(@"ThisAssembly,System.Core", @"ThisAssembly");
            feature.AddKnownType(@"AssemblyRef,System.Core", @"AssemblyRef");
            feature.AddKnownType(@"Internal.Cryptography.Helpers,System.Core", @"Internal.Cryptography.Helpers");
            feature.AddKnownType(@"Internal.Cryptography.ICngSymmetricAlgorithm,System.Core", @"Internal.Cryptography.ICngSymmetricAlgorithm");
            feature.AddKnownType(@"Internal.Cryptography.SymmetricImportExportExtensions,System.Core", @"Internal.Cryptography.SymmetricImportExportExtensions");
            feature.AddKnownType(@"Internal.Cryptography.KeyPropertyName,System.Core", @"Internal.Cryptography.KeyPropertyName");
            feature.AddKnownType(@"Internal.Cryptography.CryptoThrowHelper,System.Core", @"Internal.Cryptography.CryptoThrowHelper");
            feature.AddKnownType(@"Internal.Cryptography.BasicSymmetricCipher,System.Core", @"Internal.Cryptography.BasicSymmetricCipher");
            feature.AddKnownType(@"Internal.Cryptography.UniversalCryptoDecryptor,System.Core", @"Internal.Cryptography.UniversalCryptoDecryptor");
            feature.AddKnownType(@"Internal.Cryptography.UniversalCryptoTransform,System.Core", @"Internal.Cryptography.UniversalCryptoTransform");
            feature.AddKnownType(@"Internal.Cryptography.UniversalCryptoEncryptor,System.Core", @"Internal.Cryptography.UniversalCryptoEncryptor");
            feature.AddKnownType(@"Internal.Cryptography.BasicSymmetricCipherNCrypt,System.Core", @"Internal.Cryptography.BasicSymmetricCipherNCrypt");
            feature.AddKnownType(@"Internal.Cryptography.BasicSymmetricCipherBCrypt,System.Core", @"Internal.Cryptography.BasicSymmetricCipherBCrypt");
            feature.AddKnownType(@"Internal.Cryptography.CngSymmetricAlgorithmCore,System.Core", @"Internal.Cryptography.CngSymmetricAlgorithmCore");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods,System.Core", @"Microsoft.Win32.UnsafeNativeMethods");
            feature.AddKnownType(@"Microsoft.Win32.SafeLibraryHandle,System.Core", @"Microsoft.Win32.SafeLibraryHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeBCryptHashHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeBCryptHashHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeAxlBufferHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeAxlBufferHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeCapiHandleBase,System.Core", @"Microsoft.Win32.SafeHandles.SafeCapiHandleBase");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeCapiHashHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeCapiHashHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeCapiKeyHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeCapiKeyHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeCspHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeCspHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeNCryptHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeNCryptHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafePipeHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafePipeHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafePerfProviderHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafePerfProviderHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle");
            feature.AddKnownType(@"Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle,System.Core", @"Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle");
            feature.AddKnownType(@"System.LocalAppContextSwitches,System.Core", @"LocalAppContextSwitches");
            feature.AddKnownType(@"System.AppContextDefaultValues,System.Core", @"AppContextDefaultValues");
            feature.AddKnownType(@"System.Action`9,System.Core", @"Action`9'9");
            feature.AddKnownType(@"System.Action`10,System.Core", @"Action`10'10");
            feature.AddKnownType(@"System.Action`11,System.Core", @"Action`11'11");
            feature.AddKnownType(@"System.Action`12,System.Core", @"Action`12'12");
            feature.AddKnownType(@"System.Action`13,System.Core", @"Action`13'13");
            feature.AddKnownType(@"System.Action`14,System.Core", @"Action`14'14");
            feature.AddKnownType(@"System.Action`15,System.Core", @"Action`15'15");
            feature.AddKnownType(@"System.Action`16,System.Core", @"Action`16'16");
            feature.AddKnownType(@"System.Func`10,System.Core", @"Func`10'10");
            feature.AddKnownType(@"System.Func`11,System.Core", @"Func`11'11");
            feature.AddKnownType(@"System.Func`12,System.Core", @"Func`12'12");
            feature.AddKnownType(@"System.Func`13,System.Core", @"Func`13'13");
            feature.AddKnownType(@"System.Func`14,System.Core", @"Func`14'14");
            feature.AddKnownType(@"System.Func`15,System.Core", @"Func`15'15");
            feature.AddKnownType(@"System.Func`16,System.Core", @"Func`16'16");
            feature.AddKnownType(@"System.Func`17,System.Core", @"Func`17'17");
            feature.AddKnownType(@"System.LocalAppContext,System.Core", @"LocalAppContext");
            feature.AddKnownType(@"System.SRDescriptionAttribute,System.Core", @"SRDescriptionAttribute");
            feature.AddKnownType(@"System.SRCategoryAttribute,System.Core", @"SRCategoryAttribute");
            feature.AddKnownType(@"System.SR,System.Core", @"SR");
            feature.AddKnownType(@"System.Reflection.BlobUtilities,System.Core", @"BlobUtilities");
            feature.AddKnownType(@"System.Reflection.Throw,System.Core", @"Throw");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.CoffHeader,System.Core", @"CoffHeader");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.CorFlags,System.Core", @"CorFlags");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.CorHeader,System.Core", @"CorHeader");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.CodeViewDebugDirectoryData,System.Core", @"CodeViewDebugDirectoryData");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.DebugDirectoryEntry,System.Core", @"DebugDirectoryEntry");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.DebugDirectoryEntryType,System.Core", @"DebugDirectoryEntryType");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.DirectoryEntry,System.Core", @"DirectoryEntry");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.Machine,System.Core", @"Machine");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEBinaryReader,System.Core", @"PEBinaryReader");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.Characteristics,System.Core", @"Characteristics");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEMagic,System.Core", @"PEMagic");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.Subsystem,System.Core", @"Subsystem");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.DllCharacteristics,System.Core", @"DllCharacteristics");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.SectionCharacteristics,System.Core", @"SectionCharacteristics");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEHeader,System.Core", @"PEHeader");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEHeaders,System.Core", @"PEHeaders");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEMemoryBlock,System.Core", @"PEMemoryBlock");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEReader,System.Core", @"PEReader");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEStreamOptions,System.Core", @"PEStreamOptions");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.PEStreamOptionsExtensions,System.Core", @"PEStreamOptionsExtensions");
            feature.AddKnownType(@"System.Reflection.PortableExecutable.SectionHeader,System.Core", @"SectionHeader");
            feature.AddKnownType(@"System.Reflection.Metadata.PathUtilities,System.Core", @"PathUtilities");
            feature.AddKnownType(@"System.Reflection.Metadata.BlobContentId,System.Core", @"BlobContentId");
            feature.AddKnownType(@"System.Reflection.Metadata.BlobReader,System.Core", @"BlobReader");
            feature.AddKnownType(@"System.Reflection.Metadata.Handle,System.Core", @"Handle");
            feature.AddKnownType(@"System.Reflection.Metadata.HandleKind,System.Core", @"HandleKind");
            feature.AddKnownType(@"System.Reflection.Metadata.HandleKindExtensions,System.Core", @"HandleKindExtensions");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataKind,System.Core", @"MetadataKind");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataReader,System.Core", @"MetadataReader");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataReaderOptions,System.Core", @"MetadataReaderOptions");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataReaderProvider,System.Core", @"MetadataReaderProvider");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataStreamOptions,System.Core", @"MetadataStreamOptions");
            feature.AddKnownType(@"System.Reflection.Metadata.MetadataStreamOptionsExtensions,System.Core", @"MetadataStreamOptionsExtensions");
            feature.AddKnownType(@"System.Reflection.Metadata.DebugMetadataHeader,System.Core", @"DebugMetadataHeader");
            feature.AddKnownType(@"System.Reflection.Metadata.Document,System.Core", @"Document");
            feature.AddKnownType(@"System.Reflection.Metadata.DocumentNameBlobHandle,System.Core", @"DocumentNameBlobHandle");
            feature.AddKnownType(@"System.Reflection.Metadata.DocumentHandle,System.Core", @"DocumentHandle");
            feature.AddKnownType(@"System.Reflection.Metadata.MethodDebugInformationHandle,System.Core", @"MethodDebugInformationHandle");
            feature.AddKnownType(@"System.Reflection.Metadata.MethodDebugInformation,System.Core", @"MethodDebugInformation");
            feature.AddKnownType(@"System.Reflection.Metadata.PortablePdbVersions,System.Core", @"PortablePdbVersions");
            feature.AddKnownType(@"System.Reflection.Metadata.SequencePoint,System.Core", @"SequencePoint");
            feature.AddKnownType(@"System.Reflection.Metadata.SequencePointCollection,System.Core", @"SequencePointCollection");
            feature.AddKnownType(@"System.Reflection.Metadata.MethodDefinitionHandle,System.Core", @"MethodDefinitionHandle");
            feature.AddKnownType(@"System.Reflection.Metadata.BlobHandle,System.Core", @"BlobHandle");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.MetadataTokens,System.Core", @"MetadataTokens");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.TableIndex,System.Core", @"TableIndex");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.BlobHeap,System.Core", @"BlobHeap");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.COR20Constants,System.Core", @"COR20Constants");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.HeapSizeFlag,System.Core", @"HeapSizeFlag");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.MetadataStreamKind,System.Core", @"MetadataStreamKind");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.TableMask,System.Core", @"TableMask");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.HeapSizes,System.Core", @"HeapSizes");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.StringKind,System.Core", @"StringKind");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.StringHandleType,System.Core", @"StringHandleType");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.HeapHandleType,System.Core", @"HeapHandleType");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.HandleType,System.Core", @"HandleType");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.TokenTypeIds,System.Core", @"TokenTypeIds");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.MetadataStreamConstants,System.Core", @"MetadataStreamConstants");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.StreamHeader,System.Core", @"StreamHeader");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.DocumentTableReader,System.Core", @"DocumentTableReader");
            feature.AddKnownType(@"System.Reflection.Metadata.Ecma335.MethodDebugInformationTableReader,System.Core", @"MethodDebugInformationTableReader");
            feature.AddKnownType(@"System.Reflection.Internal.AbstractMemoryBlock,System.Core", @"AbstractMemoryBlock");
            feature.AddKnownType(@"System.Reflection.Internal.ByteArrayMemoryBlock,System.Core", @"ByteArrayMemoryBlock");
            feature.AddKnownType(@"System.Reflection.Internal.ByteArrayMemoryProvider,System.Core", @"ByteArrayMemoryProvider");
            feature.AddKnownType(@"System.Reflection.Internal.MemoryBlockProvider,System.Core", @"MemoryBlockProvider");
            feature.AddKnownType(@"System.Reflection.Internal.ExternalMemoryBlock,System.Core", @"ExternalMemoryBlock");
            feature.AddKnownType(@"System.Reflection.Internal.ExternalMemoryBlockProvider,System.Core", @"ExternalMemoryBlockProvider");
            feature.AddKnownType(@"System.Reflection.Internal.MemoryMappedFileBlock,System.Core", @"MemoryMappedFileBlock");
            feature.AddKnownType(@"System.Reflection.Internal.NativeHeapMemoryBlock,System.Core", @"NativeHeapMemoryBlock");
            feature.AddKnownType(@"System.Reflection.Internal.StreamConstraints,System.Core", @"StreamConstraints");
            feature.AddKnownType(@"System.Reflection.Internal.StreamMemoryBlockProvider,System.Core", @"StreamMemoryBlockProvider");
            feature.AddKnownType(@"System.Reflection.Internal.CriticalDisposableObject,System.Core", @"CriticalDisposableObject");
            feature.AddKnownType(@"System.Reflection.Internal.Hash,System.Core", @"Hash");
            feature.AddKnownType(@"System.Reflection.Internal.LightUpHelper,System.Core", @"LightUpHelper");
            feature.AddKnownType(@"System.Reflection.Internal.MemoryBlock,System.Core", @"MemoryBlock");
            feature.AddKnownType(@"System.Reflection.Internal.MemoryMapLightUp,System.Core", @"MemoryMapLightUp");
            feature.AddKnownType(@"System.Reflection.Internal.ImmutableMemoryStream,System.Core", @"ImmutableMemoryStream");
            feature.AddKnownType(@"System.Reflection.Internal.ObjectPool`1,System.Core", @"ObjectPool`1'1");
            feature.AddKnownType(@"System.Reflection.Internal.PinnedObject,System.Core", @"PinnedObject");
            feature.AddKnownType(@"System.Reflection.Internal.PooledStringBuilder,System.Core", @"PooledStringBuilder");
            feature.AddKnownType(@"System.Reflection.Internal.ReadOnlyUnmanagedMemoryStream,System.Core", @"ReadOnlyUnmanagedMemoryStream");
            feature.AddKnownType(@"System.Reflection.Internal.StreamExtensions,System.Core", @"StreamExtensions");
            feature.AddKnownType(@"System.Threading.LockRecursionPolicy,System.Core", @"LockRecursionPolicy");
            feature.AddKnownType(@"System.Threading.ReaderWriterCount,System.Core", @"ReaderWriterCount");
            feature.AddKnownType(@"System.Threading.ReaderWriterLockSlim,System.Core", @"ReaderWriterLockSlim");
            feature.AddKnownType(@"System.Threading.Tasks.TaskExtensions,System.Core", @"TaskExtensions");
            feature.AddKnownType(@"System.Collections.Immutable.ImmutableArray,System.Core", @"ImmutableArray");
            feature.AddKnownType(@"System.Collections.Immutable.ImmutableArray`1,System.Core", @"ImmutableArray`1'1");
            feature.AddKnownType(@"System.Collections.Generic.BitHelper,System.Core", @"BitHelper");
            feature.AddKnownType(@"System.Collections.Generic.HashSetDebugView`1,System.Core", @"HashSetDebugView`1'1");
            feature.AddKnownType(@"System.Collections.Generic.HashSetEqualityComparer`1,System.Core", @"HashSetEqualityComparer`1'1");
            feature.AddKnownType(@"System.Collections.Generic.CopyPosition,System.Core", @"CopyPosition");
            feature.AddKnownType(@"System.Collections.Generic.LargeArrayBuilder`1,System.Core", @"LargeArrayBuilder`1'1");
            feature.AddKnownType(@"System.Collections.Generic.ArrayBuilder`1,System.Core", @"ArrayBuilder`1'1");
            feature.AddKnownType(@"System.Collections.Generic.Marker,System.Core", @"Marker");
            feature.AddKnownType(@"System.Collections.Generic.SparseArrayBuilder`1,System.Core", @"SparseArrayBuilder`1'1");
            feature.AddKnownType(@"System.Collections.Generic.EnumerableHelpers,System.Core", @"EnumerableHelpers");
            feature.AddKnownType(@"System.IO.__Error,System.Core", @"__Error");
            feature.AddKnownType(@"System.IO.BufferedStream2,System.Core", @"BufferedStream2");
            feature.AddKnownType(@"System.IO.LogStream,System.Core", @"LogStream");
            feature.AddKnownType(@"System.IO.LogRetentionOption,System.Core", @"LogRetentionOption");
            feature.AddKnownType(@"System.IO.HandleInheritability,System.Core", @"HandleInheritability");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.Core", @"MemoryMappedFileAccess");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.Core", @"MemoryMappedFileOptions");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedFile,System.Core", @"MemoryMappedFile");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor,System.Core", @"MemoryMappedViewAccessor");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedViewStream,System.Core", @"MemoryMappedViewStream");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.Core", @"MemoryMappedFileRights");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.Core", @"MemoryMappedFileSecurity");
            feature.AddKnownType(@"System.IO.MemoryMappedFiles.MemoryMappedView,System.Core", @"MemoryMappedView");
            feature.AddKnownType(@"System.IO.Pipes.PipeDirection,System.Core", @"PipeDirection");
            feature.AddKnownType(@"System.IO.Pipes.PipeTransmissionMode,System.Core", @"PipeTransmissionMode");
            feature.AddKnownType(@"System.IO.Pipes.PipeOptions,System.Core", @"PipeOptions");
            feature.AddKnownType(@"System.IO.Pipes.IOCancellationHelper,System.Core", @"IOCancellationHelper");
            feature.AddKnownType(@"System.IO.Pipes.AnonymousPipeServerStream,System.Core", @"AnonymousPipeServerStream");
            feature.AddKnownType(@"System.IO.Pipes.PipeStream,System.Core", @"PipeStream");
            feature.AddKnownType(@"System.IO.Pipes.AnonymousPipeClientStream,System.Core", @"AnonymousPipeClientStream");
            feature.AddKnownType(@"System.IO.Pipes.PipeStreamImpersonationWorker,System.Core", @"PipeStreamImpersonationWorker");
            feature.AddKnownType(@"System.IO.Pipes.NamedPipeServerStream,System.Core", @"NamedPipeServerStream");
            feature.AddKnownType(@"System.IO.Pipes.NamedPipeClientStream,System.Core", @"NamedPipeClientStream");
            feature.AddKnownType(@"System.IO.Pipes.PipeAsyncResult,System.Core", @"PipeAsyncResult");
            feature.AddKnownType(@"System.IO.Pipes.PipeState,System.Core", @"PipeState");
            feature.AddKnownType(@"System.IO.Pipes.PipeStreamAsyncResult,System.Core", @"PipeStreamAsyncResult");
            feature.AddKnownType(@"System.IO.Pipes.PipeAccessRights,System.Core", @"PipeAccessRights");
            feature.AddKnownType(@"System.IO.Pipes.PipeAccessRule,System.Core", @"PipeAccessRule");
            feature.AddKnownType(@"System.IO.Pipes.PipeAuditRule,System.Core", @"PipeAuditRule");
            feature.AddKnownType(@"System.IO.Pipes.PipeSecurity,System.Core", @"PipeSecurity");
            feature.AddKnownType(@"System.Dynamic.BinaryOperationBinder,System.Core", @"BinaryOperationBinder");
            feature.AddKnownType(@"System.Dynamic.DynamicMetaObjectBinder,System.Core", @"DynamicMetaObjectBinder");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallSiteBinder,System.Core", @"CallSiteBinder");
            feature.AddKnownType(@"System.Dynamic.BindingRestrictions,System.Core", @"BindingRestrictions");
            feature.AddKnownType(@"System.Dynamic.CallInfo,System.Core", @"CallInfo");
            feature.AddKnownType(@"System.Dynamic.ConvertBinder,System.Core", @"ConvertBinder");
            feature.AddKnownType(@"System.Dynamic.CreateInstanceBinder,System.Core", @"CreateInstanceBinder");
            feature.AddKnownType(@"System.Dynamic.DeleteIndexBinder,System.Core", @"DeleteIndexBinder");
            feature.AddKnownType(@"System.Dynamic.DeleteMemberBinder,System.Core", @"DeleteMemberBinder");
            feature.AddKnownType(@"System.Dynamic.DynamicMetaObject,System.Core", @"DynamicMetaObject");
            feature.AddKnownType(@"System.Dynamic.DynamicObject,System.Core", @"DynamicObject");
            feature.AddKnownType(@"System.Dynamic.IDynamicMetaObjectProvider,System.Core", @"IDynamicMetaObjectProvider");
            feature.AddKnownType(@"System.Dynamic.ExpandoClass,System.Core", @"ExpandoClass");
            feature.AddKnownType(@"System.Dynamic.ExpandoObject,System.Core", @"ExpandoObject");
            feature.AddKnownType(@"System.Dynamic.GetIndexBinder,System.Core", @"GetIndexBinder");
            feature.AddKnownType(@"System.Dynamic.GetMemberBinder,System.Core", @"GetMemberBinder");
            feature.AddKnownType(@"System.Dynamic.IInvokeOnGetBinder,System.Core", @"IInvokeOnGetBinder");
            feature.AddKnownType(@"System.Dynamic.InvokeBinder,System.Core", @"InvokeBinder");
            feature.AddKnownType(@"System.Dynamic.InvokeMemberBinder,System.Core", @"InvokeMemberBinder");
            feature.AddKnownType(@"System.Dynamic.SetIndexBinder,System.Core", @"SetIndexBinder");
            feature.AddKnownType(@"System.Dynamic.SetMemberBinder,System.Core", @"SetMemberBinder");
            feature.AddKnownType(@"System.Dynamic.UnaryOperationBinder,System.Core", @"UnaryOperationBinder");
            feature.AddKnownType(@"System.Dynamic.UpdateDelegates,System.Core", @"UpdateDelegates");
            feature.AddKnownType(@"System.Dynamic.Utils.TypeUtils,System.Core", @"TypeUtils");
            feature.AddKnownType(@"System.Dynamic.Utils.CacheDict`2,System.Core", @"CacheDict`2'2");
            feature.AddKnownType(@"System.Dynamic.Utils.CollectionExtensions,System.Core", @"CollectionExtensions");
            feature.AddKnownType(@"System.Dynamic.Utils.EmptyReadOnlyCollection`1,System.Core", @"EmptyReadOnlyCollection`1'1");
            feature.AddKnownType(@"System.Dynamic.Utils.ContractUtils,System.Core", @"ContractUtils");
            feature.AddKnownType(@"System.Dynamic.Utils.Helpers,System.Core", @"Helpers");
            feature.AddKnownType(@"System.Dynamic.Utils.ReferenceEqualityComparer`1,System.Core", @"ReferenceEqualityComparer`1'1");
            feature.AddKnownType(@"System.Dynamic.Utils.TypeExtensions,System.Core", @"TypeExtensions");
            feature.AddKnownType(@"System.Security.ManifestKinds,System.Core", @"ManifestKinds");
            feature.AddKnownType(@"System.Security.Cryptography.IncrementalHash,System.Core", @"IncrementalHash");
            feature.AddKnownType(@"System.Security.Cryptography.AesCng,System.Core", @"AesCng");
            feature.AddKnownType(@"System.Security.Cryptography.AesCryptoServiceProvider,System.Core", @"AesCryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.AesManaged,System.Core", @"AesManaged");
            feature.AddKnownType(@"System.Security.Cryptography.AsymmetricPaddingMode,System.Core", @"AsymmetricPaddingMode");
            feature.AddKnownType(@"System.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_V2,System.Core", @"BCRYPT_DSA_KEY_BLOB_V2");
            feature.AddKnownType(@"System.Security.Cryptography.HASHALGORITHM_ENUM,System.Core", @"HASHALGORITHM_ENUM");
            feature.AddKnownType(@"System.Security.Cryptography.DSAFIPSVERSION_ENUM,System.Core", @"DSAFIPSVERSION_ENUM");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative,System.Core", @"BCryptNative");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptAlgorithmHandleCache,System.Core", @"BCryptAlgorithmHandleCache");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptHashAlgorithm,System.Core", @"BCryptHashAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.CngAlgorithm,System.Core", @"CngAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.CngAlgorithmGroup,System.Core", @"CngAlgorithmGroup");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyHandleOpenOptions,System.Core", @"CngKeyHandleOpenOptions");
            feature.AddKnownType(@"System.Security.Cryptography.CngKey,System.Core", @"CngKey");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyBlobFormat,System.Core", @"CngKeyBlobFormat");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyCreationParameters,System.Core", @"CngKeyCreationParameters");
            feature.AddKnownType(@"System.Security.Cryptography.CngProperty,System.Core", @"CngProperty");
            feature.AddKnownType(@"System.Security.Cryptography.CngPropertyCollection,System.Core", @"CngPropertyCollection");
            feature.AddKnownType(@"System.Security.Cryptography.CngProvider,System.Core", @"CngProvider");
            feature.AddKnownType(@"System.Security.Cryptography.CngUIPolicy,System.Core", @"CngUIPolicy");
            feature.AddKnownType(@"System.Security.Cryptography.CapiHashAlgorithm,System.Core", @"CapiHashAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative,System.Core", @"CapiNative");
            feature.AddKnownType(@"System.Security.Cryptography.SafeLocalAllocHandle,System.Core", @"SafeLocalAllocHandle");
            feature.AddKnownType(@"System.Security.Cryptography.X509Utils,System.Core", @"X509Utils");
            feature.AddKnownType(@"System.Security.Cryptography.EncryptionMode,System.Core", @"EncryptionMode");
            feature.AddKnownType(@"System.Security.Cryptography.CapiSymmetricAlgorithm,System.Core", @"CapiSymmetricAlgorithm");
            feature.AddKnownType(@"System.Security.Cryptography.DSACng,System.Core", @"DSACng");
            feature.AddKnownType(@"System.Security.Cryptography.ECCng,System.Core", @"ECCng");
            feature.AddKnownType(@"System.Security.Cryptography.ECCurve,System.Core", @"ECCurve");
            feature.AddKnownType(@"System.Security.Cryptography.ECDiffieHellman,System.Core", @"ECDiffieHellman");
            feature.AddKnownType(@"System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Core", @"ECDiffieHellmanPublicKey");
            feature.AddKnownType(@"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction,System.Core", @"ECDiffieHellmanKeyDerivationFunction");
            feature.AddKnownType(@"System.Security.Cryptography.ECDiffieHellmanCng,System.Core", @"ECDiffieHellmanCng");
            feature.AddKnownType(@"System.Security.Cryptography.ECDiffieHellmanCngPublicKey,System.Core", @"ECDiffieHellmanCngPublicKey");
            feature.AddKnownType(@"System.Security.Cryptography.ECDsa,System.Core", @"ECDsa");
            feature.AddKnownType(@"System.Security.Cryptography.ECDsaCng,System.Core", @"ECDsaCng");
            feature.AddKnownType(@"System.Security.Cryptography.ECKeyXmlFormat,System.Core", @"ECKeyXmlFormat");
            feature.AddKnownType(@"System.Security.Cryptography.ECParameters,System.Core", @"ECParameters");
            feature.AddKnownType(@"System.Security.Cryptography.ECPoint,System.Core", @"ECPoint");
            feature.AddKnownType(@"System.Security.Cryptography.ManifestSignatureInformation,System.Core", @"ManifestSignatureInformation");
            feature.AddKnownType(@"System.Security.Cryptography.ManifestSignatureInformationCollection,System.Core", @"ManifestSignatureInformationCollection");
            feature.AddKnownType(@"System.Security.Cryptography.MD5Cng,System.Core", @"MD5Cng");
            feature.AddKnownType(@"System.Security.Cryptography.CngExportPolicies,System.Core", @"CngExportPolicies");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyCreationOptions,System.Core", @"CngKeyCreationOptions");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyOpenOptions,System.Core", @"CngKeyOpenOptions");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyTypes,System.Core", @"CngKeyTypes");
            feature.AddKnownType(@"System.Security.Cryptography.CngKeyUsages,System.Core", @"CngKeyUsages");
            feature.AddKnownType(@"System.Security.Cryptography.CngPropertyOptions,System.Core", @"CngPropertyOptions");
            feature.AddKnownType(@"System.Security.Cryptography.CngUIProtectionLevels,System.Core", @"CngUIProtectionLevels");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative,System.Core", @"NCryptNative");
            feature.AddKnownType(@"System.Security.Cryptography.Rfc4050KeyFormatter,System.Core", @"Rfc4050KeyFormatter");
            feature.AddKnownType(@"System.Security.Cryptography.RSACng,System.Core", @"RSACng");
            feature.AddKnownType(@"System.Security.Cryptography.SHA1Cng,System.Core", @"SHA1Cng");
            feature.AddKnownType(@"System.Security.Cryptography.SHA256Cng,System.Core", @"SHA256Cng");
            feature.AddKnownType(@"System.Security.Cryptography.SHA256CryptoServiceProvider,System.Core", @"SHA256CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.SHA384Cng,System.Core", @"SHA384Cng");
            feature.AddKnownType(@"System.Security.Cryptography.SHA384CryptoServiceProvider,System.Core", @"SHA384CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.SHA512Cng,System.Core", @"SHA512Cng");
            feature.AddKnownType(@"System.Security.Cryptography.SHA512CryptoServiceProvider,System.Core", @"SHA512CryptoServiceProvider");
            feature.AddKnownType(@"System.Security.Cryptography.SignatureVerificationResult,System.Core", @"SignatureVerificationResult");
            feature.AddKnownType(@"System.Security.Cryptography.StrongNameSignatureInformation,System.Core", @"StrongNameSignatureInformation");
            feature.AddKnownType(@"System.Security.Cryptography.TripleDESCng,System.Core", @"TripleDESCng");
            feature.AddKnownType(@"System.Security.Cryptography.Xml.ManifestSignedXml,System.Core", @"ManifestSignedXml");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation,System.Core", @"AuthenticodeSignatureInformation");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.CertificateExtensionsCommon,System.Core", @"CertificateExtensionsCommon");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.CertificateRequest,System.Core", @"CertificateRequest");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.DSACertificateExtensions,System.Core", @"DSACertificateExtensions");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.DerEncoder,System.Core", @"DerEncoder");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.DerSequenceReader,System.Core", @"DerSequenceReader");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions,System.Core", @"ECDsaCertificateExtensions");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.ECDsaX509SignatureGenerator,System.Core", @"ECDsaX509SignatureGenerator");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509SignatureGenerator,System.Core", @"X509SignatureGenerator");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.EncodingHelpers,System.Core", @"EncodingHelpers");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.GeneralNameEncoder,System.Core", @"GeneralNameEncoder");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.Oids,System.Core", @"Oids");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.Pkcs10CertificationRequestInfo,System.Core", @"Pkcs10CertificationRequestInfo");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.Pkcs9ExtensionRequest,System.Core", @"Pkcs9ExtensionRequest");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X501Attribute,System.Core", @"X501Attribute");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.RSACertificateExtensions,System.Core", @"RSACertificateExtensions");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator,System.Core", @"RSAPkcs1X509SignatureGenerator");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.RSAPssX509SignatureGenerator,System.Core", @"RSAPssX509SignatureGenerator");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder,System.Core", @"SubjectAlternativeNameBuilder");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.TbsCertificate,System.Core", @"TbsCertificate");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.TimestampInformation,System.Core", @"TimestampInformation");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.TrustStatus,System.Core", @"TrustStatus");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native,System.Core", @"X509Native");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.PinAndClear,System.Core", @"PinAndClear");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.SafeCertContextHandle,System.Core", @"SafeCertContextHandle");
            feature.AddKnownType(@"System.Runtime.InteropServices.ComAwareEventInfo,System.Core", @"ComAwareEventInfo");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ExecutionScope,System.Core", @"ExecutionScope");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DynamicAttribute,System.Core", @"DynamicAttribute");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallSite,System.Core", @"CallSite");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallSite`1,System.Core", @"CallSite`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallSiteHelpers,System.Core", @"CallSiteHelpers");
            feature.AddKnownType(@"System.Runtime.CompilerServices.CallSiteOps,System.Core", @"CallSiteOps");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuntimeOps,System.Core", @"RuntimeOps");
            feature.AddKnownType(@"System.Runtime.CompilerServices.RuleCache`1,System.Core", @"RuleCache`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.Closure,System.Core", @"Closure");
            feature.AddKnownType(@"System.Runtime.CompilerServices.DebugInfoGenerator,System.Core", @"DebugInfoGenerator");
            feature.AddKnownType(@"System.Runtime.CompilerServices.SymbolDocumentGenerator,System.Core", @"SymbolDocumentGenerator");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IRuntimeVariables,System.Core", @"IRuntimeVariables");
            feature.AddKnownType(@"System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1,System.Core", @"ReadOnlyCollectionBuilder`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.StrongBox`1,System.Core", @"StrongBox`1'1");
            feature.AddKnownType(@"System.Runtime.CompilerServices.IStrongBox,System.Core", @"IStrongBox");
            feature.AddKnownType(@"System.Runtime.CompilerServices.TrueReadOnlyCollection`1,System.Core", @"TrueReadOnlyCollection`1'1");
            feature.AddKnownType(@"System.Linq.IQueryable,System.Core", @"IQueryable");
            feature.AddKnownType(@"System.Linq.IQueryable`1,System.Core", @"IQueryable`1'1");
            feature.AddKnownType(@"System.Linq.IQueryProvider,System.Core", @"IQueryProvider");
            feature.AddKnownType(@"System.Linq.IOrderedQueryable,System.Core", @"IOrderedQueryable");
            feature.AddKnownType(@"System.Linq.IOrderedQueryable`1,System.Core", @"IOrderedQueryable`1'1");
            feature.AddKnownType(@"System.Linq.Queryable,System.Core", @"Queryable");
            feature.AddKnownType(@"System.Linq.Enumerable,System.Core", @"Enumerable");
            feature.AddKnownType(@"System.Linq.EmptyEnumerable`1,System.Core", @"EmptyEnumerable`1'1");
            feature.AddKnownType(@"System.Linq.IdentityFunction`1,System.Core", @"IdentityFunction`1'1");
            feature.AddKnownType(@"System.Linq.IOrderedEnumerable`1,System.Core", @"IOrderedEnumerable`1'1");
            feature.AddKnownType(@"System.Linq.IGrouping`2,System.Core", @"IGrouping`2'2");
            feature.AddKnownType(@"System.Linq.ILookup`2,System.Core", @"ILookup`2'2");
            feature.AddKnownType(@"System.Linq.Lookup`2,System.Core", @"Lookup`2'2");
            feature.AddKnownType(@"System.Linq.Set`1,System.Core", @"Set`1'1");
            feature.AddKnownType(@"System.Linq.GroupedEnumerable`4,System.Core", @"GroupedEnumerable`4'4");
            feature.AddKnownType(@"System.Linq.GroupedEnumerable`3,System.Core", @"GroupedEnumerable`3'3");
            feature.AddKnownType(@"System.Linq.OrderedEnumerable`1,System.Core", @"OrderedEnumerable`1'1");
            feature.AddKnownType(@"System.Linq.OrderedEnumerable`2,System.Core", @"OrderedEnumerable`2'2");
            feature.AddKnownType(@"System.Linq.EnumerableSorter`1,System.Core", @"EnumerableSorter`1'1");
            feature.AddKnownType(@"System.Linq.EnumerableSorter`2,System.Core", @"EnumerableSorter`2'2");
            feature.AddKnownType(@"System.Linq.Buffer`1,System.Core", @"Buffer`1'1");
            feature.AddKnownType(@"System.Linq.SystemCore_EnumerableDebugView`1,System.Core", @"SystemCore_EnumerableDebugView`1'1");
            feature.AddKnownType(@"System.Linq.SystemCore_EnumerableDebugViewEmptyException,System.Core", @"SystemCore_EnumerableDebugViewEmptyException");
            feature.AddKnownType(@"System.Linq.SystemCore_EnumerableDebugView,System.Core", @"SystemCore_EnumerableDebugView");
            feature.AddKnownType(@"System.Linq.IIListProvider`1,System.Core", @"IIListProvider`1'1");
            feature.AddKnownType(@"System.Linq.SingleLinkedNode`1,System.Core", @"SingleLinkedNode`1'1");
            feature.AddKnownType(@"System.Linq.EnumerableQuery,System.Core", @"EnumerableQuery");
            feature.AddKnownType(@"System.Linq.EnumerableQuery`1,System.Core", @"EnumerableQuery`1'1");
            feature.AddKnownType(@"System.Linq.EnumerableExecutor,System.Core", @"EnumerableExecutor");
            feature.AddKnownType(@"System.Linq.EnumerableExecutor`1,System.Core", @"EnumerableExecutor`1'1");
            feature.AddKnownType(@"System.Linq.EnumerableRewriter,System.Core", @"EnumerableRewriter");
            feature.AddKnownType(@"System.Linq.Expressions.OldExpressionVisitor,System.Core", @"OldExpressionVisitor");
            feature.AddKnownType(@"System.Linq.TypeHelper,System.Core", @"TypeHelper");
            feature.AddKnownType(@"System.Linq.Strings,System.Core", @"Strings");
            feature.AddKnownType(@"System.Linq.Error,System.Core", @"Error");
            feature.AddKnownType(@"System.Linq.ParallelEnumerable,System.Core", @"ParallelEnumerable");
            feature.AddKnownType(@"System.Linq.ParallelMergeOptions,System.Core", @"ParallelMergeOptions");
            feature.AddKnownType(@"System.Linq.ParallelExecutionMode,System.Core", @"ParallelExecutionMode");
            feature.AddKnownType(@"System.Linq.AggregationMinMaxHelpers`1,System.Core", @"AggregationMinMaxHelpers`1'1");
            feature.AddKnownType(@"System.Linq.OrderedParallelQuery`1,System.Core", @"OrderedParallelQuery`1'1");
            feature.AddKnownType(@"System.Linq.ParallelQuery`1,System.Core", @"ParallelQuery`1'1");
            feature.AddKnownType(@"System.Linq.ParallelQuery,System.Core", @"ParallelQuery");
            feature.AddKnownType(@"System.Linq.SRDescriptionAttribute,System.Core", @"SRDescriptionAttribute");
            feature.AddKnownType(@"System.Linq.SRCategoryAttribute,System.Core", @"SRCategoryAttribute");
            feature.AddKnownType(@"System.Linq.SR,System.Core", @"SR");
            feature.AddKnownType(@"System.Linq.Parallel.AsynchronousChannel`1,System.Core", @"AsynchronousChannel`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.SynchronousChannel`1,System.Core", @"SynchronousChannel`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.EmptyEnumerable`1,System.Core", @"EmptyEnumerable`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.EmptyEnumerator`1,System.Core", @"EmptyEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.QueryOperatorEnumerator`2,System.Core", @"QueryOperatorEnumerator`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.EnumerableWrapperWeakToStrong,System.Core", @"EnumerableWrapperWeakToStrong");
            feature.AddKnownType(@"System.Linq.Parallel.IParallelPartitionable`1,System.Core", @"IParallelPartitionable`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ParallelEnumerableWrapper,System.Core", @"ParallelEnumerableWrapper");
            feature.AddKnownType(@"System.Linq.Parallel.ParallelEnumerableWrapper`1,System.Core", @"ParallelEnumerableWrapper`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.QueryAggregationOptions,System.Core", @"QueryAggregationOptions");
            feature.AddKnownType(@"System.Linq.Parallel.RangeEnumerable,System.Core", @"RangeEnumerable");
            feature.AddKnownType(@"System.Linq.Parallel.RepeatEnumerable`1,System.Core", @"RepeatEnumerable`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1,System.Core", @"AsynchronousChannelMergeEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.MergeEnumerator`1,System.Core", @"MergeEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ArrayMergeHelper`1,System.Core", @"ArrayMergeHelper`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.IMergeHelper`1,System.Core", @"IMergeHelper`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.DefaultMergeHelper`2,System.Core", @"DefaultMergeHelper`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.MergeExecutor`1,System.Core", @"MergeExecutor`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.OrderPreservingMergeHelper`2,System.Core", @"OrderPreservingMergeHelper`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2,System.Core", @"OrderPreservingPipeliningMergeHelper`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.Producer`1,System.Core", @"Producer`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ProducerComparerInt,System.Core", @"ProducerComparerInt");
            feature.AddKnownType(@"System.Linq.Parallel.SynchronousChannelMergeEnumerator`1,System.Core", @"SynchronousChannelMergeEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.HashRepartitionEnumerator`3,System.Core", @"HashRepartitionEnumerator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.Pair`2,System.Core", @"Pair`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.HashRepartitionStream`3,System.Core", @"HashRepartitionStream`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedStream`2,System.Core", @"PartitionedStream`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.IPartitionedStreamRecipient`1,System.Core", @"IPartitionedStreamRecipient`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedHashRepartitionEnumerator`3,System.Core", @"OrderedHashRepartitionEnumerator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedHashRepartitionStream`3,System.Core", @"OrderedHashRepartitionStream`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedDataSource`1,System.Core", @"PartitionedDataSource`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.UnorderedHashRepartitionStream`3,System.Core", @"UnorderedHashRepartitionStream`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.AssociativeAggregationOperator`3,System.Core", @"AssociativeAggregationOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.UnaryQueryOperator`2,System.Core", @"UnaryQueryOperator`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.QueryOperator`1,System.Core", @"QueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionerQueryOperator`1,System.Core", @"PartitionerQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ScanQueryOperator`1,System.Core", @"ScanQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ExceptQueryOperator`1,System.Core", @"ExceptQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.BinaryQueryOperator`3,System.Core", @"BinaryQueryOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.GroupJoinQueryOperator`4,System.Core", @"GroupJoinQueryOperator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5,System.Core", @"HashJoinQueryOperatorEnumerator`5'5");
            feature.AddKnownType(@"System.Linq.Parallel.IntersectQueryOperator`1,System.Core", @"IntersectQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.JoinQueryOperator`4,System.Core", @"JoinQueryOperator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.UnionQueryOperator`1,System.Core", @"UnionQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ZipQueryOperator`3,System.Core", @"ZipQueryOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedStreamMerger`1,System.Core", @"PartitionedStreamMerger`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.QueryOpeningEnumerator`1,System.Core", @"QueryOpeningEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.CountAggregationOperator`1,System.Core", @"CountAggregationOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.InlinedAggregationOperator`3,System.Core", @"InlinedAggregationOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.LongCountAggregationOperator`1,System.Core", @"LongCountAggregationOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.DecimalAverageAggregationOperator,System.Core", @"DecimalAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.DecimalMinMaxAggregationOperator,System.Core", @"DecimalMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.DecimalSumAggregationOperator,System.Core", @"DecimalSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.DoubleAverageAggregationOperator,System.Core", @"DoubleAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.DoubleMinMaxAggregationOperator,System.Core", @"DoubleMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.DoubleSumAggregationOperator,System.Core", @"DoubleSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.FloatAverageAggregationOperator,System.Core", @"FloatAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.FloatMinMaxAggregationOperator,System.Core", @"FloatMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.FloatSumAggregationOperator,System.Core", @"FloatSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1,System.Core", @"InlinedAggregationOperatorEnumerator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.IntAverageAggregationOperator,System.Core", @"IntAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.IntMinMaxAggregationOperator,System.Core", @"IntMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.IntSumAggregationOperator,System.Core", @"IntSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.LongAverageAggregationOperator,System.Core", @"LongAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.LongMinMaxAggregationOperator,System.Core", @"LongMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.LongSumAggregationOperator,System.Core", @"LongSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDecimalAverageAggregationOperator,System.Core", @"NullableDecimalAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator,System.Core", @"NullableDecimalMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDecimalSumAggregationOperator,System.Core", @"NullableDecimalSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDoubleAverageAggregationOperator,System.Core", @"NullableDoubleAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator,System.Core", @"NullableDoubleMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableDoubleSumAggregationOperator,System.Core", @"NullableDoubleSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableFloatAverageAggregationOperator,System.Core", @"NullableFloatAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableFloatMinMaxAggregationOperator,System.Core", @"NullableFloatMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableFloatSumAggregationOperator,System.Core", @"NullableFloatSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableIntAverageAggregationOperator,System.Core", @"NullableIntAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableIntMinMaxAggregationOperator,System.Core", @"NullableIntMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableIntSumAggregationOperator,System.Core", @"NullableIntSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableLongAverageAggregationOperator,System.Core", @"NullableLongAverageAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableLongMinMaxAggregationOperator,System.Core", @"NullableLongMinMaxAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.NullableLongSumAggregationOperator,System.Core", @"NullableLongSumAggregationOperator");
            feature.AddKnownType(@"System.Linq.Parallel.ListQueryResults`1,System.Core", @"ListQueryResults`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.QueryResults`1,System.Core", @"QueryResults`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.OrdinalIndexState,System.Core", @"OrdinalIndexState");
            feature.AddKnownType(@"System.Linq.Parallel.QuerySettings,System.Core", @"QuerySettings");
            feature.AddKnownType(@"System.Linq.Parallel.OrderingQueryOperator`1,System.Core", @"OrderingQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.QueryExecutionOption`1,System.Core", @"QueryExecutionOption`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.AnyAllSearchOperator`1,System.Core", @"AnyAllSearchOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ConcatQueryOperator`1,System.Core", @"ConcatQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ConcatKey`2,System.Core", @"ConcatKey`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.ContainsSearchOperator`1,System.Core", @"ContainsSearchOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.DefaultIfEmptyQueryOperator`1,System.Core", @"DefaultIfEmptyQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.DistinctQueryOperator`1,System.Core", @"DistinctQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ElementAtQueryOperator`1,System.Core", @"ElementAtQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.FirstQueryOperator`1,System.Core", @"FirstQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ForAllOperator`1,System.Core", @"ForAllOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.GroupByQueryOperator`3,System.Core", @"GroupByQueryOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.GroupByQueryOperatorEnumerator`4,System.Core", @"GroupByQueryOperatorEnumerator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3,System.Core", @"GroupByIdentityQueryOperatorEnumerator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4,System.Core", @"GroupByElementSelectorQueryOperatorEnumerator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4,System.Core", @"OrderedGroupByQueryOperatorEnumerator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3,System.Core", @"OrderedGroupByIdentityQueryOperatorEnumerator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4,System.Core", @"OrderedGroupByElementSelectorQueryOperatorEnumerator`4'4");
            feature.AddKnownType(@"System.Linq.Parallel.GroupByGrouping`2,System.Core", @"GroupByGrouping`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedGroupByGrouping`3,System.Core", @"OrderedGroupByGrouping`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.IndexedSelectQueryOperator`2,System.Core", @"IndexedSelectQueryOperator`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.IndexedWhereQueryOperator`1,System.Core", @"IndexedWhereQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.LastQueryOperator`1,System.Core", @"LastQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.ReverseQueryOperator`1,System.Core", @"ReverseQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.SelectManyQueryOperator`3,System.Core", @"SelectManyQueryOperator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.SelectQueryOperator`2,System.Core", @"SelectQueryOperator`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.SingleQueryOperator`1,System.Core", @"SingleQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.SortQueryOperator`2,System.Core", @"SortQueryOperator`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.SortQueryOperatorResults`2,System.Core", @"SortQueryOperatorResults`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.SortQueryOperatorEnumerator`3,System.Core", @"SortQueryOperatorEnumerator`3'3");
            feature.AddKnownType(@"System.Linq.Parallel.TakeOrSkipQueryOperator`1,System.Core", @"TakeOrSkipQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1,System.Core", @"TakeOrSkipWhileQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.WhereQueryOperator`1,System.Core", @"WhereQueryOperator`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.CancellationState,System.Core", @"CancellationState");
            feature.AddKnownType(@"System.Linq.Parallel.OrderPreservingSpoolingTask`2,System.Core", @"OrderPreservingSpoolingTask`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.SpoolingTaskBase,System.Core", @"SpoolingTaskBase");
            feature.AddKnownType(@"System.Linq.Parallel.QueryTask,System.Core", @"QueryTask");
            feature.AddKnownType(@"System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2,System.Core", @"OrderPreservingPipeliningSpoolingTask`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.QueryLifecycle,System.Core", @"QueryLifecycle");
            feature.AddKnownType(@"System.Linq.Parallel.QueryTaskGroupState,System.Core", @"QueryTaskGroupState");
            feature.AddKnownType(@"System.Linq.Parallel.Scheduling,System.Core", @"Scheduling");
            feature.AddKnownType(@"System.Linq.Parallel.SpoolingTask,System.Core", @"SpoolingTask");
            feature.AddKnownType(@"System.Linq.Parallel.StopAndGoSpoolingTask`2,System.Core", @"StopAndGoSpoolingTask`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.PipelineSpoolingTask`2,System.Core", @"PipelineSpoolingTask`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.ForAllSpoolingTask`2,System.Core", @"ForAllSpoolingTask`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.CancellableEnumerable,System.Core", @"CancellableEnumerable");
            feature.AddKnownType(@"System.Linq.Parallel.ExceptionAggregator,System.Core", @"ExceptionAggregator");
            feature.AddKnownType(@"System.Linq.Parallel.ExchangeUtilities,System.Core", @"ExchangeUtilities");
            feature.AddKnownType(@"System.Linq.Parallel.NoKeyMemoizationRequired,System.Core", @"NoKeyMemoizationRequired");
            feature.AddKnownType(@"System.Linq.Parallel.FixedMaxHeap`1,System.Core", @"FixedMaxHeap`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.GrowingArray`1,System.Core", @"GrowingArray`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.HashLookup`2,System.Core", @"HashLookup`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.IntValueEvent,System.Core", @"IntValueEvent");
            feature.AddKnownType(@"System.Linq.Parallel.ListChunk`1,System.Core", @"ListChunk`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.Lookup`2,System.Core", @"Lookup`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.PairComparer`2,System.Core", @"PairComparer`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.PlinqEtwProvider,System.Core", @"PlinqEtwProvider");
            feature.AddKnownType(@"System.Linq.Parallel.ReverseComparer`1,System.Core", @"ReverseComparer`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.Shared`1,System.Core", @"Shared`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.SortHelper`1,System.Core", @"SortHelper`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.SortHelper`2,System.Core", @"SortHelper`2'2");
            feature.AddKnownType(@"System.Linq.Parallel.TraceHelpers,System.Core", @"TraceHelpers");
            feature.AddKnownType(@"System.Linq.Parallel.Util,System.Core", @"Util");
            feature.AddKnownType(@"System.Linq.Parallel.Wrapper`1,System.Core", @"Wrapper`1'1");
            feature.AddKnownType(@"System.Linq.Parallel.WrapperEqualityComparer`1,System.Core", @"WrapperEqualityComparer`1'1");
            feature.AddKnownType(@"System.Linq.Expressions.ReadOnlyCollectionExtensions,System.Core", @"ReadOnlyCollectionExtensions");
            feature.AddKnownType(@"System.Linq.Expressions.Strings,System.Core", @"Strings");
            feature.AddKnownType(@"System.Linq.Expressions.Error,System.Core", @"Error");
            feature.AddKnownType(@"System.Linq.Expressions.BinaryExpression,System.Core", @"BinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.Expression,System.Core", @"Expression");
            feature.AddKnownType(@"System.Linq.Expressions.LogicalBinaryExpression,System.Core", @"LogicalBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.AssignBinaryExpression,System.Core", @"AssignBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.CoalesceConversionBinaryExpression,System.Core", @"CoalesceConversionBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.OpAssignMethodConversionBinaryExpression,System.Core", @"OpAssignMethodConversionBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.MethodBinaryExpression,System.Core", @"MethodBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.SimpleBinaryExpression,System.Core", @"SimpleBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.BlockExpression,System.Core", @"BlockExpression");
            feature.AddKnownType(@"System.Linq.Expressions.Block2,System.Core", @"Block2");
            feature.AddKnownType(@"System.Linq.Expressions.Block3,System.Core", @"Block3");
            feature.AddKnownType(@"System.Linq.Expressions.Block4,System.Core", @"Block4");
            feature.AddKnownType(@"System.Linq.Expressions.Block5,System.Core", @"Block5");
            feature.AddKnownType(@"System.Linq.Expressions.BlockN,System.Core", @"BlockN");
            feature.AddKnownType(@"System.Linq.Expressions.ScopeExpression,System.Core", @"ScopeExpression");
            feature.AddKnownType(@"System.Linq.Expressions.Scope1,System.Core", @"Scope1");
            feature.AddKnownType(@"System.Linq.Expressions.ScopeN,System.Core", @"ScopeN");
            feature.AddKnownType(@"System.Linq.Expressions.ScopeWithType,System.Core", @"ScopeWithType");
            feature.AddKnownType(@"System.Linq.Expressions.BlockExpressionList,System.Core", @"BlockExpressionList");
            feature.AddKnownType(@"System.Linq.Expressions.CatchBlock,System.Core", @"CatchBlock");
            feature.AddKnownType(@"System.Linq.Expressions.ConditionalExpression,System.Core", @"ConditionalExpression");
            feature.AddKnownType(@"System.Linq.Expressions.FullConditionalExpression,System.Core", @"FullConditionalExpression");
            feature.AddKnownType(@"System.Linq.Expressions.FullConditionalExpressionWithType,System.Core", @"FullConditionalExpressionWithType");
            feature.AddKnownType(@"System.Linq.Expressions.ConstantExpression,System.Core", @"ConstantExpression");
            feature.AddKnownType(@"System.Linq.Expressions.TypedConstantExpression,System.Core", @"TypedConstantExpression");
            feature.AddKnownType(@"System.Linq.Expressions.DebugInfoExpression,System.Core", @"DebugInfoExpression");
            feature.AddKnownType(@"System.Linq.Expressions.SpanDebugInfoExpression,System.Core", @"SpanDebugInfoExpression");
            feature.AddKnownType(@"System.Linq.Expressions.ClearDebugInfoExpression,System.Core", @"ClearDebugInfoExpression");
            feature.AddKnownType(@"System.Linq.Expressions.DebugViewWriter,System.Core", @"DebugViewWriter");
            feature.AddKnownType(@"System.Linq.Expressions.ExpressionVisitor,System.Core", @"ExpressionVisitor");
            feature.AddKnownType(@"System.Linq.Expressions.DefaultExpression,System.Core", @"DefaultExpression");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpression,System.Core", @"DynamicExpression");
            feature.AddKnownType(@"System.Linq.Expressions.IDynamicExpression,System.Core", @"IDynamicExpression");
            feature.AddKnownType(@"System.Linq.Expressions.IArgumentProvider,System.Core", @"IArgumentProvider");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpressionN,System.Core", @"DynamicExpressionN");
            feature.AddKnownType(@"System.Linq.Expressions.TypedDynamicExpressionN,System.Core", @"TypedDynamicExpressionN");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpression1,System.Core", @"DynamicExpression1");
            feature.AddKnownType(@"System.Linq.Expressions.TypedDynamicExpression1,System.Core", @"TypedDynamicExpression1");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpression2,System.Core", @"DynamicExpression2");
            feature.AddKnownType(@"System.Linq.Expressions.TypedDynamicExpression2,System.Core", @"TypedDynamicExpression2");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpression3,System.Core", @"DynamicExpression3");
            feature.AddKnownType(@"System.Linq.Expressions.TypedDynamicExpression3,System.Core", @"TypedDynamicExpression3");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpression4,System.Core", @"DynamicExpression4");
            feature.AddKnownType(@"System.Linq.Expressions.TypedDynamicExpression4,System.Core", @"TypedDynamicExpression4");
            feature.AddKnownType(@"System.Linq.Expressions.ElementInit,System.Core", @"ElementInit");
            feature.AddKnownType(@"System.Linq.Expressions.ExpressionStringBuilder,System.Core", @"ExpressionStringBuilder");
            feature.AddKnownType(@"System.Linq.Expressions.ExpressionType,System.Core", @"ExpressionType");
            feature.AddKnownType(@"System.Linq.Expressions.DynamicExpressionVisitor,System.Core", @"DynamicExpressionVisitor");
            feature.AddKnownType(@"System.Linq.Expressions.GotoExpressionKind,System.Core", @"GotoExpressionKind");
            feature.AddKnownType(@"System.Linq.Expressions.GotoExpression,System.Core", @"GotoExpression");
            feature.AddKnownType(@"System.Linq.Expressions.ArgumentProviderOps,System.Core", @"ArgumentProviderOps");
            feature.AddKnownType(@"System.Linq.Expressions.IndexExpression,System.Core", @"IndexExpression");
            feature.AddKnownType(@"System.Linq.Expressions.InvocationExpression,System.Core", @"InvocationExpression");
            feature.AddKnownType(@"System.Linq.Expressions.LabelExpression,System.Core", @"LabelExpression");
            feature.AddKnownType(@"System.Linq.Expressions.LabelTarget,System.Core", @"LabelTarget");
            feature.AddKnownType(@"System.Linq.Expressions.LambdaExpression,System.Core", @"LambdaExpression");
            feature.AddKnownType(@"System.Linq.Expressions.Expression`1,System.Core", @"Expression`1'1");
            feature.AddKnownType(@"System.Linq.Expressions.ListArgumentProvider,System.Core", @"ListArgumentProvider");
            feature.AddKnownType(@"System.Linq.Expressions.ListInitExpression,System.Core", @"ListInitExpression");
            feature.AddKnownType(@"System.Linq.Expressions.LoopExpression,System.Core", @"LoopExpression");
            feature.AddKnownType(@"System.Linq.Expressions.MemberAssignment,System.Core", @"MemberAssignment");
            feature.AddKnownType(@"System.Linq.Expressions.MemberBinding,System.Core", @"MemberBinding");
            feature.AddKnownType(@"System.Linq.Expressions.MemberBindingType,System.Core", @"MemberBindingType");
            feature.AddKnownType(@"System.Linq.Expressions.MemberExpression,System.Core", @"MemberExpression");
            feature.AddKnownType(@"System.Linq.Expressions.FieldExpression,System.Core", @"FieldExpression");
            feature.AddKnownType(@"System.Linq.Expressions.PropertyExpression,System.Core", @"PropertyExpression");
            feature.AddKnownType(@"System.Linq.Expressions.MemberInitExpression,System.Core", @"MemberInitExpression");
            feature.AddKnownType(@"System.Linq.Expressions.MemberListBinding,System.Core", @"MemberListBinding");
            feature.AddKnownType(@"System.Linq.Expressions.MemberMemberBinding,System.Core", @"MemberMemberBinding");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression,System.Core", @"MethodCallExpression");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpressionN,System.Core", @"MethodCallExpressionN");
            feature.AddKnownType(@"System.Linq.Expressions.InstanceMethodCallExpressionN,System.Core", @"InstanceMethodCallExpressionN");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression1,System.Core", @"MethodCallExpression1");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression2,System.Core", @"MethodCallExpression2");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression3,System.Core", @"MethodCallExpression3");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression4,System.Core", @"MethodCallExpression4");
            feature.AddKnownType(@"System.Linq.Expressions.MethodCallExpression5,System.Core", @"MethodCallExpression5");
            feature.AddKnownType(@"System.Linq.Expressions.InstanceMethodCallExpression2,System.Core", @"InstanceMethodCallExpression2");
            feature.AddKnownType(@"System.Linq.Expressions.InstanceMethodCallExpression3,System.Core", @"InstanceMethodCallExpression3");
            feature.AddKnownType(@"System.Linq.Expressions.NewArrayExpression,System.Core", @"NewArrayExpression");
            feature.AddKnownType(@"System.Linq.Expressions.NewArrayInitExpression,System.Core", @"NewArrayInitExpression");
            feature.AddKnownType(@"System.Linq.Expressions.NewArrayBoundsExpression,System.Core", @"NewArrayBoundsExpression");
            feature.AddKnownType(@"System.Linq.Expressions.NewExpression,System.Core", @"NewExpression");
            feature.AddKnownType(@"System.Linq.Expressions.NewValueTypeExpression,System.Core", @"NewValueTypeExpression");
            feature.AddKnownType(@"System.Linq.Expressions.ParameterExpression,System.Core", @"ParameterExpression");
            feature.AddKnownType(@"System.Linq.Expressions.ByRefParameterExpression,System.Core", @"ByRefParameterExpression");
            feature.AddKnownType(@"System.Linq.Expressions.TypedParameterExpression,System.Core", @"TypedParameterExpression");
            feature.AddKnownType(@"System.Linq.Expressions.PrimitiveParameterExpression`1,System.Core", @"PrimitiveParameterExpression`1'1");
            feature.AddKnownType(@"System.Linq.Expressions.RuntimeVariablesExpression,System.Core", @"RuntimeVariablesExpression");
            feature.AddKnownType(@"System.Linq.Expressions.SwitchCase,System.Core", @"SwitchCase");
            feature.AddKnownType(@"System.Linq.Expressions.SwitchExpression,System.Core", @"SwitchExpression");
            feature.AddKnownType(@"System.Linq.Expressions.SymbolDocumentInfo,System.Core", @"SymbolDocumentInfo");
            feature.AddKnownType(@"System.Linq.Expressions.SymbolDocumentWithGuids,System.Core", @"SymbolDocumentWithGuids");
            feature.AddKnownType(@"System.Linq.Expressions.TryExpression,System.Core", @"TryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.TypeBinaryExpression,System.Core", @"TypeBinaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.StackGuard,System.Core", @"StackGuard");
            feature.AddKnownType(@"System.Linq.Expressions.UnaryExpression,System.Core", @"UnaryExpression");
            feature.AddKnownType(@"System.Linq.Expressions.AnalyzeTypeIsResult,System.Core", @"AnalyzeTypeIsResult");
            feature.AddKnownType(@"System.Linq.Expressions.ConstantCheck,System.Core", @"ConstantCheck");
            feature.AddKnownType(@"System.Linq.Expressions.Set`1,System.Core", @"Set`1'1");
            feature.AddKnownType(@"System.Linq.Expressions.SRDescriptionAttribute,System.Core", @"SRDescriptionAttribute");
            feature.AddKnownType(@"System.Linq.Expressions.SRCategoryAttribute,System.Core", @"SRCategoryAttribute");
            feature.AddKnownType(@"System.Linq.Expressions.SR,System.Core", @"SR");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.AnalyzedTree,System.Core", @"AnalyzedTree");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.AssemblyGen,System.Core", @"AssemblyGen");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.SymbolGuids,System.Core", @"SymbolGuids");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.BoundConstants,System.Core", @"BoundConstants");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.VariableStorageKind,System.Core", @"VariableStorageKind");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.CompilerScope,System.Core", @"CompilerScope");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.DelegateHelpers,System.Core", @"DelegateHelpers");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.HoistedLocals,System.Core", @"HoistedLocals");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.ILGen,System.Core", @"ILGen");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.KeyedQueue`2,System.Core", @"KeyedQueue`2'2");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.LabelInfo,System.Core", @"LabelInfo");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.LabelScopeKind,System.Core", @"LabelScopeKind");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.LabelScopeInfo,System.Core", @"LabelScopeInfo");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.LambdaCompiler,System.Core", @"LambdaCompiler");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.StackSpiller,System.Core", @"StackSpiller");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.SpilledExpressionBlock,System.Core", @"SpilledExpressionBlock");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.VariableBinder,System.Core", @"VariableBinder");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementEntityAttribute,System.Core", @"ManagementEntityAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementHostingModel,System.Core", @"ManagementHostingModel");
            feature.AddKnownType(@"System.Management.Instrumentation.WmiConfigurationAttribute,System.Core", @"WmiConfigurationAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementMemberAttribute,System.Core", @"ManagementMemberAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementNewInstanceAttribute,System.Core", @"ManagementNewInstanceAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementBindAttribute,System.Core", @"ManagementBindAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementCreateAttribute,System.Core", @"ManagementCreateAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementRemoveAttribute,System.Core", @"ManagementRemoveAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementEnumeratorAttribute,System.Core", @"ManagementEnumeratorAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementProbeAttribute,System.Core", @"ManagementProbeAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementTaskAttribute,System.Core", @"ManagementTaskAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementKeyAttribute,System.Core", @"ManagementKeyAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementReferenceAttribute,System.Core", @"ManagementReferenceAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementConfigurationType,System.Core", @"ManagementConfigurationType");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementConfigurationAttribute,System.Core", @"ManagementConfigurationAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementCommitAttribute,System.Core", @"ManagementCommitAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.ManagementNameAttribute,System.Core", @"ManagementNameAttribute");
            feature.AddKnownType(@"System.Management.Instrumentation.InstrumentationBaseException,System.Core", @"InstrumentationBaseException");
            feature.AddKnownType(@"System.Management.Instrumentation.InstrumentationException,System.Core", @"InstrumentationException");
            feature.AddKnownType(@"System.Management.Instrumentation.InstanceNotFoundException,System.Core", @"InstanceNotFoundException");
            feature.AddKnownType(@"System.Diagnostics.EventSchemaTraceListener,System.Core", @"EventSchemaTraceListener");
            feature.AddKnownType(@"System.Diagnostics.TraceLogRetentionOption,System.Core", @"TraceLogRetentionOption");
            feature.AddKnownType(@"System.Diagnostics.UnescapedXmlDiagnosticData,System.Core", @"UnescapedXmlDiagnosticData");
            feature.AddKnownType(@"System.Diagnostics.StackTraceSymbols,System.Core", @"StackTraceSymbols");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterData,System.Core", @"CounterData");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet,System.Core", @"CounterSetInstanceCounterDataSet");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterSet,System.Core", @"CounterSet");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterSetInstance,System.Core", @"CounterSetInstance");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterSetInstanceType,System.Core", @"CounterSetInstanceType");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.CounterType,System.Core", @"CounterType");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.PerfProvider,System.Core", @"PerfProvider");
            feature.AddKnownType(@"System.Diagnostics.PerformanceData.PerfProviderCollection,System.Core", @"PerfProviderCollection");
            feature.AddKnownType(@"System.Diagnostics.Eventing.EventDescriptor,System.Core", @"EventDescriptor");
            feature.AddKnownType(@"System.Diagnostics.Eventing.EventProvider,System.Core", @"EventProvider");
            feature.AddKnownType(@"System.Diagnostics.Eventing.EventProviderTraceListener,System.Core", @"EventProviderTraceListener");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventBookmark,System.Core", @"EventBookmark");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogType,System.Core", @"EventLogType");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogIsolation,System.Core", @"EventLogIsolation");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogMode,System.Core", @"EventLogMode");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogConfiguration,System.Core", @"EventLogConfiguration");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogLink,System.Core", @"EventLogLink");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogStatus,System.Core", @"EventLogStatus");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventProperty,System.Core", @"EventProperty");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogPropertySelector,System.Core", @"EventLogPropertySelector");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventRecord,System.Core", @"EventRecord");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventKeyword,System.Core", @"EventKeyword");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLevel,System.Core", @"EventLevel");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogRecord,System.Core", @"EventLogRecord");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogReader,System.Core", @"EventLogReader");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogWatcher,System.Core", @"EventLogWatcher");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs,System.Core", @"EventRecordWrittenEventArgs");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogQuery,System.Core", @"EventLogQuery");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogHandle,System.Core", @"EventLogHandle");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogPermissionHolder,System.Core", @"EventLogPermissionHolder");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.SessionAuthentication,System.Core", @"SessionAuthentication");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.PathType,System.Core", @"PathType");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogSession,System.Core", @"EventLogSession");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventMetadata,System.Core", @"EventMetadata");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventOpcode,System.Core", @"EventOpcode");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventTask,System.Core", @"EventTask");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogException,System.Core", @"EventLogException");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogNotFoundException,System.Core", @"EventLogNotFoundException");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogReadingException,System.Core", @"EventLogReadingException");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException,System.Core", @"EventLogProviderDisabledException");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogInvalidDataException,System.Core", @"EventLogInvalidDataException");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.EventLogInformation,System.Core", @"EventLogInformation");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.NativeWrapper,System.Core", @"NativeWrapper");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.ProviderMetadata,System.Core", @"ProviderMetadata");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation,System.Core", @"ProviderMetadataCachedInformation");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle,System.Core", @"CoTaskMemUnicodeSafeHandle");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle,System.Core", @"CoTaskMemSafeHandle");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.StandardEventLevel,System.Core", @"StandardEventLevel");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.StandardEventTask,System.Core", @"StandardEventTask");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.StandardEventOpcode,System.Core", @"StandardEventOpcode");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.StandardEventKeywords,System.Core", @"StandardEventKeywords");
            feature.AddKnownType(@"Interop+Libraries,System.Core", @"Libraries");
            feature.AddKnownType(@"Interop+Crypt32,System.Core", @"Crypt32");
            feature.AddKnownType(@"Interop+NCrypt,System.Core", @"NCrypt");
            feature.AddKnownType(@"Interop+BCrypt,System.Core", @"BCrypt");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES,System.Core", @"Microsoft.Win32.SECURITY_ATTRIBUTES");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback,System.Core", @"Microsoft.Win32.EtwEnableCallback");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct,System.Core", @"Microsoft.Win32.PerfCounterSetInfoStruct");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+PerfCounterInfoStruct,System.Core", @"Microsoft.Win32.PerfCounterInfoStruct");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct,System.Core", @"Microsoft.Win32.PerfCounterSetInstanceStruct");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST,System.Core", @"Microsoft.Win32.PERFLIBREQUEST");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtQueryFlags,System.Core", @"Microsoft.Win32.EvtQueryFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtSubscribeFlags,System.Core", @"Microsoft.Win32.EvtSubscribeFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtVariantType,System.Core", @"Microsoft.Win32.EvtVariantType");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtMasks,System.Core", @"Microsoft.Win32.EvtMasks");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+SystemTime,System.Core", @"Microsoft.Win32.SystemTime");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtVariant,System.Core", @"Microsoft.Win32.EvtVariant");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId,System.Core", @"Microsoft.Win32.EvtEventPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId,System.Core", @"Microsoft.Win32.EvtQueryPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId,System.Core", @"Microsoft.Win32.EvtPublisherMetadataPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtChannelReferenceFlags,System.Core", @"Microsoft.Win32.EvtChannelReferenceFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId,System.Core", @"Microsoft.Win32.EvtEventMetadataPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId,System.Core", @"Microsoft.Win32.EvtChannelConfigPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId,System.Core", @"Microsoft.Win32.EvtLogPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtExportLogFlags,System.Core", @"Microsoft.Win32.EvtExportLogFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags,System.Core", @"Microsoft.Win32.EvtRenderContextFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags,System.Core", @"Microsoft.Win32.EvtRenderFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags,System.Core", @"Microsoft.Win32.EvtFormatMessageFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtSystemPropertyId,System.Core", @"Microsoft.Win32.EvtSystemPropertyId");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass,System.Core", @"Microsoft.Win32.EvtLoginClass");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin,System.Core", @"Microsoft.Win32.EvtRpcLogin");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags,System.Core", @"Microsoft.Win32.EvtSeekFlags");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant,System.Core", @"Microsoft.Win32.EvtStringVariant");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+MEMORY_BASIC_INFORMATION,System.Core", @"Microsoft.Win32.MEMORY_BASIC_INFORMATION");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+SYSTEM_INFO,System.Core", @"Microsoft.Win32.SYSTEM_INFO");
            feature.AddKnownType(@"Microsoft.Win32.UnsafeNativeMethods+MEMORYSTATUSEX,System.Core", @"Microsoft.Win32.MEMORYSTATUSEX");
            feature.AddKnownType(@"System.Reflection.Metadata.SequencePointCollection+Enumerator,System.Core", @"Enumerator");
            feature.AddKnownType(@"System.Reflection.Metadata.BlobHandle+VirtualIndex,System.Core", @"VirtualIndex");
            feature.AddKnownType(@"System.Collections.Immutable.ImmutableArray`1+Builder,System.Core", @"ImmutableArray`1'1.Builder'1");
            feature.AddKnownType(@"System.Collections.Generic.HashSet`1+ElementCount,System.Core", @"ElementCount'1");
            feature.AddKnownType(@"System.Collections.Generic.HashSet`1+Slot,System.Core", @"Slot'1");
            feature.AddKnownType(@"System.Collections.Generic.HashSet`1+Enumerator,System.Core", @"HashSet`1'1.Enumerator'1");
            feature.AddKnownType(@"System.IO.Pipes.NamedPipeServerStream+ExecuteHelper,System.Core", @"ExecuteHelper");
            feature.AddKnownType(@"System.Dynamic.Utils.CacheDict`2+Entry,System.Core", @"Entry'2");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+AlgorithmName,System.Core", @"AlgorithmName");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+KeyBlobType,System.Core", @"KeyBlobType");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+BCRYPT_RSAKEY_BLOB,System.Core", @"BCRYPT_RSAKEY_BLOB");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+ErrorCode,System.Core", @"ErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+HashPropertyName,System.Core", @"HashPropertyName");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber,System.Core", @"KeyBlobMagicNumber");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+BCRYPT_OAEP_PADDING_INFO,System.Core", @"BCRYPT_OAEP_PADDING_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO,System.Core", @"BCRYPT_PKCS1_PADDING_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+BCRYPT_PSS_PADDING_INFO,System.Core", @"BCRYPT_PSS_PADDING_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+KeyDerivationFunction,System.Core", @"KeyDerivationFunction");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+ProviderName,System.Core", @"ProviderName");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+ObjectPropertyName,System.Core", @"ObjectPropertyName");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+UnsafeNativeMethods,System.Core", @"UnsafeNativeMethods");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+AesBCryptModes,System.Core", @"AesBCryptModes");
            feature.AddKnownType(@"System.Security.Cryptography.BCryptNative+TripleDesBCryptModes,System.Core", @"TripleDesBCryptModes");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmClass,System.Core", @"AlgorithmClass");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmType,System.Core", @"AlgorithmType");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmSubId,System.Core", @"AlgorithmSubId");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+AlgorithmId,System.Core", @"AlgorithmId");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+CryptAcquireContextFlags,System.Core", @"CryptAcquireContextFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ErrorCode,System.Core", @"ErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+HashParameter,System.Core", @"HashParameter");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeyBlobType,System.Core", @"KeyBlobType");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeyFlags,System.Core", @"KeyFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+KeyParameter,System.Core", @"KeyParameter");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderNames,System.Core", @"ProviderNames");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderParameter,System.Core", @"ProviderParameter");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderParameterFlags,System.Core", @"ProviderParameterFlags");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+ProviderType,System.Core", @"ProviderType");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+BLOBHEADER,System.Core", @"BLOBHEADER");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB,System.Core", @"CRYPTOAPI_BLOB");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+CERT_DSS_PARAMETERS,System.Core", @"CERT_DSS_PARAMETERS");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+PROV_ENUMALGS,System.Core", @"PROV_ENUMALGS");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+CRYPT_OID_INFO,System.Core", @"CRYPT_OID_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.CapiNative+UnsafeNativeMethods,System.Core", @"UnsafeNativeMethods");
            feature.AddKnownType(@"System.Security.Cryptography.ECCurve+ECCurveType,System.Core", @"ECCurve.ECCurveType");
            feature.AddKnownType(@"System.Security.Cryptography.ECCurve+NamedCurves,System.Core", @"ECCurve.NamedCurves");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+BufferType,System.Core", @"BufferType");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+ErrorCode,System.Core", @"ErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+KeyPropertyName,System.Core", @"KeyPropertyName");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+ProviderPropertyName,System.Core", @"ProviderPropertyName");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+SecretAgreementFlags,System.Core", @"SecretAgreementFlags");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+NCRYPT_UI_POLICY,System.Core", @"NCRYPT_UI_POLICY");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+NCryptBuffer,System.Core", @"NCryptBuffer");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+NCryptBufferDesc,System.Core", @"NCryptBufferDesc");
            feature.AddKnownType(@"System.Security.Cryptography.NCryptNative+UnsafeNativeMethods,System.Core", @"UnsafeNativeMethods");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.DerSequenceReader+DerTag,System.Core", @"DerTag");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags,System.Core", @"X509Native.AxlVerificationFlags");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CERT_CONTEXT,System.Core", @"CERT_CONTEXT");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO,System.Core", @"CERT_PUBLIC_KEY_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CERT_INFO,System.Core", @"CERT_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CRYPT_ALGORITHM_IDENTIFIER,System.Core", @"CRYPT_ALGORITHM_IDENTIFIER");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB,System.Core", @"CRYPT_BIT_BLOB");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB,System.Core", @"CRYPTOAPI_BLOB");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+AcquireCertificateKeyOptions,System.Core", @"AcquireCertificateKeyOptions");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty,System.Core", @"CertificateProperty");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CertSetPropertyFlags,System.Core", @"CertSetPropertyFlags");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+ErrorCode,System.Core", @"ErrorCode");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+CRYPT_KEY_PROV_INFO,System.Core", @"CRYPT_KEY_PROV_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO,System.Core", @"X509Native.AXL_AUTHENTICODE_SIGNER_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO,System.Core", @"X509Native.AXL_AUTHENTICODE_TIMESTAMPER_INFO");
            feature.AddKnownType(@"System.Security.Cryptography.X509Certificates.X509Native+UnsafeNativeMethods,System.Core", @"X509Native.UnsafeNativeMethods");
            feature.AddKnownType(@"System.Linq.Lookup`2+Grouping,System.Core", @"Grouping'2");
            feature.AddKnownType(@"System.Linq.Set`1+Slot,System.Core", @"Slot'1");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator,System.Core", @"ArrayIndexRangeEnumerator'1");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator,System.Core", @"ArrayContiguousIndexRangeEnumerator'1");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator,System.Core", @"ListIndexRangeEnumerator'1");
            feature.AddKnownType(@"System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator,System.Core", @"ListContiguousIndexRangeEnumerator'1");
            feature.AddKnownType(@"System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults,System.Core", @"ZipQueryOperatorResults'3");
            feature.AddKnownType(@"System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults,System.Core", @"BinaryQueryOperatorResults'3");
            feature.AddKnownType(@"System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData,System.Core", @"GroupKeyData'4");
            feature.AddKnownType(@"System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults,System.Core", @"UnaryQueryOperatorResults'2");
            feature.AddKnownType(@"System.Linq.Parallel.HashLookup`2+Slot,System.Core", @"Slot'2");
            feature.AddKnownType(@"System.Linq.Parallel.PlinqEtwProvider+Tasks,System.Core", @"PlinqEtwProvider.Tasks");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+BinaryExpressionProxy,System.Core", @"BinaryExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+BlockExpressionProxy,System.Core", @"BlockExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+CatchBlockProxy,System.Core", @"CatchBlockProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+ConditionalExpressionProxy,System.Core", @"ConditionalExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+ConstantExpressionProxy,System.Core", @"ConstantExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+DebugInfoExpressionProxy,System.Core", @"DebugInfoExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+DefaultExpressionProxy,System.Core", @"DefaultExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+DynamicExpressionProxy,System.Core", @"DynamicExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+GotoExpressionProxy,System.Core", @"GotoExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+IndexExpressionProxy,System.Core", @"IndexExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+InvocationExpressionProxy,System.Core", @"InvocationExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+LabelExpressionProxy,System.Core", @"LabelExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+LambdaExpressionProxy,System.Core", @"LambdaExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+ListInitExpressionProxy,System.Core", @"ListInitExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+LoopExpressionProxy,System.Core", @"LoopExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+MemberExpressionProxy,System.Core", @"MemberExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+MemberInitExpressionProxy,System.Core", @"MemberInitExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+MethodCallExpressionProxy,System.Core", @"MethodCallExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+NewArrayExpressionProxy,System.Core", @"NewArrayExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+NewExpressionProxy,System.Core", @"NewExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+ParameterExpressionProxy,System.Core", @"ParameterExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+RuntimeVariablesExpressionProxy,System.Core", @"RuntimeVariablesExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+SwitchCaseProxy,System.Core", @"SwitchCaseProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+SwitchExpressionProxy,System.Core", @"SwitchExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+TryExpressionProxy,System.Core", @"TryExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+TypeBinaryExpressionProxy,System.Core", @"TypeBinaryExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Expression+UnaryExpressionProxy,System.Core", @"UnaryExpressionProxy");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo,System.Core", @"TypeInfo");
            feature.AddKnownType(@"System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags,System.Core", @"CompilationFlags");
            feature.AddKnownType(@"System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode,System.Core", @"EventProvider.WriteEventErrorCode");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties,System.Core", @"NativeWrapper.SystemProperties");
            feature.AddKnownType(@"System.Diagnostics.Eventing.Reader.ProviderMetadata+ObjectTypeName,System.Core", @"ObjectTypeName");
            feature.AddKnownType(@"Interop+Crypt32+CRYPT_OID_INFO,System.Core", @"CRYPT_OID_INFO");
            feature.AddKnownType(@"Interop+Crypt32+CryptOidInfoKeyType,System.Core", @"CryptOidInfoKeyType");
            feature.AddKnownType(@"Interop+NCrypt+ErrorCode,System.Core", @"ErrorCode");
            feature.AddKnownType(@"Interop+NCrypt+AsymmetricPaddingMode,System.Core", @"AsymmetricPaddingMode");
            feature.AddKnownType(@"Interop+BCrypt+KeyBlobMagicNumber,System.Core", @"KeyBlobMagicNumber");
            feature.AddKnownType(@"Interop+BCrypt+BCRYPT_ECCKEY_BLOB,System.Core", @"BCRYPT_ECCKEY_BLOB");
            feature.AddKnownType(@"Interop+BCrypt+ECC_CURVE_TYPE_ENUM,System.Core", @"ECC_CURVE_TYPE_ENUM");
            feature.AddKnownType(@"Interop+BCrypt+ECC_CURVE_ALG_ID_ENUM,System.Core", @"ECC_CURVE_ALG_ID_ENUM");
            feature.AddKnownType(@"Interop+BCrypt+BCRYPT_ECCFULLKEY_BLOB,System.Core", @"BCRYPT_ECCFULLKEY_BLOB");
            feature.AddKnownType(@"Interop+BCrypt+NCryptBufferDescriptors,System.Core", @"NCryptBufferDescriptors");
            feature.AddKnownType(@"Interop+BCrypt+BCryptBuffer,System.Core", @"BCryptBuffer");
            feature.AddKnownType(@"Interop+BCrypt+BCryptBufferDesc,System.Core", @"BCryptBufferDesc");
            feature.AddKnownType(@"Interop+BCrypt+BCRYPT_ECC_PARAMETER_HEADER,System.Core", @"BCRYPT_ECC_PARAMETER_HEADER");
            feature.AddKnownType(@"__DynamicallyInvokableAttribute,System.Core", @"__DynamicallyInvokableAttribute");
            feature.AddKnownType(@"SystemInterfaces.IBatchCoordinator,GrainInterfaces", @"SystemInterfaces.IBatchCoordinator");
            feature.AddKnownType(@"SystemInterfaces.IBatchTracker,GrainInterfaces", @"SystemInterfaces.IBatchTracker");
            feature.AddKnownType(@"SystemInterfaces.IErrorDetector,GrainInterfaces", @"SystemInterfaces.IErrorDetector");
            feature.AddKnownType(@"SystemInterfaces.IOperator,GrainInterfaces", @"SystemInterfaces.IOperator");
            feature.AddKnownType(@"SystemInterfaces.ISentenceGenerator,GrainInterfaces", @"SystemInterfaces.ISentenceGenerator");
            feature.AddKnownType(@"SystemInterfaces.IStatefulOperator,GrainInterfaces", @"SystemInterfaces.IStatefulOperator");
            feature.AddKnownType(@"SystemInterfaces.IStatelessOperator,GrainInterfaces", @"SystemInterfaces.IStatelessOperator");
            feature.AddKnownType(@"SystemInterfaces.IStreamSource,GrainInterfaces", @"SystemInterfaces.IStreamSource");
            feature.AddKnownType(@"SystemInterfaces.ITopology,GrainInterfaces", @"SystemInterfaces.ITopology");
            feature.AddKnownType(@"SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo,GrainInterfaces", @"SystemInterfaces.Model.BarrierOrCommitMsgTrackingInfo");
            feature.AddKnownType(@"SystemInterfaces.Model.Excutable,GrainInterfaces", @"SystemInterfaces.Model.Excutable");
            feature.AddKnownType(@"SystemInterfaces.Model.IncrementalLog,GrainInterfaces", @"SystemInterfaces.Model.IncrementalLog");
            feature.AddKnownType(@"SystemInterfaces.Model.LogType,GrainInterfaces", @"SystemInterfaces.Model.LogType");
            feature.AddKnownType(@"SystemInterfaces.Model.OperatorSettings,GrainInterfaces", @"SystemInterfaces.Model.OperatorSettings");
            feature.AddKnownType(@"SystemInterfaces.Model.OperatorType,GrainInterfaces", @"SystemInterfaces.Model.OperatorType");
            feature.AddKnownType(@"SystemInterfaces.Model.StreamBatch,GrainInterfaces", @"SystemInterfaces.Model.StreamBatch");
            feature.AddKnownType(@"SystemInterfaces.Model.StreamMessage,GrainInterfaces", @"SystemInterfaces.Model.StreamMessage");
            feature.AddKnownType(@"SystemInterfaces.Model.MessageType,GrainInterfaces", @"SystemInterfaces.Model.MessageType");
            feature.AddKnownType(@"SystemInterfaces.Model.StreamValue,GrainInterfaces", @"SystemInterfaces.Model.StreamValue");
            feature.AddKnownType(@"SystemInterfaces.Model.Topology,GrainInterfaces", @"SystemInterfaces.Model.Topology");
            feature.AddKnownType(@"SystemInterfaces.Model.TopologyUnit,GrainInterfaces", @"SystemInterfaces.Model.TopologyUnit");
            feature.AddKnownType(@"SystemInterfaces.Model.UpperStreamOperators,GrainInterfaces", @"SystemInterfaces.Model.UpperStreamOperators");
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
